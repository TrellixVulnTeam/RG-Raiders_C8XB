"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var XMLHttpRequest = typeof window !== 'undefined' ? window.XMLHttpRequest : require('xmlhttprequest').XMLHttpRequest;
var IPFS_CONF = {
  host: 'ipfs.infura.io',
  port: 5001,
  protocol: 'https'
};

function ipfsLookup(_x, _x2) {
  return _ipfsLookup.apply(this, arguments);
}

function _ipfsLookup() {
  _ipfsLookup = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(hash, conf) {
    var url;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            conf = conf || IPFS_CONF;
            url = conf.protocol + '://' + conf.host + '/ipfs/' + hash;
            return _context.abrupt("return", request(url));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ipfsLookup.apply(this, arguments);
}

function request(url, payload) {
  var request = new XMLHttpRequest();
  return new Promise(function (resolve, reject) {
    request.onreadystatechange = function () {
      if (request.readyState === 4 && request.timeout !== 1) {
        if (request.status !== 200) {
          reject("[muport-did-resolver] status ".concat(request.status, ": ").concat(request.responseText));
        } else {
          try {
            resolve(JSON.parse(request.responseText));
          } catch (jsonError) {
            reject("[muport-did-resolver] while parsing data: '".concat(String(request.responseText), "', error: ").concat(String(jsonError)));
          }
        }
      }
    };

    if (payload) {
      request.open('POST', url);
      request.setRequestHeader('Content-Type', "application/json");
    } else {
      request.open('GET', url);
    }

    request.setRequestHeader('accept', 'application/json');
    request.send(payload);
  });
}

module.exports = {
  ipfsLookup: ipfsLookup
};