"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cacheSupported = exports.createIpfsStorageProxy = exports.createOrbitStorageProxy = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _require = require('postmsg-rpc'),
    caller = _require.caller;

var _require2 = require('./levelDownProxy'),
    Store = _require2.Store;

var OrbitDbStorageAdapter = require('orbit-db-storage-adapter');

var LevelUp = require('levelup');

var LevelStore = require('datastore-level');

var createOrbitStorageProxy = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(path, _ref2) {
    var postMessage, db, storage;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            postMessage = _ref2.postMessage;

            db = function db(path, opts) {
              var levelDownProxy = new Store(path, Object.assign(opts, {
                postMessage: postMessage
              }));
              return LevelUp(levelDownProxy);
            };

            storage = OrbitDbStorageAdapter(db, {});
            return _context.abrupt("return", storage.createStore(path));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createOrbitStorageProxy(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.createOrbitStorageProxy = createOrbitStorageProxy;

var cacheSupported = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(opts) {
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", caller('supported', opts)());

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function cacheSupported(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

exports.cacheSupported = cacheSupported;

var createIpfsStorageProxy = function createIpfsStorageProxy(_ref4) {
  var postMessage = _ref4.postMessage;
  return function store(path, opts) {
    var db = function db(path, opts) {
      var levelDownProxy = new Store(path, Object.assign(opts, {
        postMessage: postMessage
      }));
      return LevelUp(levelDownProxy);
    };

    return new LevelStore(path, {
      db: db
    });
  };
};

exports.createIpfsStorageProxy = createIpfsStorageProxy;