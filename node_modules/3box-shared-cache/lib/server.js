"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createServer = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Level = require('level-js');

var _require = require('postmsg-rpc'),
    expose = _require.expose;

var _require2 = require('./utils'),
    serialize = _require2.serialize,
    deserialize = _require2.deserialize;

require('./modernizr.js');

var methods = {
  create: function create(databases, path) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    return new Promise(function (resolve, reject) {
      databases[path] = Level.apply(void 0, [path].concat(args));
      resolve(path);
    });
  },
  open: function open(databases, path, options) {
    return new Promise(function (resolve, reject) {
      if (!databases[path]) {
        reject(new Error('Unknown database'));
        return;
      }

      databases[path].open(options, function (err) {
        if (err) reject(err);
        resolve();
      });
    });
  },
  close: function close(databases, path) {
    return new Promise(function (resolve, reject) {
      if (!databases[path]) {
        reject(new Error('Unknown database'));
        return;
      }

      databases[path].close(function (err) {
        if (err) reject(err);
        resolve();
      });
    });
  },
  get: function get(databases, path, key, options) {
    return new Promise(function (resolve, reject) {
      if (!databases[path]) {
        reject(new Error('Unknown database'));
        return;
      }

      var k = deserialize(key);
      databases[path].get(k, options, function (err, value) {
        if (err) {
          reject(err);
          return;
        }

        resolve(serialize(value));
      });
    });
  },
  put: function put(databases, path, key, value, options) {
    return new Promise(function (resolve, reject) {
      if (!databases[path]) {
        reject(new Error('Unknown database'));
        return;
      }

      var k = deserialize(key);
      var v = deserialize(value);
      databases[path].put(k, v, options, function (err) {
        if (err) reject(err);
        resolve();
      });
    });
  },
  del: function del(databases, path, key, options) {
    return new Promise(function (resolve, reject) {
      if (!databases[path]) {
        reject(new Error('Unknown database'));
        return;
      }

      var k = deserialize(key);
      databases[path].del(k, options, function (err) {
        if (err) reject(err);
        resolve();
      });
    });
  },
  batch: function batch(databases, path, arr, options) {
    return new Promise(function (resolve, reject) {
      if (!databases[path]) {
        reject(new Error('Unknown database'));
        return;
      }

      var ops = arr.map(function (op) {
        var o = _objectSpread({}, op, {
          key: deserialize(op.key)
        });

        if (op.value) {
          o.value = deserialize(op.value);
        }

        return o;
      });
      databases[path].batch(ops, options, function (err) {
        if (err) reject(err);
        resolve();
      });
    });
  }
};

var supported = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              window.Modernizr.on('indexeddb', resolve);
            }));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function supported() {
    return _ref.apply(this, arguments);
  };
}();

var createServer = function createServer(_ref2) {
  var postMessage = _ref2.postMessage;
  var databases = {};
  var rpcs = {};

  var init = function init() {
    databases = {};
    rpcs = {
      create: null,
      open: null,
      close: null,
      get: null,
      put: null,
      del: null,
      batch: null,
      supported: null
    };
  };

  var start = function start() {
    rpcs.open = expose('create', methods.create.bind(null, databases), {
      postMessage: postMessage
    });
    rpcs.open = expose('open', methods.open.bind(null, databases), {
      postMessage: postMessage
    });
    rpcs.close = expose('close', methods.close.bind(null, databases), {
      postMessage: postMessage
    });
    rpcs.get = expose('get', methods.get.bind(null, databases), {
      postMessage: postMessage
    });
    rpcs.put = expose('put', methods.put.bind(null, databases), {
      postMessage: postMessage
    });
    rpcs.del = expose('del', methods.del.bind(null, databases), {
      postMessage: postMessage
    });
    rpcs.batch = expose('batch', methods.batch.bind(null, databases), {
      postMessage: postMessage
    });
    rpcs.supported = expose('supported', supported, {
      postMessage: postMessage
    });
  };

  var stop = function stop() {
    Object.keys(rpcs).forEach(function (rpcName) {
      rpcs[rpcName].close();
    });
    Object.keys(databases).forEach(function (name) {
      delete databases[name];
    });
  };

  return {
    init: init,
    start: start,
    stop: stop
  };
};

exports.createServer = createServer;