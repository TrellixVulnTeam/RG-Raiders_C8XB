"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IframeCache = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _client = require("./client.js");

var HIDE_IFRAME_STYLE = 'position: fixed; width:0; height:0; border:0; border:none !important';
var CACHE_IFRAME_URL = 'https://cache.3box.io';
/**
 *  IframeCache provides an interface for loading an iframe cache and for returning
 *  configured storage interfaces for ipfs and orbitdb. All data is shared over
 *  and rpc layer through postmessage, this acts like an rpc client.
 */

var IframeCache = /*#__PURE__*/function () {
  /**
    *  Creates IframeCache. Create and loads iframe. Should be instantiated
    *  on page load.
    *
    * @param     {String}    iframeUrl   iframe url, defaults to cache.3box.io cache service
    */
  function IframeCache(iframeUrl) {
    var _this = this;

    (0, _classCallCheck2["default"])(this, IframeCache);

    if (typeof window === 'undefined' || typeof document === 'undefined') {
      throw new Error('Shared iframe cache not supported in this enviroment');
    }

    this.iframe = document.createElement('iframe');
    this.iframe.src = iframeUrl || CACHE_IFRAME_URL;
    this.iframe.style = HIDE_IFRAME_STYLE;
    this.iframe.frameBorder = 0;
    this.iframeLoadedPromise = new Promise(function (resolve, reject) {
      _this.iframe.onload = function () {
        resolve();
      };
    });
    document.body.appendChild(this.iframe);
  }

  (0, _createClass2["default"])(IframeCache, [{
    key: "getOrbitStorageProxyFactory",
    value: function getOrbitStorageProxyFactory() {
      var _this2 = this;

      // const postMessage = this.iframe.contentWindow.postMessage.bind(this.iframe.contentWindow)
      return function (path) {
        return (0, _client.createOrbitStorageProxy)(path, {
          postMessage: _this2.postMessage
        });
      };
    }
  }, {
    key: "getIpfsStorageProxy",
    value: function getIpfsStorageProxy() {
      var _this3 = this;

      return (0, _client.createIpfsStorageProxy)({
        postMessage: function postMessage(data, origin) {
          return _this3.postMessage(data, '*');
        }
      });
    }
  }, {
    key: "connect",
    value: function () {
      var _connect = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.iframeLoadedPromise;

              case 2:
                this.postMessage = this.iframe.contentWindow.postMessage.bind(this.iframe.contentWindow);
                return _context.abrupt("return", (0, _client.cacheSupported)({
                  postMessage: this.postMessage
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connect() {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
  }]);
  return IframeCache;
}();

exports.IframeCache = IframeCache;