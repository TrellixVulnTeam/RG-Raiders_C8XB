"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_utils_1 = require("rpc-utils");
const methods = {
    '3id_getLink': (ctx) => __awaiter(void 0, void 0, void 0, function* () {
        return (yield ctx.provider.wallet.getLink()).toLowerCase();
    }),
    '3id_linkManagementKey': (ctx) => __awaiter(void 0, void 0, void 0, function* () {
        return yield ctx.provider.wallet.linkManagementKey();
    }),
    '3id_authenticate': (ctx, params) => __awaiter(void 0, void 0, void 0, function* () {
        return yield ctx.provider.wallet.authenticate(params.spaces, {
            authData: params.authData,
            address: params.address,
            mgmtPub: params.mgmtPub,
        }, ctx.origin);
    }),
    '3id_isAuthenticated': (ctx, params) => __awaiter(void 0, void 0, void 0, function* () {
        return yield ctx.provider.wallet.isAuthenticated(params.spaces, ctx.origin);
    }),
    '3id_signClaim': (ctx, params) => __awaiter(void 0, void 0, void 0, function* () {
        return yield ctx.provider.wallet.signClaim(params.payload, {
            DID: params.did,
            space: params.space,
            expiresIn: params.expiresIn,
            useMgmt: params.useMgmt,
        });
    }),
    '3id_encrypt': (ctx, params) => __awaiter(void 0, void 0, void 0, function* () {
        return yield ctx.provider.wallet.encrypt(params.message, params.space, {
            blockSize: params.blockSize,
            to: params.to,
        });
    }),
    '3id_decrypt': (ctx, params) => __awaiter(void 0, void 0, void 0, function* () {
        return yield ctx.provider.wallet.decrypt({
            ciphertext: params.ciphertext,
            ephemeralFrom: params.ephemeralFrom,
            nonce: params.nonce,
        }, params.space, params.buffer);
    }),
    '3id_hashEntryKey': (ctx, params) => __awaiter(void 0, void 0, void 0, function* () {
        return yield ctx.provider.wallet.hashDBKey(params.key, params.space);
    }),
    '3id_newAuthMethodPoll': (ctx) => ctx.provider.pollAuthMethods(),
    '3id_newLinkPoll': (ctx) => ctx.provider.pollLinks(),
};
class ThreeIdProvider {
    constructor(wallet) {
        this._newAuthMethods = [];
        this._newLinks = [];
        this._handle = rpc_utils_1.createHandler(methods);
        this.wallet = wallet;
        wallet.events.on('new-auth-method', (authBlob) => {
            this._newAuthMethods.push(authBlob);
        });
        wallet.events.on('new-link-proof', (linkProof) => {
            this._newLinks.push(linkProof);
        });
    }
    get is3idProvider() {
        return true;
    }
    pollAuthMethods() {
        const methods = [...this._newAuthMethods];
        this._newAuthMethods = [];
        return methods;
    }
    pollLinks() {
        const links = [...this._newLinks];
        this._newLinks = [];
        return links;
    }
    send(req, origin, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof origin === 'function') {
                callback = origin;
                origin = null;
            }
            const res = yield this._handle({ provider: this, origin }, req);
            if (res === null || res === void 0 ? void 0 : res.error) {
                const error = rpc_utils_1.RPCError.fromObject(res.error);
                if (callback == null) {
                    throw error;
                }
                else {
                    callback(error);
                    return null;
                }
            }
            callback === null || callback === void 0 ? void 0 : callback(null, res);
            return res;
        });
    }
}
exports.default = ThreeIdProvider;
//# sourceMappingURL=threeIdProvider.js.map