"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidProvider = void 0;
const did_jwt_1 = require("did-jwt");
const rpc_utils_1 = require("rpc-utils");
const utils_1 = require("./utils");
const methods = {
    did_authenticate: ({ wallet, origin }) => __awaiter(void 0, void 0, void 0, function* () {
        yield wallet.authenticate([], {}, origin);
        return { did: wallet.DID };
    }),
    did_createJWS: ({ wallet, origin }, params) => __awaiter(void 0, void 0, void 0, function* () {
        if (!(yield wallet.isAuthenticated([], origin))) {
            throw new rpc_utils_1.RPCError(0, 'Authentication required');
        }
        const signer = wallet.getRootSigner(params.pubKeyId);
        const header = params.protected ? utils_1.toStableObject(params.protected) : undefined;
        const jws = yield did_jwt_1.createJWS(utils_1.toStableObject(params.payload), signer, header);
        return { jws };
    }),
};
class DidProvider {
    constructor(wallet) {
        this._handle = rpc_utils_1.createHandler(methods);
        this._wallet = wallet;
    }
    get isDidProvider() {
        return true;
    }
    send(msg, origin) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._handle({ origin, wallet: this._wallet }, msg);
        });
    }
}
exports.DidProvider = DidProvider;
//# sourceMappingURL=did-provider.js.map