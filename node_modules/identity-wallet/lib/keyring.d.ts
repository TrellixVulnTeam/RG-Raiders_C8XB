/// <reference types="node" />
import { BoxKeyPair } from 'tweetnacl';
import { HDNode } from '@ethersproject/hdnode';
import { Wallet } from '@ethersproject/wallet';
import { Signer } from 'did-jwt';
import { AsymEncryptedMessage, EncryptedMessage } from './crypto';
interface DecryptOptions {
    space?: string;
    toBuffer?: boolean | undefined;
}
export interface PublicKeys {
    signingKey: string;
    managementKey: string | null;
    asymEncryptionKey: string;
}
export interface KeySet {
    signingKey: HDNode;
    asymEncryptionKey: BoxKeyPair;
    symEncryptionKey: Uint8Array;
}
export interface RootKeySet extends KeySet {
    managementKey: HDNode | {
        address: string;
        publicKey?: string;
    };
    managementAddress?: string;
}
export declare type Signature = {
    r: string;
    s: string;
    recoveryParam: number;
};
export default class Keyring {
    protected _seed: string | undefined;
    protected _baseNode: HDNode | undefined;
    protected _rootKeys: RootKeySet | undefined;
    protected _spaceKeys: Record<string, KeySet>;
    protected _migratedKeys: boolean;
    constructor(seed?: string | null, migratedKeys?: string);
    _importMigratedKeys(migratedKeysString: string): void;
    _deriveKeySet(hdNode: HDNode): KeySet;
    _deriveRootKeySet(hdNode: HDNode): RootKeySet;
    _deriveSpaceKeys(space: string): void;
    _getKeys(space?: string): KeySet;
    asymEncrypt(msg: string | Uint8Array, toPublic: string, { nonce }?: {
        nonce?: Uint8Array;
    }): AsymEncryptedMessage;
    asymDecrypt(ciphertext: string, fromPublic: string, nonce: string, { space, toBuffer }: {
        space?: string;
        toBuffer?: false;
    }): string;
    asymDecrypt(ciphertext: string, fromPublic: string, nonce: string, { space, toBuffer }: {
        space?: string;
        toBuffer: true;
    }): Buffer;
    symEncrypt(msg: string | Uint8Array, { space, nonce }?: {
        space?: string;
        nonce?: Uint8Array;
    }): EncryptedMessage;
    symDecrypt(ciphertext: string, nonce: string, { space, toBuffer }?: DecryptOptions): (string & Buffer) | null;
    managementPersonalSign(message: ArrayLike<number> | string): Promise<string>;
    managementWallet(): Wallet;
    getJWTSigner(space?: string, useMgmt?: boolean): Signer;
    getRootSigner(keyId?: string): Signer;
    getDBSalt(space?: string): string;
    getPublicKeys({ space, uncompressed, mgmtPub, }?: {
        space?: string;
        uncompressed?: boolean;
        mgmtPub?: string;
    }): PublicKeys;
    serialize(): string | undefined;
    static encryptWithAuthSecret(message: string | Uint8Array, authSecret: string): EncryptedMessage;
    static decryptWithAuthSecret(ciphertext: string, nonce: string, authSecret: string): string | null;
    static walletForAuthSecret(authSecret: string): Wallet;
}
export {};
