"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asymDecrypt = exports.asymEncrypt = exports.symDecryptBase = exports.symEncryptBase = exports.randomNonce = exports.naclRandom = void 0;
const tweetnacl_1 = __importDefault(require("tweetnacl"));
const tweetnacl_util_1 = __importDefault(require("tweetnacl-util"));
function naclRandom(length) {
    return tweetnacl_1.default.randomBytes(length);
}
exports.naclRandom = naclRandom;
function randomNonce() {
    return naclRandom(24);
}
exports.randomNonce = randomNonce;
function symEncryptBase(message, symKey, providedNonce) {
    const nonce = providedNonce !== null && providedNonce !== void 0 ? providedNonce : randomNonce();
    const msg = typeof message === 'string' ? tweetnacl_util_1.default.decodeUTF8(message) : message;
    const ciphertext = tweetnacl_1.default.secretbox(msg, nonce, symKey);
    return {
        nonce: tweetnacl_util_1.default.encodeBase64(nonce),
        ciphertext: tweetnacl_util_1.default.encodeBase64(ciphertext),
    };
}
exports.symEncryptBase = symEncryptBase;
function symDecryptBase(ciphertext, symKey, nonce, toBuffer = false) {
    const cleartext = tweetnacl_1.default.secretbox.open(tweetnacl_util_1.default.decodeBase64(ciphertext), tweetnacl_util_1.default.decodeBase64(nonce), symKey);
    if (cleartext == null) {
        return null;
    }
    return toBuffer ? Buffer.from(cleartext) : tweetnacl_util_1.default.encodeUTF8(cleartext);
}
exports.symDecryptBase = symDecryptBase;
function asymEncrypt(message, toPublic, providedNonce) {
    const nonce = providedNonce !== null && providedNonce !== void 0 ? providedNonce : randomNonce();
    const msg = typeof message === 'string' ? tweetnacl_util_1.default.decodeUTF8(message) : message;
    const ephemneralKeypair = tweetnacl_1.default.box.keyPair();
    const ciphertext = tweetnacl_1.default.box(msg, nonce, tweetnacl_util_1.default.decodeBase64(toPublic), ephemneralKeypair.secretKey);
    return {
        nonce: tweetnacl_util_1.default.encodeBase64(nonce),
        ephemeralFrom: tweetnacl_util_1.default.encodeBase64(ephemneralKeypair.publicKey),
        ciphertext: tweetnacl_util_1.default.encodeBase64(ciphertext),
    };
}
exports.asymEncrypt = asymEncrypt;
function asymDecrypt(ciphertext, fromPublic, toSecret, nonce, toBuffer) {
    const cleartext = tweetnacl_1.default.box.open(tweetnacl_util_1.default.decodeBase64(ciphertext), tweetnacl_util_1.default.decodeBase64(nonce), tweetnacl_util_1.default.decodeBase64(fromPublic), toSecret);
    if (cleartext == null) {
        return null;
    }
    return toBuffer ? Buffer.from(cleartext) : tweetnacl_util_1.default.encodeUTF8(cleartext);
}
exports.asymDecrypt = asymDecrypt;
//# sourceMappingURL=crypto.js.map