"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLinked = exports.fetchJson = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

// Partically redundant with 3boxjs utils, but added to remove circular dependency entirely for now 
var HTTPError = function HTTPError(status, message) {
  var e = new Error(message);
  e.statusCode = status;
  return e;
};

var fetchJson = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(url, body) {
    var opts, r, res;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (body) {
              opts = {
                body: JSON.stringify(body),
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                }
              };
            }

            _context.next = 3;
            return window.fetch(url, opts);

          case 3:
            r = _context.sent;

            if (!r.ok) {
              _context.next = 11;
              break;
            }

            _context.next = 7;
            return r.json();

          case 7:
            res = _context.sent;
            return _context.abrupt("return", res);

          case 11:
            _context.t0 = HTTPError;
            _context.t1 = r.status;
            _context.next = 15;
            return r.json();

          case 15:
            _context.t2 = _context.sent.message;
            throw (0, _context.t0)(_context.t1, _context.t2);

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function fetchJson(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.fetchJson = fetchJson;

var isLinked = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(address) {
    var res;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return fetchJson("https://beta.3box.io/address-server/odbAddress/".concat(address));

          case 3:
            res = _context2.sent;
            return _context2.abrupt("return", Boolean(res.data.rootStoreAddress));

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](0);
            return _context2.abrupt("return", false);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 7]]);
  }));

  return function isLinked(_x3) {
    return _ref2.apply(this, arguments);
  };
}();

exports.isLinked = isLinked;