"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _threeIdProviderProxy = _interopRequireDefault(require("./threeIdProviderProxy.js"));

var _postmsgRpc = require("postmsg-rpc");

var _ethereumAuthProvider = _interopRequireDefault(require("./authProvider/ethereumAuthProvider.js"));

var _utils = require("identity-wallet/lib/utils");

var IDENTITY_WALLET_IFRAME_URL = 'https://connect.3box.io';
var HIDE_IFRAME_STYLE = 'position: fixed; width:0; height:0; border:0; border:none !important';
var DISPLAY_IFRAME_STYLE = 'border:none border:0; z-index: 500; position: fixed; max-width: 100%;';
var IFRAME_TOP = "top: 10px; right: 10px";
var IFRAME_BOTTOM = "bottom: 0px; left: 0px;";

var hide = function hide(iframe) {
  return function () {
    return iframe.style = HIDE_IFRAME_STYLE;
  };
};

var display = function display(iframe) {
  return function () {
    var mobile = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '245px';
    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '440px';
    return iframe.style = "".concat(DISPLAY_IFRAME_STYLE, " width: ").concat(width, "; height: ").concat(height, "; ").concat(mobile ? IFRAME_BOTTOM : IFRAME_TOP);
  };
}; // TODO maybe have some more ui options here, because these can change after iframe loads

/**
 *  ThreeIdConnect provides interface for loading and instantiating IDW iframe,
 *  and provides a 3ID provider interface to send requests to iframe. Acts like
 *  rpc client.
 */


var ThreeIdConnect = /*#__PURE__*/function () {
  /**
    *  Creates ThreeIdConnect. Create and loads iframe. Should be instantiated
    *  on page load.
    *
    * @param     {String}    iframeUrl   iframe url, defaults to 3id-connect iframe service
    */
  function ThreeIdConnect(iframeUrl) {
    var _this = this;

    (0, _classCallCheck2["default"])(this, ThreeIdConnect);

    if (typeof window === 'undefined' || typeof document === 'undefined') {
      throw new Error('ThreeIdConnect not supported in this enviroment');
    }

    this.iframe = document.createElement('iframe');
    this.iframe.src = iframeUrl || IDENTITY_WALLET_IFRAME_URL;
    this.iframe.style = HIDE_IFRAME_STYLE;
    this.iframe.allowTransparency = true;
    this.iframe.frameBorder = 0;
    this.iframeLoadedPromise = new Promise(function (resolve, reject) {
      _this.iframe.onload = function () {
        resolve();
      };
    });
    document.body.appendChild(this.iframe);
  } // Just passing ref to threeId and ipfs during migration


  (0, _createClass2["default"])(ThreeIdConnect, [{
    key: "connect",
    value: function () {
      var _connect = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(provider, ThreeId, ipfs) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // assumes eth provider during migration
                this.provider = provider;
                this.ThreeId = ThreeId;
                this.ipfs = ipfs; // after migration, can detect different provdier to create authProvider

                this.authProvider = new _ethereumAuthProvider["default"](provider);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connect(_x, _x2, _x3) {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
    /**
      *  Handlers to consumer message to hide or display iframe
      *
      * @private
      */

  }, {
    key: "_registerDisplayHandlers",
    value: function _registerDisplayHandlers() {
      (0, _postmsgRpc.expose)('display', display(this.iframe), {
        postMessage: this.postMessage
      });
      (0, _postmsgRpc.expose)('hide', hide(this.iframe), {
        postMessage: this.postMessage
      });
    }
    /**
      *  Handlers to consume messages for authProvider
      *
      * @private
      */

  }, {
    key: "_registerAuthHandlers",
    value: function _registerAuthHandlers() {
      (0, _postmsgRpc.expose)('authenticate', this.authenticate.bind(this), {
        postMessage: this.postMessage
      });
      (0, _postmsgRpc.expose)('migration', this.migration.bind(this), {
        postMessage: this.postMessage
      });
      (0, _postmsgRpc.expose)('createLink', this.createLink.bind(this), {
        postMessage: this.postMessage
      });
    }
    /**
      *  Returns ThreeId instance, used for migration of legacy 3boxjs accounts
      *
      * @private
      * @param     {String}    address     An ethereum address
      * @return    {ThreeId}
      */

  }, {
    key: "_getThreeId",
    value: function () {
      var _getThreeId2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(address) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (this._threeId) {
                  _context2.next = 4;
                  break;
                }

                _context2.next = 3;
                return this.ThreeId.getIdFromEthAddress(address, this.provider, this.ipfs, undefined, {});

              case 3:
                this._threeId = _context2.sent;

              case 4:
                return _context2.abrupt("return", this._threeId);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _getThreeId(_x4) {
        return _getThreeId2.apply(this, arguments);
      }

      return _getThreeId;
    }()
  }, {
    key: "authenticate",
    value: function () {
      var _authenticate = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(message, address) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.authProvider.authenticate(message, address));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function authenticate(_x5, _x6) {
        return _authenticate.apply(this, arguments);
      }

      return authenticate;
    }()
  }, {
    key: "migration",
    value: function () {
      var _migration = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(spaces, address) {
        var threeId;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._getThreeId(address);

              case 2:
                threeId = _context4.sent;
                _context4.next = 5;
                return threeId.authenticate(spaces);

              case 5:
                return _context4.abrupt("return", threeId.serializeState());

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function migration(_x7, _x8) {
        return _migration.apply(this, arguments);
      }

      return migration;
    }()
  }, {
    key: "createLink",
    value: function () {
      var _createLink = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(did, address) {
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", this.authProvider.createLink(did, address));

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function createLink(_x9, _x10) {
        return _createLink.apply(this, arguments);
      }

      return createLink;
    }()
    /**
      *  Returns a 3ID provider, which can send and receive 3ID messages from iframe
      *
      * @return    {ThreeIdProviderProxy}     A 3ID provider
      */

  }, {
    key: "get3idProvider",
    value: function () {
      var _get3idProvider = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.iframeLoadedPromise;

              case 2:
                this.postMessage = this.iframe.contentWindow.postMessage.bind(this.iframe.contentWindow);

                this._registerDisplayHandlers();

                this._registerAuthHandlers();

                return _context6.abrupt("return", new _threeIdProviderProxy["default"](this.postMessage));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function get3idProvider() {
        return _get3idProvider.apply(this, arguments);
      }

      return get3idProvider;
    }()
  }]);
  return ThreeIdConnect;
}();

var _default = ThreeIdConnect;
exports["default"] = _default;