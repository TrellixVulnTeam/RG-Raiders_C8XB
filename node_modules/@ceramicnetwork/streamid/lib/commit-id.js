"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _type, _cid, _commit;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommitID = void 0;
const cids_1 = __importDefault(require("cids"));
const multibase_1 = __importDefault(require("multibase"));
const stream_type_1 = require("./stream-type");
const varint_1 = __importDefault(require("varint"));
const concat_1 = __importDefault(require("uint8arrays/concat"));
const to_string_1 = __importDefault(require("uint8arrays/to-string"));
const typescript_memoize_1 = require("typescript-memoize");
const constants_1 = require("./constants");
const reading_bytes_1 = require("./reading-bytes");
const stream_id_1 = require("./stream-id");
function fromBytes(bytes) {
    const [streamCodec, streamCodecRemainder] = reading_bytes_1.readVarint(bytes);
    if (streamCodec !== constants_1.STREAMID_CODEC)
        throw new Error('fromBytes: invalid streamid, does not include streamid codec');
    const [type, streamtypeRemainder] = reading_bytes_1.readVarint(streamCodecRemainder);
    const [base, baseRemainder] = reading_bytes_1.readCid(streamtypeRemainder);
    if (baseRemainder.length === 0) {
        throw new Error(`No commit information provided`);
    }
    else if (baseRemainder.length === 1) {
        return new CommitID(type, base, baseRemainder[0]);
    }
    else {
        const [commit] = reading_bytes_1.readCid(baseRemainder);
        return new CommitID(type, base, commit);
    }
}
function parseCID(input) {
    try {
        return new cids_1.default(input);
    }
    catch (_a) {
        return undefined;
    }
}
function parseCommit(genesis, commit = null) {
    if (!commit)
        return null;
    const commitCID = parseCID(commit);
    if (commitCID) {
        if (genesis.equals(commitCID)) {
            return null;
        }
        else {
            return commitCID;
        }
    }
    else if (String(commit) === '0') {
        return null;
    }
    else {
        throw new Error('Cannot specify commit as a number except to request commit 0 (the genesis commit)');
    }
}
function fromString(input) {
    const protocolFree = input.replace('ceramic://', '').replace('/ceramic/', '');
    if (protocolFree.includes('commit')) {
        const commit = protocolFree.split('?')[1].split('=')[1];
        const base = protocolFree.split('?')[0];
        return stream_id_1.StreamID.fromString(base).atCommit(commit);
    }
    else {
        return fromBytes(multibase_1.default.decode(protocolFree));
    }
}
const TAG = Symbol.for('@ceramicnetwork/streamid/CommitID');
class CommitID {
    constructor(type, cid, commit = null) {
        this._tag = TAG;
        _type.set(this, void 0);
        _cid.set(this, void 0);
        _commit.set(this, void 0);
        if (!type && type !== 0)
            throw new Error('constructor: type required');
        if (!cid)
            throw new Error('constructor: cid required');
        __classPrivateFieldSet(this, _type, typeof type === 'string' ? stream_type_1.StreamType.codeByName(type) : type);
        __classPrivateFieldSet(this, _cid, typeof cid === 'string' ? new cids_1.default(cid) : cid);
        __classPrivateFieldSet(this, _commit, parseCommit(__classPrivateFieldGet(this, _cid), commit));
    }
    static isInstance(instance) {
        return typeof instance === 'object' && '_tag' in instance && instance._tag === TAG;
    }
    get baseID() {
        return new stream_id_1.StreamID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid));
    }
    get type() {
        return __classPrivateFieldGet(this, _type);
    }
    get typeName() {
        return stream_type_1.StreamType.nameByCode(__classPrivateFieldGet(this, _type));
    }
    get cid() {
        return __classPrivateFieldGet(this, _cid);
    }
    get commit() {
        return __classPrivateFieldGet(this, _commit) || __classPrivateFieldGet(this, _cid);
    }
    get bytes() {
        var _a;
        const codec = varint_1.default.encode(constants_1.STREAMID_CODEC);
        const type = varint_1.default.encode(this.type);
        const commitBytes = ((_a = __classPrivateFieldGet(this, _commit)) === null || _a === void 0 ? void 0 : _a.bytes) || new Uint8Array([0]);
        return concat_1.default([codec, type, this.cid.bytes, commitBytes]);
    }
    atCommit(commit) {
        return new CommitID(__classPrivateFieldGet(this, _type), __classPrivateFieldGet(this, _cid), commit);
    }
    equals(other) {
        return this.type === other.type && this.cid.equals(other.cid) && this.commit.equals(other.commit);
    }
    toString() {
        return to_string_1.default(multibase_1.default.encode(constants_1.DEFAULT_BASE, this.bytes));
    }
    toUrl() {
        return `ceramic://${this.toString()}`;
    }
    [(_type = new WeakMap(), _cid = new WeakMap(), _commit = new WeakMap(), Symbol.for('nodejs.util.inspect.custom'))]() {
        return `CommitID(${this.toString()})`;
    }
    [Symbol.toPrimitive]() {
        return this.toString();
    }
}
CommitID.fromBytes = fromBytes;
CommitID.fromString = fromString;
__decorate([
    typescript_memoize_1.Memoize(),
    __metadata("design:type", stream_id_1.StreamID),
    __metadata("design:paramtypes", [])
], CommitID.prototype, "baseID", null);
__decorate([
    typescript_memoize_1.Memoize(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], CommitID.prototype, "typeName", null);
__decorate([
    typescript_memoize_1.Memoize(),
    __metadata("design:type", cids_1.default),
    __metadata("design:paramtypes", [])
], CommitID.prototype, "commit", null);
__decorate([
    typescript_memoize_1.Memoize(),
    __metadata("design:type", Uint8Array),
    __metadata("design:paramtypes", [])
], CommitID.prototype, "bytes", null);
__decorate([
    typescript_memoize_1.Memoize(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], CommitID.prototype, "toString", null);
__decorate([
    typescript_memoize_1.Memoize(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], CommitID.prototype, "toUrl", null);
exports.CommitID = CommitID;
//# sourceMappingURL=commit-id.js.map