{"version":3,"file":"resolver.esm.js","sources":["../src/resolver.ts"],"sourcesContent":["// Copyright 2018 ConsenSys AG\n\n// Licensed under the Apache License, Version 2.0(the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n// http://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport interface DIDDocument {\n  '@context': 'https://w3id.org/did/v1'\n  id: string\n  publicKey: PublicKey[]\n  authentication?: Authentication[]\n  uportProfile?: any\n  service?: ServiceEndpoint[]\n}\n\nexport interface ServiceEndpoint {\n  id: string\n  type: string\n  serviceEndpoint: string\n  description?: string\n}\n\nexport interface PublicKey {\n  id: string\n  type: string\n  owner: string\n  ethereumAddress?: string\n  publicKeyBase64?: string\n  publicKeyBase58?: string\n  publicKeyHex?: string\n  publicKeyPem?: string\n}\n\nexport interface Authentication {\n  type: string\n  publicKey: string\n}\n\nexport interface ParsedDID {\n  did: string\n  method: string\n  id: string\n  path?: string\n  fragment?: string\n}\n\nexport interface DIDResolver {\n  (did: string, parsed: ParsedDID, didResolver: Resolver): Promise<null | DIDDocument>\n}\n\ninterface ResolverRegistry {\n  [index: string]: DIDResolver\n}\n\nexport function parse(did: string): ParsedDID {\n  if (did === '') throw new Error('Missing DID')\n  const sections = did.match(/^did:([a-zA-Z0-9_]+):([:[a-zA-Z0-9_.-]+)(\\/[^#]*)?(#.*)?$/)\n  if (sections) {\n    const parts: ParsedDID = { did: sections[0], method: sections[1], id: sections[2] }\n    if (sections[3]) parts.path = sections[3]\n    if (sections[4]) parts.fragment = sections[4].slice(1)\n    return parts\n  }\n  throw new Error(`Invalid DID ${did}`)\n}\n\nexport class Resolver {\n  private registry: ResolverRegistry\n  constructor(registry: ResolverRegistry = {}) {\n    this.registry = registry\n  }\n\n  resolve(did: string): Promise<DIDDocument | null> {\n    try {\n      const parsed = parse(did)\n      const resolver = this.registry[parsed.method]\n      if (resolver) {\n        return resolver(did, parsed, this)\n      }\n      return Promise.reject(new Error(`Unsupported DID method: '${parsed.method}'`));\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n}\n\n"],"names":["parse","did","Error","sections","match","parts","method","id","path","fragment","slice","Resolver","constructor","registry","resolve","parsed","resolver","this","Promise","reject","error"],"mappings":"SA8DgBA,EAAMC,MACR,KAARA,EAAY,MAAM,IAAIC,MAAM,mBAC1BC,EAAWF,EAAIG,MAAM,gEACvBD,EAAU,KACNE,EAAmB,CAAEJ,IAAKE,EAAS,GAAIG,OAAQH,EAAS,GAAII,GAAIJ,EAAS,WAC3EA,EAAS,KAAIE,EAAMG,KAAOL,EAAS,IACnCA,EAAS,KAAIE,EAAMI,SAAWN,EAAS,GAAGO,MAAM,IAC7CL,QAEH,IAAIH,qBAAqBD,OAGpBU,EAEXC,SAAYC,kBAA6B,SAClCA,SAAWA,GAGlBC,YAAAA,iBAAQb,WAEEc,EAASf,EAAMC,GACfe,EAAWC,KAAKJ,SAASE,EAAOT,eAClCU,EACKA,EAASf,EAAKc,EAAQE,MAExBC,QAAQC,OAAO,IAAIjB,kCAAkCa,eAC5D,MAAOK,UACAF,QAAQC,OAAOC"}