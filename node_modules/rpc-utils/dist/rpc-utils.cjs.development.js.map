{"version":3,"file":"rpc-utils.cjs.development.js","sources":["../src/error.ts","../src/client.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/server.ts"],"sourcesContent":["import { RPCErrorObject } from './types'\n\nexport enum ERROR_CODE {\n  PARSE_ERROR = -32700,\n  INVALID_REQUEST = -32600,\n  METHOD_NOT_FOUND = -32601,\n  INVALID_PARAMS = -32602,\n  INTERNAL_ERROR = -32603\n}\n\nexport const ERROR_MESSAGE: Record<string, string> = {\n  [ERROR_CODE.PARSE_ERROR]: 'Parse error',\n  [ERROR_CODE.INVALID_REQUEST]: 'Invalid request',\n  [ERROR_CODE.METHOD_NOT_FOUND]: 'Method not found',\n  [ERROR_CODE.INVALID_PARAMS]: 'Invalid params',\n  [ERROR_CODE.INTERNAL_ERROR]: 'Internal error'\n}\n\nexport function isServerError(code: number): boolean {\n  return -32000 >= code && code >= -32099\n}\n\nexport function getErrorMessage(code: number): string {\n  return (\n    ERROR_MESSAGE[code.toString()] ?? (isServerError(code) ? 'Server error' : 'Application error')\n  )\n}\n\nexport class RPCError<T = any> extends Error {\n  public static fromObject<D = any>(err: RPCErrorObject<D>): RPCError<D> {\n    return new RPCError<D>(err.code, err.message, err.data)\n  }\n\n  public code: number\n  public data: T | undefined\n  public message: string\n\n  public constructor(code: number, message?: string | undefined, data?: T | undefined) {\n    super()\n    Object.setPrototypeOf(this, RPCError.prototype)\n\n    this.code = code\n    this.data = data\n    this.message = message ?? getErrorMessage(code)\n  }\n\n  public toObject(): RPCErrorObject<T> {\n    return {\n      code: this.code,\n      data: this.data,\n      message: this.message\n    }\n  }\n}\n\nfunction createErrorFactory(code: ERROR_CODE): <T>(data?: T) => RPCError<T> {\n  const message = ERROR_MESSAGE[code]\n  return function createError<T = any>(data?: T): RPCError<T> {\n    return new RPCError<T>(code, message, data)\n  }\n}\n\nexport const createParseError = createErrorFactory(ERROR_CODE.PARSE_ERROR)\nexport const createInvalidRequest = createErrorFactory(ERROR_CODE.INVALID_REQUEST)\nexport const createMethodNotFound = createErrorFactory(ERROR_CODE.METHOD_NOT_FOUND)\nexport const createInvalidParams = createErrorFactory(ERROR_CODE.INVALID_PARAMS)\nexport const createInternalError = createErrorFactory(ERROR_CODE.INTERNAL_ERROR)\n","import { nanoid } from 'nanoid'\n\nimport { RPCError } from './error'\nimport { RPCConnection } from './types'\n\nexport class RPCClient {\n  public connection: RPCConnection\n\n  constructor(connection: RPCConnection) {\n    this.connection = connection\n  }\n\n  public createID(): string {\n    return nanoid()\n  }\n\n  public async request<P = any, R = any>(method: string, params?: P): Promise<R> {\n    const res = await this.connection.send<P, R>({\n      jsonrpc: '2.0',\n      id: this.createID(),\n      method,\n      params\n    })\n    if (res == null) {\n      throw new Error('Missing response')\n    }\n    if (res.error != null) {\n      throw RPCError.fromObject(res.error)\n    }\n    return res.result as R\n  }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { ERROR_CODE, RPCError, createParseError, getErrorMessage } from './error'\nimport { RPCRequest, RPCResponse } from './types'\n\nexport type ErrorHandler<C = any> = <P = any>(ctx: C, req: RPCRequest<P>, error: Error) => void\n\nexport type MethodHandler<C = any, P = any, R = any> = (ctx: C, params: P) => R | Promise<R>\n\nexport type NotificationHandler<C = any> = <P = any>(ctx: C, req: RPCRequest<P>) => void\n\nexport type HandlerMethods<C = any> = Record<string, MethodHandler<C>>\n\nexport interface HandlerOptions<C = any> {\n  onHandlerError?: ErrorHandler<C>\n  onInvalidMessage?: NotificationHandler<C>\n  onNotification?: NotificationHandler<C>\n}\n\nexport type RequestHandler<C = any> = <P = any, R = any, E = any>(\n  ctx: C,\n  msg: RPCRequest<P>\n) => Promise<RPCResponse<R, E> | null>\n\nexport function parseJSON<T = any>(input: string): T {\n  try {\n    return JSON.parse(input)\n  } catch (err) {\n    throw createParseError()\n  }\n}\n\nexport function createErrorResponse<R, E>(id: number | string, code: number): RPCResponse<R, E> {\n  return {\n    jsonrpc: '2.0',\n    id,\n    error: { code, message: getErrorMessage(code) }\n  }\n}\n\nfunction fallbackOnHandlerError<C = any, P = any>(_ctx: C, msg: RPCRequest<P>, error: Error): void {\n  // eslint-disable-next-line no-console\n  console.warn('Unhandled handler error', msg, error)\n}\n\nfunction fallbackOnInvalidMessage<C = any, P = any>(_ctx: C, msg: RPCRequest<P>): void {\n  // eslint-disable-next-line no-console\n  console.warn('Unhandled invalid message', msg)\n}\n\nfunction fallbackOnNotification<C = any, P = any>(_ctx: C, msg: RPCRequest<P>): void {\n  // eslint-disable-next-line no-console\n  console.warn('Unhandled notification', msg)\n}\n\nexport function createHandler<C = any>(\n  methods: HandlerMethods<C>,\n  options: HandlerOptions<C> = {}\n): RequestHandler<C> {\n  const onHandlerError = options.onHandlerError ?? fallbackOnHandlerError\n  const onInvalidMessage = options.onInvalidMessage ?? fallbackOnInvalidMessage\n  const onNotification = options.onNotification ?? fallbackOnNotification\n\n  return async function handleRequest<P = any, R = any, E = any>(\n    ctx: C,\n    msg: RPCRequest<P>\n  ): Promise<RPCResponse<R, E> | null> {\n    const id = msg.id\n\n    if (msg.jsonrpc !== '2.0' || msg.method == null) {\n      if (id == null) {\n        onInvalidMessage(ctx, msg)\n        return null\n      }\n      return createErrorResponse(id, ERROR_CODE.INVALID_REQUEST)\n    }\n\n    if (id == null) {\n      onNotification(ctx, msg)\n      return null\n    }\n\n    const handler = methods[msg.method]\n    if (handler == null) {\n      return createErrorResponse(id, ERROR_CODE.METHOD_NOT_FOUND)\n    }\n\n    try {\n      const handled = handler(ctx, msg.params ?? {})\n      const result = typeof handled.then === 'function' ? await handled : handled\n      return { jsonrpc: '2.0', id, result }\n    } catch (err) {\n      let error\n      if (err instanceof RPCError) {\n        error = err.toObject()\n      } else {\n        onHandlerError(ctx, msg, err)\n        const code = err.code ?? -32000 // Server error\n        error = { code, message: err.message || getErrorMessage(code) }\n      }\n      return { jsonrpc: '2.0', id, error }\n    }\n  }\n}\n"],"names":["ERROR_CODE","ERROR_MESSAGE","PARSE_ERROR","INVALID_REQUEST","METHOD_NOT_FOUND","INVALID_PARAMS","INTERNAL_ERROR","isServerError","code","getErrorMessage","toString","RPCError","message","data","Object","setPrototypeOf","prototype","fromObject","err","toObject","Error","createErrorFactory","createError","createParseError","createInvalidRequest","createMethodNotFound","createInvalidParams","createInternalError","RPCClient","connection","createID","nanoid","request","method","params","send","jsonrpc","id","res","error","result","parseJSON","input","JSON","parse","createErrorResponse","fallbackOnHandlerError","_ctx","msg","console","warn","fallbackOnInvalidMessage","fallbackOnNotification","createHandler","methods","options","onHandlerError","onInvalidMessage","onNotification","handleRequest","ctx","handler","handled","then"],"mappings":"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"}