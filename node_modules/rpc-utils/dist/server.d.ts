import { RPCRequest, RPCResponse } from './types';
export declare type ErrorHandler<C = any> = <P = any>(ctx: C, req: RPCRequest<P>, error: Error) => void;
export declare type MethodHandler<C = any, P = any, R = any> = (ctx: C, params: P) => R | Promise<R>;
export declare type NotificationHandler<C = any> = <P = any>(ctx: C, req: RPCRequest<P>) => void;
export declare type HandlerMethods<C = any> = Record<string, MethodHandler<C>>;
export interface HandlerOptions<C = any> {
    onHandlerError?: ErrorHandler<C>;
    onInvalidMessage?: NotificationHandler<C>;
    onNotification?: NotificationHandler<C>;
}
export declare type RequestHandler<C = any> = <P = any, R = any, E = any>(ctx: C, msg: RPCRequest<P>) => Promise<RPCResponse<R, E> | null>;
export declare function parseJSON<T = any>(input: string): T;
export declare function createErrorResponse<R, E>(id: number | string, code: number): RPCResponse<R, E>;
export declare function createHandler<C = any>(methods: HandlerMethods<C>, options?: HandlerOptions<C>): RequestHandler<C>;
