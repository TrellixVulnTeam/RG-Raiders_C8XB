{"ast":null,"code":"import _defineProperty from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useGetQuestGuildsQuery, useGetQuestsQuery } from 'graphql/autogen/types';\nimport { useCallback, useState } from 'react';\nimport { defaultQueryVariables } from '../../graphql/getQuests'; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport var useQuestFilter = function useQuestFilter() {\n  _s();\n\n  var _resGuilds$data;\n\n  var _useState = useState(defaultQueryVariables),\n      queryVariables = _useState[0],\n      setQueryVariables = _useState[1];\n\n  var _useGetQuestsQuery = useGetQuestsQuery({\n    variables: queryVariables\n  }),\n      _useGetQuestsQuery2 = _slicedToArray(_useGetQuestsQuery, 1),\n      resQuests = _useGetQuestsQuery2[0];\n\n  var _useGetQuestGuildsQue = useGetQuestGuildsQuery(),\n      _useGetQuestGuildsQue2 = _slicedToArray(_useGetQuestGuildsQue, 1),\n      resGuilds = _useGetQuestGuildsQue2[0];\n\n  var fetching = resQuests.fetching,\n      data = resQuests.data,\n      error = resQuests.error;\n  var quests = (data === null || data === void 0 ? void 0 : data.quest) || null;\n  var guilds = (resGuilds === null || resGuilds === void 0 ? void 0 : (_resGuilds$data = resGuilds.data) === null || _resGuilds$data === void 0 ? void 0 : _resGuilds$data.quest_aggregate.nodes.map(function (q) {\n    return {\n      id: q.guild_id,\n      name: q.guild.name\n    };\n  })) || [];\n  var aggregates = {\n    guilds: guilds\n  };\n  var setQueryVariable = useCallback( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function (key, value) {\n    setQueryVariables(function (oldQueryVariables) {\n      return _objectSpread(_objectSpread({}, oldQueryVariables), {}, _defineProperty({}, key, value !== '' ? value : null));\n    });\n  }, []);\n  return {\n    quests: quests,\n    aggregates: aggregates,\n    fetching: fetching,\n    error: error,\n    queryVariables: queryVariables,\n    setQueryVariable: setQueryVariable\n  };\n};\n\n_s(useQuestFilter, \"p+XuDVmL0n7pi5VQcoynhU44bhE=\", false, function () {\n  return [useGetQuestsQuery, useGetQuestGuildsQuery];\n});","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/lib/hooks/quests.ts"],"names":["useGetQuestGuildsQuery","useGetQuestsQuery","useCallback","useState","defaultQueryVariables","useQuestFilter","queryVariables","setQueryVariables","variables","resQuests","resGuilds","fetching","data","error","quests","quest","guilds","quest_aggregate","nodes","map","q","id","guild_id","name","guild","aggregates","setQueryVariable","key","value","oldQueryVariables"],"mappings":";;;;;;;;;AAAA,SAGEA,sBAHF,EAIEC,iBAJF,QAKO,uBALP;AAMA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,qBAAT,QAAsC,yBAAtC,C,CAEA;;AAgBA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAmB;AAAA;;AAAA;;AAAA,kBACHF,QAAQ,CAClDC,qBADkD,CADL;AAAA,MACxCE,cADwC;AAAA,MACxBC,iBADwB;;AAAA,2BAI3BN,iBAAiB,CAAC;AACpCO,IAAAA,SAAS,EAAEF;AADyB,GAAD,CAJU;AAAA;AAAA,MAIxCG,SAJwC;;AAAA,8BAO3BT,sBAAsB,EAPK;AAAA;AAAA,MAOxCU,SAPwC;;AAAA,MAQvCC,QARuC,GAQbF,SARa,CAQvCE,QARuC;AAAA,MAQ7BC,IAR6B,GAQbH,SARa,CAQ7BG,IAR6B;AAAA,MAQvBC,KARuB,GAQbJ,SARa,CAQvBI,KARuB;AAU/C,MAAMC,MAAM,GAAG,CAAAF,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEG,KAAN,KAAe,IAA9B;AACA,MAAMC,MAAM,GACV,CAAAN,SAAS,SAAT,IAAAA,SAAS,WAAT,+BAAAA,SAAS,CAAEE,IAAX,oEAAiBK,eAAjB,CAAiCC,KAAjC,CAAuCC,GAAvC,CAA2C,UAACC,CAAD;AAAA,WAAQ;AACjDC,MAAAA,EAAE,EAAED,CAAC,CAACE,QAD2C;AAEjDC,MAAAA,IAAI,EAAEH,CAAC,CAACI,KAAF,CAAQD;AAFmC,KAAR;AAAA,GAA3C,MAGO,EAJT;AAMA,MAAME,UAAU,GAAG;AACjBT,IAAAA,MAAM,EAANA;AADiB,GAAnB;AAIA,MAAMU,gBAAqC,GAAGxB,WAAW,EACvD;AACA,YAACyB,GAAD,EAAcC,KAAd,EAA6B;AAC3BrB,IAAAA,iBAAiB,CAAC,UAACsB,iBAAD;AAAA,6CACbA,iBADa,2BAEfF,GAFe,EAETC,KAAK,KAAK,EAAV,GAAeA,KAAf,GAAuB,IAFd;AAAA,KAAD,CAAjB;AAID,GAPsD,EAQvD,EARuD,CAAzD;AAWA,SAAO;AACLd,IAAAA,MAAM,EAANA,MADK;AAELW,IAAAA,UAAU,EAAVA,UAFK;AAGLd,IAAAA,QAAQ,EAARA,QAHK;AAILE,IAAAA,KAAK,EAALA,KAJK;AAKLP,IAAAA,cAAc,EAAdA,cALK;AAMLoB,IAAAA,gBAAgB,EAAhBA;AANK,GAAP;AAQD,CAxCM;;GAAMrB,c;UAISJ,iB,EAGAD,sB","sourcesContent":["import {\n  GetQuestsQueryVariables,\n  QuestFragmentFragment,\n  useGetQuestGuildsQuery,\n  useGetQuestsQuery,\n} from 'graphql/autogen/types';\nimport { useCallback, useState } from 'react';\n\nimport { defaultQueryVariables } from '../../graphql/getQuests';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type QueryVariableSetter = (key: string, value: any) => void;\n\ninterface QuestFilter {\n  quests: QuestFragmentFragment[] | null;\n  fetching: boolean;\n  queryVariables: GetQuestsQueryVariables;\n  setQueryVariable: QueryVariableSetter;\n  aggregates: QuestAggregates;\n  error?: Error;\n}\n\nexport interface QuestAggregates {\n  guilds: { id: string; name: string }[];\n}\n\nexport const useQuestFilter = (): QuestFilter => {\n  const [queryVariables, setQueryVariables] = useState<GetQuestsQueryVariables>(\n    defaultQueryVariables,\n  );\n  const [resQuests] = useGetQuestsQuery({\n    variables: queryVariables,\n  });\n  const [resGuilds] = useGetQuestGuildsQuery();\n  const { fetching, data, error } = resQuests;\n\n  const quests = data?.quest || null;\n  const guilds =\n    resGuilds?.data?.quest_aggregate.nodes.map((q) => ({\n      id: q.guild_id,\n      name: q.guild.name,\n    })) || [];\n\n  const aggregates = {\n    guilds,\n  };\n\n  const setQueryVariable: QueryVariableSetter = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (key: string, value: any) => {\n      setQueryVariables((oldQueryVariables) => ({\n        ...oldQueryVariables,\n        [key]: value !== '' ? value : null,\n      }));\n    },\n    [],\n  );\n\n  return {\n    quests,\n    aggregates,\n    fetching,\n    error,\n    queryVariables,\n    setQueryVariable,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}