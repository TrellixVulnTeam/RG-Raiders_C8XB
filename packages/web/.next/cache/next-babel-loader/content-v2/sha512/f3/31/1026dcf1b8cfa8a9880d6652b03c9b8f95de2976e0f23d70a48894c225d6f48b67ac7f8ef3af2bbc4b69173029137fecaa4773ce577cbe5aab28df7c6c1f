{"ast":null,"code":"import gql from 'fake-tag';\nimport { GetQuestIdsDocument, GetQuestsDocument, Order_By, QuestStatus_Enum } from './autogen/types';\nimport { client as defaultClient } from './client';\nimport { QuestFragment } from './fragments'; // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\ngql`\n  query GetQuestIds($limit: Int) {\n    quest(limit: $limit, order_by: { created_at: desc }) {\n      id\n    }\n  }\n`; // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\ngql`\n  query GetQuests(\n    $limit: Int\n    $status: QuestStatus_enum\n    $guild_id: uuid\n    $order: order_by\n    $created_by_player_id: uuid\n  ) {\n    quest(\n      limit: $limit\n      order_by: { created_at: $order }\n      where: {\n        status: { _eq: $status }\n        guild_id: { _eq: $guild_id }\n        created_by_player_id: { _eq: $created_by_player_id }\n      }\n    ) {\n      ...QuestFragment\n    }\n  }\n\n  ${QuestFragment}\n`; // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\ngql`\n  query GetQuestGuilds {\n    quest_aggregate(distinct_on: guild_id) {\n      nodes {\n        guild_id\n        guild {\n          name\n        }\n      }\n    }\n  }\n`;\nexport const defaultQueryVariables = {\n  limit: 10,\n  status: QuestStatus_Enum.Open,\n  guild_id: undefined,\n  order: Order_By.Desc,\n  created_by_player_id: undefined\n};\nexport const getQuestIds = async (limit = 50, client = defaultClient) => {\n  const {\n    data\n  } = await client.query(GetQuestIdsDocument, {\n    limit\n  }).toPromise();\n  return (data === null || data === void 0 ? void 0 : data.quest.map(q => q.id)) || [];\n};\nexport const getQuests = async (queryVariables = defaultQueryVariables, client = defaultClient) => {\n  const {\n    data,\n    error\n  } = await client.query(GetQuestsDocument, queryVariables).toPromise();\n\n  if (!data) {\n    if (error) {\n      throw error;\n    }\n\n    return [];\n  }\n\n  return data.quest;\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/graphql/getQuests.ts"],"names":["gql","GetQuestIdsDocument","GetQuestsDocument","Order_By","QuestStatus_Enum","client","defaultClient","QuestFragment","defaultQueryVariables","limit","status","Open","guild_id","undefined","order","Desc","created_by_player_id","getQuestIds","data","query","toPromise","quest","map","q","id","getQuests","queryVariables","error"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,UAAhB;AAGA,SACEC,mBADF,EAIEC,iBAJF,EAOEC,QAPF,EAQEC,gBARF,QASO,iBATP;AAUA,SAASC,MAAM,IAAIC,aAAnB,QAAwC,UAAxC;AACA,SAASC,aAAT,QAA8B,aAA9B,C,CAEA;;AACAP,GAAI;AACJ;AACA;AACA;AACA;AACA;AACA,CANA,C,CAQA;;AACAA,GAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIO,aAAc;AAClB,CAtBA,C,CAwBA;;AACAP,GAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;AAaA,OAAO,MAAMQ,qBAA8C,GAAG;AAC5DC,EAAAA,KAAK,EAAE,EADqD;AAE5DC,EAAAA,MAAM,EAAEN,gBAAgB,CAACO,IAFmC;AAG5DC,EAAAA,QAAQ,EAAEC,SAHkD;AAI5DC,EAAAA,KAAK,EAAEX,QAAQ,CAACY,IAJ4C;AAK5DC,EAAAA,oBAAoB,EAAEH;AALsC,CAAvD;AAQP,OAAO,MAAMI,WAAW,GAAG,OACzBR,KAAK,GAAG,EADiB,EAEzBJ,MAAc,GAAGC,aAFQ,KAGtB;AACH,QAAM;AAAEY,IAAAA;AAAF,MAAW,MAAMb,MAAM,CAC1Bc,KADoB,CAC+BlB,mBAD/B,EACoD;AACvEQ,IAAAA;AADuE,GADpD,EAIpBW,SAJoB,EAAvB;AAMA,SAAO,CAAAF,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEG,KAAN,CAAYC,GAAZ,CAAiBC,CAAD,IAAOA,CAAC,CAACC,EAAzB,MAAgC,EAAvC;AACD,CAXM;AAaP,OAAO,MAAMC,SAAS,GAAG,OACvBC,cAAc,GAAGlB,qBADM,EAEvBH,MAAc,GAAGC,aAFM,KAGpB;AACH,QAAM;AAAEY,IAAAA,IAAF;AAAQS,IAAAA;AAAR,MAAkB,MAAMtB,MAAM,CACjCc,KAD2B,CAE1BjB,iBAF0B,EAG1BwB,cAH0B,EAK3BN,SAL2B,EAA9B;;AAOA,MAAI,CAACF,IAAL,EAAW;AACT,QAAIS,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AAED,WAAO,EAAP;AACD;;AAED,SAAOT,IAAI,CAACG,KAAZ;AACD,CApBM","sourcesContent":["import gql from 'fake-tag';\nimport { Client } from 'urql';\n\nimport {\n  GetQuestIdsDocument,\n  GetQuestIdsQuery,\n  GetQuestIdsQueryVariables,\n  GetQuestsDocument,\n  GetQuestsQuery,\n  GetQuestsQueryVariables,\n  Order_By,\n  QuestStatus_Enum,\n} from './autogen/types';\nimport { client as defaultClient } from './client';\nimport { QuestFragment } from './fragments';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-expressions\ngql`\n  query GetQuestIds($limit: Int) {\n    quest(limit: $limit, order_by: { created_at: desc }) {\n      id\n    }\n  }\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-expressions\ngql`\n  query GetQuests(\n    $limit: Int\n    $status: QuestStatus_enum\n    $guild_id: uuid\n    $order: order_by\n    $created_by_player_id: uuid\n  ) {\n    quest(\n      limit: $limit\n      order_by: { created_at: $order }\n      where: {\n        status: { _eq: $status }\n        guild_id: { _eq: $guild_id }\n        created_by_player_id: { _eq: $created_by_player_id }\n      }\n    ) {\n      ...QuestFragment\n    }\n  }\n\n  ${QuestFragment}\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-expressions\ngql`\n  query GetQuestGuilds {\n    quest_aggregate(distinct_on: guild_id) {\n      nodes {\n        guild_id\n        guild {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const defaultQueryVariables: GetQuestsQueryVariables = {\n  limit: 10,\n  status: QuestStatus_Enum.Open,\n  guild_id: undefined,\n  order: Order_By.Desc,\n  created_by_player_id: undefined,\n};\n\nexport const getQuestIds = async (\n  limit = 50,\n  client: Client = defaultClient,\n) => {\n  const { data } = await client\n    .query<GetQuestIdsQuery, GetQuestIdsQueryVariables>(GetQuestIdsDocument, {\n      limit,\n    })\n    .toPromise();\n\n  return data?.quest.map((q) => q.id) || [];\n};\n\nexport const getQuests = async (\n  queryVariables = defaultQueryVariables,\n  client: Client = defaultClient,\n) => {\n  const { data, error } = await client\n    .query<GetQuestsQuery, GetQuestsQueryVariables>(\n      GetQuestsDocument,\n      queryVariables,\n    )\n    .toPromise();\n\n  if (!data) {\n    if (error) {\n      throw error;\n    }\n\n    return [];\n  }\n\n  return data.quest;\n};\n"]},"metadata":{},"sourceType":"module"}