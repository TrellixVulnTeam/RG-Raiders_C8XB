{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query GetAspects {\\n    ColorAspect {\\n      mask\\n      name\\n      description\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport AmbitionAltImg from 'assets/colors/Ambition.svg';\nimport BalanceAltImg from 'assets/colors/Balance.svg';\nimport ChaosAltImg from 'assets/colors/Chaos.svg';\nimport JusticeAltImg from 'assets/colors/Justice.svg';\nimport WisdomAltImg from 'assets/colors/Wisdom.svg';\nimport gql from 'fake-tag';\nimport { isPow2 } from 'utils/mathHelper';\nimport { client } from './client';\nvar AspectsQuery = gql(_templateObject());\nexport var images = {\n  16: JusticeAltImg,\n  8: WisdomAltImg,\n  4: AmbitionAltImg,\n  2: ChaosAltImg,\n  1: BalanceAltImg\n};\nexport var colors = {\n  16: {\n    start: '#DCA8A9',\n    end: '#ffffff'\n  },\n  8: {\n    start: '#04468B',\n    end: '#09B9F2'\n  },\n  4: {\n    start: '#020121',\n    end: '#2F3E57'\n  },\n  2: {\n    start: '#94136E',\n    end: '#F15236'\n  },\n  1: {\n    start: '#0E9651',\n    end: '#9FD638'\n  }\n};\nexport var getPersonalityInfo = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _yield$client$query$t, data, error, parts, types;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.query(AspectsQuery).toPromise();\n\n          case 2:\n            _yield$client$query$t = _context.sent;\n            data = _yield$client$query$t.data;\n            error = _yield$client$query$t.error;\n\n            if (!error) {\n              _context.next = 7;\n              break;\n            }\n\n            throw error;\n\n          case 7:\n            if (data) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error(\"data isn't set\");\n\n          case 9:\n            parts = [];\n            types = {};\n            data.ColorAspect.forEach(function (aspect) {\n              var option = {\n                name: aspect.name,\n                description: aspect.description,\n                mask: aspect.mask\n              };\n              types[aspect.mask] = option; // pure colors are powers of 2 (only 1 bit set)\n\n              if (isPow2(aspect.mask)) {\n                parts.push(option);\n              }\n            });\n            return _context.abrupt(\"return\", {\n              parts: parts,\n              types: types\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getPersonalityInfo() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/graphql/getPersonalityInfo.ts"],"names":["AmbitionAltImg","BalanceAltImg","ChaosAltImg","JusticeAltImg","WisdomAltImg","gql","isPow2","client","AspectsQuery","images","colors","start","end","getPersonalityInfo","query","toPromise","data","error","Error","parts","types","ColorAspect","forEach","aspect","option","name","description","mask","push"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,cAAP,MAA2B,4BAA3B;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AAGA,SAASC,MAAT,QAAuB,UAAvB;AAGA,IAAMC,YAAY,GAAGH,GAAH,mBAAlB;AAeA,OAAO,IAAMI,MAEZ,GAAG;AACF,MAASN,aADP;AAEF,KAASC,YAFP;AAGF,KAASJ,cAHP;AAIF,KAASE,WAJP;AAKF,KAASD;AALP,CAFG;AAUP,OAAO,IAAMS,MAEZ,GAAG;AACF,MAAS;AAAEC,IAAAA,KAAK,EAAE,SAAT;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GADP;AAEF,KAAS;AAAED,IAAAA,KAAK,EAAE,SAAT;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GAFP;AAGF,KAAS;AAAED,IAAAA,KAAK,EAAE,SAAT;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GAHP;AAIF,KAAS;AAAED,IAAAA,KAAK,EAAE,SAAT;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GAJP;AAKF,KAAS;AAAED,IAAAA,KAAK,EAAE,SAAT;AAAoBC,IAAAA,GAAG,EAAE;AAAzB;AALP,CAFG;AAUP,OAAO,IAAMC,kBAAkB;AAAA,sEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIFN,MAAM,CAACO,KAAP,CAAaN,YAAb,EAA2BO,SAA3B,EAJE;;AAAA;AAAA;AAIxBC,YAAAA,IAJwB,yBAIxBA,IAJwB;AAIlBC,YAAAA,KAJkB,yBAIlBA,KAJkB;;AAAA,iBAM5BA,KAN4B;AAAA;AAAA;AAAA;;AAAA,kBAMfA,KANe;;AAAA;AAAA,gBAO3BD,IAP2B;AAAA;AAAA;AAAA;;AAAA,kBAOf,IAAIE,KAAJ,CAAU,gBAAV,CAPe;;AAAA;AAS1BC,YAAAA,KAT0B,GASQ,EATR;AAU1BC,YAAAA,KAV0B,GAUkB,EAVlB;AAWhCJ,YAAAA,IAAI,CAACK,WAAL,CAAiBC,OAAjB,CAAyB,UAACC,MAAD,EAAyB;AAChD,kBAAMC,MAAM,GAAG;AACbC,gBAAAA,IAAI,EAAEF,MAAM,CAACE,IADA;AAEbC,gBAAAA,WAAW,EAAEH,MAAM,CAACG,WAFP;AAGbC,gBAAAA,IAAI,EAAEJ,MAAM,CAACI;AAHA,eAAf;AAKAP,cAAAA,KAAK,CAACG,MAAM,CAACI,IAAR,CAAL,GAAqBH,MAArB,CANgD,CAQhD;;AACA,kBAAIlB,MAAM,CAACiB,MAAM,CAACI,IAAR,CAAV,EAAyB;AACvBR,gBAAAA,KAAK,CAACS,IAAN,CAAWJ,MAAX;AACD;AACF,aAZD;AAXgC,6CAyBzB;AAAEL,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,KAAK,EAALA;AAAT,aAzByB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBP,kBAAkB;AAAA;AAAA;AAAA,GAAxB","sourcesContent":["import AmbitionAltImg from 'assets/colors/Ambition.svg';\nimport BalanceAltImg from 'assets/colors/Balance.svg';\nimport ChaosAltImg from 'assets/colors/Chaos.svg';\nimport JusticeAltImg from 'assets/colors/Justice.svg';\nimport WisdomAltImg from 'assets/colors/Wisdom.svg';\nimport gql from 'fake-tag';\nimport { isPow2 } from 'utils/mathHelper';\n\nimport { ColorAspect } from './autogen/types';\nimport { client } from './client';\nimport { PersonalityOption } from './types';\n\nconst AspectsQuery = gql`\n  query GetAspects {\n    ColorAspect {\n      mask\n      name\n      description\n    }\n  }\n`;\n\nexport type ColorStops = {\n  start: string;\n  end: string;\n};\n\nexport const images: {\n  [x: number]: string;\n} = {\n  0b10000: JusticeAltImg,\n  0b01000: WisdomAltImg,\n  0b00100: AmbitionAltImg,\n  0b00010: ChaosAltImg,\n  0b00001: BalanceAltImg,\n};\n\nexport const colors: {\n  [x: number]: ColorStops;\n} = {\n  0b10000: { start: '#DCA8A9', end: '#ffffff' },\n  0b01000: { start: '#04468B', end: '#09B9F2' },\n  0b00100: { start: '#020121', end: '#2F3E57' },\n  0b00010: { start: '#94136E', end: '#F15236' },\n  0b00001: { start: '#0E9651', end: '#9FD638' },\n};\n\nexport const getPersonalityInfo = async (): Promise<{\n  parts: Array<PersonalityOption>;\n  types: { [any: string]: PersonalityOption };\n}> => {\n  const { data, error } = await client.query(AspectsQuery).toPromise();\n\n  if (error) throw error;\n  if (!data) throw new Error(\"data isn't set\");\n\n  const parts: Array<PersonalityOption> = [];\n  const types: { [x: number]: PersonalityOption } = {};\n  data.ColorAspect.forEach((aspect: ColorAspect) => {\n    const option = {\n      name: aspect.name,\n      description: aspect.description,\n      mask: aspect.mask,\n    };\n    types[aspect.mask] = option;\n\n    // pure colors are powers of 2 (only 1 bit set)\n    if (isPow2(aspect.mask)) {\n      parts.push(option);\n    }\n  });\n\n  return { parts, types };\n};\n"]},"metadata":{},"sourceType":"module"}