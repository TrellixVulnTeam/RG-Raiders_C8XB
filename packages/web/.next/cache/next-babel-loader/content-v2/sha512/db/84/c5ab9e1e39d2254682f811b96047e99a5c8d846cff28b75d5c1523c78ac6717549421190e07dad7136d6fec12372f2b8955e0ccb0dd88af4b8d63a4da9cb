{"ast":null,"code":"import copyToClipboard from 'copy-to-clipboard';\nimport { useCallback, useEffect, useState } from 'react';\nconst DEFAULT_DELAY = 3000;\nexport const useCopyToClipboard = (delay = DEFAULT_DELAY) => {\n  const {\n    0: copied,\n    1: setCopied\n  } = useState(false);\n  useEffect(() => {\n    if (!copied) return () => undefined;\n    const id = setTimeout(() => {\n      setCopied(false);\n    }, delay);\n    return () => {\n      clearTimeout(id);\n    };\n  }, [delay, copied]);\n  const handleCopy = useCallback(text => {\n    setCopied(true);\n    copyToClipboard(text);\n  }, []);\n  return [copied, handleCopy];\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/lib/hooks/useCopyToClipboard.ts"],"names":["copyToClipboard","useCallback","useEffect","useState","DEFAULT_DELAY","useCopyToClipboard","delay","copied","setCopied","undefined","id","setTimeout","clearTimeout","handleCopy","text"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,MAAMC,aAAa,GAAG,IAAtB;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAChCC,KAAK,GAAGF,aADwB,KAEM;AACtC,QAAM;AAAA,OAACG,MAAD;AAAA,OAASC;AAAT,MAAsBL,QAAQ,CAAC,KAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACK,MAAL,EAAa,OAAO,MAAME,SAAb;AAEb,UAAMC,EAAE,GAAGC,UAAU,CAAC,MAAM;AAC1BH,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD,KAFoB,EAElBF,KAFkB,CAArB;AAIA,WAAO,MAAM;AACXM,MAAAA,YAAY,CAACF,EAAD,CAAZ;AACD,KAFD;AAGD,GAVQ,EAUN,CAACJ,KAAD,EAAQC,MAAR,CAVM,CAAT;AAYA,QAAMM,UAAU,GAAGZ,WAAW,CAAEa,IAAD,IAAkB;AAC/CN,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAR,IAAAA,eAAe,CAACc,IAAD,CAAf;AACD,GAH6B,EAG3B,EAH2B,CAA9B;AAKA,SAAO,CAACP,MAAD,EAASM,UAAT,CAAP;AACD,CAvBM","sourcesContent":["import copyToClipboard from 'copy-to-clipboard';\nimport { useCallback, useEffect, useState } from 'react';\n\nconst DEFAULT_DELAY = 3000;\n\nexport const useCopyToClipboard = (\n  delay = DEFAULT_DELAY,\n): [boolean, (text: string) => void] => {\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (!copied) return () => undefined;\n\n    const id = setTimeout(() => {\n      setCopied(false);\n    }, delay);\n\n    return () => {\n      clearTimeout(id);\n    };\n  }, [delay, copied]);\n\n  const handleCopy = useCallback((text: string) => {\n    setCopied(true);\n    copyToClipboard(text);\n  }, []);\n\n  return [copied, handleCopy];\n};\n"]},"metadata":{},"sourceType":"module"}