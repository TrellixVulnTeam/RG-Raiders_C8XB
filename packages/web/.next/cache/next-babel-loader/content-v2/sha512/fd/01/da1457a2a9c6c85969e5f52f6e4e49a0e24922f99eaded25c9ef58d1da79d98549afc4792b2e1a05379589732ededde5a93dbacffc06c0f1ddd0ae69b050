{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  query GetPlayerFilters {\\n    skill_aggregate(distinct_on: category) {\\n      nodes {\\n        name: category\\n      }\\n    }\\n    skill(\\n      order_by: { Player_Skills_aggregate: { count: desc }, category: asc }\\n    ) {\\n      ...PlayerSkillFragment\\n    }\\n    player_type(distinct_on: id) {\\n      value: id\\n      label: title\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query GetPlayerUsernames($limit: Int) {\\n    player(order_by: { total_xp: desc }, limit: $limit) {\\n      username\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query GetPlayers(\\n    $offset: Int\\n    $limit: Int\\n    $skillIds: [uuid!]\\n    $playerTypeIds: [Int!]\\n    $availability: Int\\n    $timezones: [String!]\\n    $search: String\\n  ) {\\n    player(\\n      order_by: { total_xp: desc }\\n      offset: $offset\\n      limit: $limit\\n      where: {\\n        availability_hours: { _gte: $availability }\\n        timezone: { _in: $timezones }\\n        playerType: { id: { _in: $playerTypeIds } }\\n        Player_Skills: { Skill: { id: { _in: $skillIds } } }\\n        _or: [\\n          { username: { _ilike: $search } }\\n          { ethereum_address: { _ilike: $search } }\\n        ]\\n      }\\n    ) {\\n      ...PlayerFragment\\n    }\\n    player_aggregate(\\n      where: {\\n        availability_hours: { _gte: $availability }\\n        timezone: { _in: $timezones }\\n        playerType: { id: { _in: $playerTypeIds } }\\n        Player_Skills: { Skill: { id: { _in: $skillIds } } }\\n        _or: [\\n          { username: { _ilike: $search } }\\n          { ethereum_address: { _ilike: $search } }\\n        ]\\n      }\\n    ) {\\n      aggregate {\\n        count\\n      }\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'fake-tag';\nimport { GetPlayerFiltersDocument, GetPlayersDocument } from './autogen/types';\nimport { client as defaultClient } from './client';\nimport { PlayerFragment, PlayerSkillFragment } from './fragments'; // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\ngql(_templateObject(), PlayerFragment);\nexport var PLAYER_LIMIT = 9;\nexport var defaultQueryVariables = {\n  offset: 0,\n  limit: PLAYER_LIMIT,\n  availability: 0,\n  skillIds: null,\n  playerTypeIds: null,\n  timezones: null,\n  search: '%%'\n};\nexport var getPlayersWithCount = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _data$player_aggregat;\n\n    var queryVariables,\n        client,\n        _yield$client$query$t,\n        data,\n        error,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            queryVariables = _args.length > 0 && _args[0] !== undefined ? _args[0] : defaultQueryVariables;\n            client = _args.length > 1 && _args[1] !== undefined ? _args[1] : defaultClient;\n            _context.next = 4;\n            return client.query(GetPlayersDocument, queryVariables).toPromise();\n\n          case 4:\n            _yield$client$query$t = _context.sent;\n            data = _yield$client$query$t.data;\n            error = _yield$client$query$t.error;\n            return _context.abrupt(\"return\", {\n              players: (data === null || data === void 0 ? void 0 : data.player) || [],\n              count: (data === null || data === void 0 ? void 0 : (_data$player_aggregat = data.player_aggregate.aggregate) === null || _data$player_aggregat === void 0 ? void 0 : _data$player_aggregat.count) || 0,\n              error: error\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getPlayersWithCount() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar playerUsernamesQuery = gql(_templateObject2());\nexport var getPlayerUsernames = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var limit,\n        _yield$defaultClient$,\n        data,\n        error,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            limit = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : 150;\n            _context2.next = 3;\n            return defaultClient.query(playerUsernamesQuery, {\n              limit: limit\n            }).toPromise();\n\n          case 3:\n            _yield$defaultClient$ = _context2.sent;\n            data = _yield$defaultClient$.data;\n            error = _yield$defaultClient$.error;\n\n            if (data) {\n              _context2.next = 10;\n              break;\n            }\n\n            if (!error) {\n              _context2.next = 9;\n              break;\n            }\n\n            throw error;\n\n          case 9:\n            return _context2.abrupt(\"return\", []);\n\n          case 10:\n            return _context2.abrupt(\"return\", data.player.map(function (p) {\n              return p.username;\n            }));\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getPlayerUsernames() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getTopPlayerUsernames = getPlayerUsernames; // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\ngql(_templateObject3(), PlayerSkillFragment);\nexport var getPlayerFilters = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var client,\n        _yield$client$query$t2,\n        data,\n        error,\n        _args3 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            client = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : defaultClient;\n            _context3.next = 3;\n            return client.query(GetPlayerFiltersDocument).toPromise();\n\n          case 3:\n            _yield$client$query$t2 = _context3.sent;\n            data = _yield$client$query$t2.data;\n            error = _yield$client$query$t2.error;\n\n            if (!error) {\n              _context3.next = 9;\n              break;\n            }\n\n            // eslint-disable-next-line no-console\n            console.error(error);\n            throw error;\n\n          case 9:\n            return _context3.abrupt(\"return\", data);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getPlayerFilters() {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/graphql/getPlayers.ts"],"names":["gql","GetPlayerFiltersDocument","GetPlayersDocument","client","defaultClient","PlayerFragment","PlayerSkillFragment","PLAYER_LIMIT","defaultQueryVariables","offset","limit","availability","skillIds","playerTypeIds","timezones","search","getPlayersWithCount","queryVariables","query","toPromise","data","error","players","player","count","player_aggregate","aggregate","playerUsernamesQuery","getPlayerUsernames","map","p","username","getTopPlayerUsernames","getPlayerFilters","console"],"mappings":"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","sourcesContent":["import gql from 'fake-tag';\nimport { Client } from 'urql';\n\nimport {\n  GetPlayerFiltersDocument,\n  GetPlayerFiltersQuery,\n  GetPlayerFiltersQueryVariables,\n  GetPlayersDocument,\n  GetPlayersQuery,\n  GetPlayersQueryVariables,\n  GetPlayerUsernamesQuery,\n  GetPlayerUsernamesQueryVariables,\n  PlayerFragmentFragment,\n} from './autogen/types';\nimport { client as defaultClient } from './client';\nimport { PlayerFragment, PlayerSkillFragment } from './fragments';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-expressions\ngql`\n  query GetPlayers(\n    $offset: Int\n    $limit: Int\n    $skillIds: [uuid!]\n    $playerTypeIds: [Int!]\n    $availability: Int\n    $timezones: [String!]\n    $search: String\n  ) {\n    player(\n      order_by: { total_xp: desc }\n      offset: $offset\n      limit: $limit\n      where: {\n        availability_hours: { _gte: $availability }\n        timezone: { _in: $timezones }\n        playerType: { id: { _in: $playerTypeIds } }\n        Player_Skills: { Skill: { id: { _in: $skillIds } } }\n        _or: [\n          { username: { _ilike: $search } }\n          { ethereum_address: { _ilike: $search } }\n        ]\n      }\n    ) {\n      ...PlayerFragment\n    }\n    player_aggregate(\n      where: {\n        availability_hours: { _gte: $availability }\n        timezone: { _in: $timezones }\n        playerType: { id: { _in: $playerTypeIds } }\n        Player_Skills: { Skill: { id: { _in: $skillIds } } }\n        _or: [\n          { username: { _ilike: $search } }\n          { ethereum_address: { _ilike: $search } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n  ${PlayerFragment}\n`;\n\nexport const PLAYER_LIMIT = 9;\n\nexport const defaultQueryVariables: GetPlayersQueryVariables = {\n  offset: 0,\n  limit: PLAYER_LIMIT,\n  availability: 0,\n  skillIds: null,\n  playerTypeIds: null,\n  timezones: null,\n  search: '%%',\n};\n\nexport type PlayersResponse = {\n  error: Error | undefined;\n  count: number;\n  players: PlayerFragmentFragment[];\n};\n\nexport const getPlayersWithCount = async (\n  queryVariables = defaultQueryVariables,\n  client: Client = defaultClient,\n): Promise<PlayersResponse> => {\n  const { data, error } = await client\n    .query<GetPlayersQuery, GetPlayersQueryVariables>(\n      GetPlayersDocument,\n      queryVariables,\n    )\n    .toPromise();\n\n  return {\n    players: data?.player || [],\n    count: data?.player_aggregate.aggregate?.count || 0,\n    error,\n  };\n};\n\nconst playerUsernamesQuery = gql`\n  query GetPlayerUsernames($limit: Int) {\n    player(order_by: { total_xp: desc }, limit: $limit) {\n      username\n    }\n  }\n`;\n\nexport const getPlayerUsernames = async (limit = 150): Promise<string[]> => {\n  const { data, error } = await defaultClient\n    .query<GetPlayerUsernamesQuery, GetPlayerUsernamesQueryVariables>(\n      playerUsernamesQuery,\n      {\n        limit,\n      },\n    )\n    .toPromise();\n\n  if (!data) {\n    if (error) {\n      throw error;\n    }\n\n    return [];\n  }\n\n  return data.player.map((p) => p.username);\n};\n\nexport const getTopPlayerUsernames = getPlayerUsernames;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-expressions\ngql`\n  query GetPlayerFilters {\n    skill_aggregate(distinct_on: category) {\n      nodes {\n        name: category\n      }\n    }\n    skill(\n      order_by: { Player_Skills_aggregate: { count: desc }, category: asc }\n    ) {\n      ...PlayerSkillFragment\n    }\n    player_type(distinct_on: id) {\n      value: id\n      label: title\n    }\n  }\n  ${PlayerSkillFragment}\n`;\n\nexport const getPlayerFilters = async (client: Client = defaultClient) => {\n  const { data, error } = await client\n    .query<GetPlayerFiltersQuery, GetPlayerFiltersQueryVariables>(\n      GetPlayerFiltersDocument,\n    )\n    .toPromise();\n\n  if (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    throw error;\n  }\n\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}