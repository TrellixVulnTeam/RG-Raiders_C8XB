{"ast":null,"code":"var _jsxFileName = \"/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/pages/profile/setup/playerType.tsx\";\nvar __jsx = React.createElement;\nimport { SetupPlayerType } from 'components/Setup/SetupPlayerType';\nimport { SetupProfile } from 'components/Setup/SetupProfile';\nimport { SetupContextProvider } from 'contexts/SetupContext';\nimport { getPlayerTypes } from 'graphql/getPlayerTypes';\nimport { useUser } from 'lib/hooks';\nimport React, { useState } from 'react';\nexport const getStaticProps = async () => {\n  const playerTypeChoices = await getPlayerTypes();\n  return {\n    props: {\n      playerTypeChoices,\n      hideAppDrawer: true\n    }\n  };\n};\n\nconst PlayerTypeSetup = props => {\n  const {\n    playerTypeChoices\n  } = props;\n  const {\n    0: playerType,\n    1: setPlayerType\n  } = useState();\n  const {\n    user\n  } = useUser({\n    redirectTo: '/'\n  });\n\n  if (user !== null && user !== void 0 && user.player) {\n    const {\n      player\n    } = user;\n\n    if (player.playerType && !playerType) {\n      setPlayerType(player.playerType);\n    }\n  }\n\n  return __jsx(SetupContextProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(SetupProfile, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, __jsx(SetupPlayerType, {\n    playerTypeChoices: playerTypeChoices,\n    playerType: playerType,\n    setPlayerType: setPlayerType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default PlayerTypeSetup;","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/pages/profile/setup/playerType.tsx"],"names":["SetupPlayerType","SetupProfile","SetupContextProvider","getPlayerTypes","useUser","React","useState","getStaticProps","playerTypeChoices","props","hideAppDrawer","PlayerTypeSetup","playerType","setPlayerType","user","redirectTo","player"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,kCAAhC;AACA,SAASC,YAAT,QAA6B,+BAA7B;AACA,SAASC,oBAAT,QAAqC,uBAArC;AAEA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,iBAAiB,GAAG,MAAML,cAAc,EAA9C;AAEA,SAAO;AACLM,IAAAA,KAAK,EAAE;AACLD,MAAAA,iBADK;AAELE,MAAAA,aAAa,EAAE;AAFV;AADF,GAAP;AAMD,CATM;;AAaP,MAAMC,eAAgC,GAAIF,KAAD,IAAW;AAClD,QAAM;AAAED,IAAAA;AAAF,MAAwBC,KAA9B;AACA,QAAM;AAAA,OAACG,UAAD;AAAA,OAAaC;AAAb,MAA8BP,QAAQ,EAA5C;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAWV,OAAO,CAAC;AAAEW,IAAAA,UAAU,EAAE;AAAd,GAAD,CAAxB;;AAEA,MAAID,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEE,MAAV,EAAkB;AAChB,UAAM;AAAEA,MAAAA;AAAF,QAAaF,IAAnB;;AACA,QAAIE,MAAM,CAACJ,UAAP,IAAqB,CAACA,UAA1B,EAAsC;AACpCC,MAAAA,aAAa,CAACG,MAAM,CAACJ,UAAR,CAAb;AACD;AACF;;AAED,SACE,MAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,eAAD;AACE,IAAA,iBAAiB,EAAEJ,iBADrB;AAEE,IAAA,UAAU,EAAEI,UAFd;AAGE,IAAA,aAAa,EAAEC,aAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAWD,CAvBD;;AAwBA,eAAeF,eAAf","sourcesContent":["import { SetupPlayerType } from 'components/Setup/SetupPlayerType';\nimport { SetupProfile } from 'components/Setup/SetupProfile';\nimport { SetupContextProvider } from 'contexts/SetupContext';\nimport { Player_Type } from 'graphql/autogen/types';\nimport { getPlayerTypes } from 'graphql/getPlayerTypes';\nimport { useUser } from 'lib/hooks';\nimport { InferGetStaticPropsType } from 'next';\nimport React, { useState } from 'react';\n\nexport const getStaticProps = async () => {\n  const playerTypeChoices = await getPlayerTypes();\n\n  return {\n    props: {\n      playerTypeChoices,\n      hideAppDrawer: true,\n    },\n  };\n};\n\ntype Props = InferGetStaticPropsType<typeof getStaticProps>;\n\nconst PlayerTypeSetup: React.FC<Props> = (props) => {\n  const { playerTypeChoices } = props;\n  const [playerType, setPlayerType] = useState<Player_Type>();\n  const { user } = useUser({ redirectTo: '/' });\n\n  if (user?.player) {\n    const { player } = user;\n    if (player.playerType && !playerType) {\n      setPlayerType(player.playerType);\n    }\n  }\n\n  return (\n    <SetupContextProvider>\n      <SetupProfile>\n        <SetupPlayerType\n          playerTypeChoices={playerTypeChoices}\n          playerType={playerType}\n          setPlayerType={setPlayerType}\n        />\n      </SetupProfile>\n    </SetupContextProvider>\n  );\n};\nexport default PlayerTypeSetup;\n"]},"metadata":{},"sourceType":"module"}