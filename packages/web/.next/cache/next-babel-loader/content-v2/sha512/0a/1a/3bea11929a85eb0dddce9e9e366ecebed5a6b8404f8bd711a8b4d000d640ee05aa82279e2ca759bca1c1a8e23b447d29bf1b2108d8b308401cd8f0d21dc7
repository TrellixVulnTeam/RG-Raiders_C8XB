{"ast":null,"code":"import gql from 'fake-tag';\nimport { client } from './client';\nimport { GuildFragment } from './fragments';\nconst guildsQuery = gql`\n  query GetGuilds($limit: Int) {\n    guild(where: { status: { _eq: ACTIVE } }, limit: $limit) {\n      ...GuildFragment\n    }\n  }\n  ${GuildFragment}\n`;\nexport const getGuilds = async (limit = 50) => {\n  const {\n    data,\n    error\n  } = await client.query(guildsQuery, {\n    limit\n  }).toPromise();\n\n  if (!data) {\n    if (error) {\n      throw error;\n    }\n\n    return [];\n  }\n\n  return data.guild;\n};\nconst guildnamesQuery = gql`\n  query GetGuildnames($limit: Int) {\n    guild(where: { status: { _eq: ACTIVE } }, limit: $limit) {\n      guildname\n    }\n  }\n`;\nexport const getGuildnames = async (limit = 50) => {\n  const {\n    data,\n    error\n  } = await client.query(guildnamesQuery, {\n    limit\n  }).toPromise();\n\n  if (!data) {\n    if (error) {\n      throw error;\n    }\n\n    return [];\n  }\n\n  return data.guild.map(g => g.guildname);\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/graphql/getGuilds.ts"],"names":["gql","client","GuildFragment","guildsQuery","getGuilds","limit","data","error","query","toPromise","guild","guildnamesQuery","getGuildnames","map","g","guildname"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,UAAhB;AAQA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,aAAT,QAA8B,aAA9B;AAEA,MAAMC,WAAW,GAAGH,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA,IAAIE,aAAc;AAClB,CAPA;AASA,OAAO,MAAME,SAAS,GAAG,OAAOC,KAAK,GAAG,EAAf,KAAsB;AAC7C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkB,MAAMN,MAAM,CACjCO,KAD2B,CACoBL,WADpB,EACiC;AAAEE,IAAAA;AAAF,GADjC,EAE3BI,SAF2B,EAA9B;;AAIA,MAAI,CAACH,IAAL,EAAW;AACT,QAAIC,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AAED,WAAO,EAAP;AACD;;AAED,SAAOD,IAAI,CAACI,KAAZ;AACD,CAdM;AAgBP,MAAMC,eAAe,GAAGX,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,OAAO,MAAMY,aAAa,GAAG,OAAOP,KAAK,GAAG,EAAf,KAAsB;AACjD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkB,MAAMN,MAAM,CACjCO,KAD2B,CAC4BG,eAD5B,EAC6C;AACvEN,IAAAA;AADuE,GAD7C,EAI3BI,SAJ2B,EAA9B;;AAMA,MAAI,CAACH,IAAL,EAAW;AACT,QAAIC,KAAJ,EAAW;AACT,YAAMA,KAAN;AACD;;AAED,WAAO,EAAP;AACD;;AAED,SAAOD,IAAI,CAACI,KAAL,CAAWG,GAAX,CAAgBC,CAAD,IAAOA,CAAC,CAACC,SAAxB,CAAP;AACD,CAhBM","sourcesContent":["import gql from 'fake-tag';\n\nimport {\n  GetGuildnamesQuery,\n  GetGuildnamesQueryVariables,\n  GetGuildsQuery,\n  GetGuildsQueryVariables,\n} from './autogen/types';\nimport { client } from './client';\nimport { GuildFragment } from './fragments';\n\nconst guildsQuery = gql`\n  query GetGuilds($limit: Int) {\n    guild(where: { status: { _eq: ACTIVE } }, limit: $limit) {\n      ...GuildFragment\n    }\n  }\n  ${GuildFragment}\n`;\n\nexport const getGuilds = async (limit = 50) => {\n  const { data, error } = await client\n    .query<GetGuildsQuery, GetGuildsQueryVariables>(guildsQuery, { limit })\n    .toPromise();\n\n  if (!data) {\n    if (error) {\n      throw error;\n    }\n\n    return [];\n  }\n\n  return data.guild;\n};\n\nconst guildnamesQuery = gql`\n  query GetGuildnames($limit: Int) {\n    guild(where: { status: { _eq: ACTIVE } }, limit: $limit) {\n      guildname\n    }\n  }\n`;\n\nexport const getGuildnames = async (limit = 50) => {\n  const { data, error } = await client\n    .query<GetGuildnamesQuery, GetGuildnamesQueryVariables>(guildnamesQuery, {\n      limit,\n    })\n    .toPromise();\n\n  if (!data) {\n    if (error) {\n      throw error;\n    }\n\n    return [];\n  }\n\n  return data.guild.map((g) => g.guildname);\n};\n"]},"metadata":{},"sourceType":"module"}