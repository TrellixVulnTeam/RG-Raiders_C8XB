{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable */\nimport gql from 'fake-tag';\nimport * as Urql from 'urql';\n\n/** unique or primary key constraints on table \"AccountType\" */\nexport let AccountType_Constraint;\n\n(function (AccountType_Constraint) {\n  AccountType_Constraint[\"AccountTypePkey\"] = \"AccountType_pkey\";\n})(AccountType_Constraint || (AccountType_Constraint = {}));\n\nexport let AccountType_Enum;\n/** expression to compare columns of type AccountType_enum. All fields are combined with logical 'AND'. */\n\n(function (AccountType_Enum) {\n  AccountType_Enum[\"Discord\"] = \"DISCORD\";\n  AccountType_Enum[\"Discourse\"] = \"DISCOURSE\";\n  AccountType_Enum[\"Ethereum\"] = \"ETHEREUM\";\n  AccountType_Enum[\"Github\"] = \"GITHUB\";\n  AccountType_Enum[\"Twitter\"] = \"TWITTER\";\n})(AccountType_Enum || (AccountType_Enum = {}));\n\n/** select columns of table \"AccountType\" */\nexport let AccountType_Select_Column;\n/** input type for updating data in table \"AccountType\" */\n\n(function (AccountType_Select_Column) {\n  AccountType_Select_Column[\"Type\"] = \"type\";\n})(AccountType_Select_Column || (AccountType_Select_Column = {}));\n\n/** update columns of table \"AccountType\" */\nexport let AccountType_Update_Column;\n\n(function (AccountType_Update_Column) {\n  AccountType_Update_Column[\"Type\"] = \"type\";\n})(AccountType_Update_Column || (AccountType_Update_Column = {}));\n\n/** unique or primary key constraints on table \"ColorAspect\" */\nexport let ColorAspect_Constraint;\n/** input type for incrementing integer column in table \"ColorAspect\" */\n\n(function (ColorAspect_Constraint) {\n  ColorAspect_Constraint[\"ColorAspectNameKey\"] = \"ColorAspect_name_key\";\n  ColorAspect_Constraint[\"ColorAspectPkey\"] = \"ColorAspect_pkey\";\n})(ColorAspect_Constraint || (ColorAspect_Constraint = {}));\n\n/** select columns of table \"ColorAspect\" */\nexport let ColorAspect_Select_Column;\n/** input type for updating data in table \"ColorAspect\" */\n\n(function (ColorAspect_Select_Column) {\n  ColorAspect_Select_Column[\"Description\"] = \"description\";\n  ColorAspect_Select_Column[\"Mask\"] = \"mask\";\n  ColorAspect_Select_Column[\"Name\"] = \"name\";\n})(ColorAspect_Select_Column || (ColorAspect_Select_Column = {}));\n\n/** update columns of table \"ColorAspect\" */\nexport let ColorAspect_Update_Column;\n/** aggregate var_pop on columns */\n\n(function (ColorAspect_Update_Column) {\n  ColorAspect_Update_Column[\"Description\"] = \"description\";\n  ColorAspect_Update_Column[\"Mask\"] = \"mask\";\n  ColorAspect_Update_Column[\"Name\"] = \"name\";\n})(ColorAspect_Update_Column || (ColorAspect_Update_Column = {}));\n\n/** unique or primary key constraints on table \"guild_account\" */\nexport let Guild_Account_Constraint;\n/** input type for inserting data into table \"guild_account\" */\n\n(function (Guild_Account_Constraint) {\n  Guild_Account_Constraint[\"GuildAccountPkey\"] = \"guild_account_pkey\";\n  Guild_Account_Constraint[\"GuildAccountTypeIdentifierKey\"] = \"guild_account_type_identifier_key\";\n})(Guild_Account_Constraint || (Guild_Account_Constraint = {}));\n\n/** select columns of table \"guild_account\" */\nexport let Guild_Account_Select_Column;\n/** input type for updating data in table \"guild_account\" */\n\n(function (Guild_Account_Select_Column) {\n  Guild_Account_Select_Column[\"GuildId\"] = \"guild_id\";\n  Guild_Account_Select_Column[\"Identifier\"] = \"identifier\";\n  Guild_Account_Select_Column[\"Type\"] = \"type\";\n})(Guild_Account_Select_Column || (Guild_Account_Select_Column = {}));\n\n/** update columns of table \"guild_account\" */\nexport let Guild_Account_Update_Column;\n/** aggregated selection of \"guild\" */\n\n(function (Guild_Account_Update_Column) {\n  Guild_Account_Update_Column[\"GuildId\"] = \"guild_id\";\n  Guild_Account_Update_Column[\"Identifier\"] = \"identifier\";\n  Guild_Account_Update_Column[\"Type\"] = \"type\";\n})(Guild_Account_Update_Column || (Guild_Account_Update_Column = {}));\n\n/** unique or primary key constraints on table \"guild\" */\nexport let Guild_Constraint;\n/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */\n\n(function (Guild_Constraint) {\n  Guild_Constraint[\"GuildGuildnameKey\"] = \"Guild_guildname_key\";\n  Guild_Constraint[\"GuildPkey\"] = \"Guild_pkey\";\n  Guild_Constraint[\"GuildDiscordIdKey\"] = \"guild_discord_id_key\";\n})(Guild_Constraint || (Guild_Constraint = {}));\n\n/** unique or primary key constraints on table \"guild_player\" */\nexport let Guild_Player_Constraint;\n/** input type for inserting data into table \"guild_player\" */\n\n(function (Guild_Player_Constraint) {\n  Guild_Player_Constraint[\"GuildPlayerPkey\"] = \"guild_player_pkey\";\n})(Guild_Player_Constraint || (Guild_Player_Constraint = {}));\n\n/** select columns of table \"guild_player\" */\nexport let Guild_Player_Select_Column;\n/** input type for updating data in table \"guild_player\" */\n\n(function (Guild_Player_Select_Column) {\n  Guild_Player_Select_Column[\"GuildId\"] = \"guild_id\";\n  Guild_Player_Select_Column[\"PlayerId\"] = \"player_id\";\n})(Guild_Player_Select_Column || (Guild_Player_Select_Column = {}));\n\n/** update columns of table \"guild_player\" */\nexport let Guild_Player_Update_Column;\n/** prepend existing jsonb value of filtered columns with new jsonb value */\n\n(function (Guild_Player_Update_Column) {\n  Guild_Player_Update_Column[\"GuildId\"] = \"guild_id\";\n  Guild_Player_Update_Column[\"PlayerId\"] = \"player_id\";\n})(Guild_Player_Update_Column || (Guild_Player_Update_Column = {}));\n\n/** select columns of table \"guild\" */\nexport let Guild_Select_Column;\n/** input type for updating data in table \"guild\" */\n\n(function (Guild_Select_Column) {\n  Guild_Select_Column[\"Description\"] = \"description\";\n  Guild_Select_Column[\"DiscordId\"] = \"discord_id\";\n  Guild_Select_Column[\"DiscordInviteUrl\"] = \"discord_invite_url\";\n  Guild_Select_Column[\"DiscordMetadata\"] = \"discord_metadata\";\n  Guild_Select_Column[\"GithubUrl\"] = \"github_url\";\n  Guild_Select_Column[\"Guildname\"] = \"guildname\";\n  Guild_Select_Column[\"Id\"] = \"id\";\n  Guild_Select_Column[\"JoinButtonUrl\"] = \"join_button_url\";\n  Guild_Select_Column[\"Logo\"] = \"logo\";\n  Guild_Select_Column[\"MolochAddress\"] = \"moloch_address\";\n  Guild_Select_Column[\"Name\"] = \"name\";\n  Guild_Select_Column[\"Position\"] = \"position\";\n  Guild_Select_Column[\"Status\"] = \"status\";\n  Guild_Select_Column[\"TwitterUrl\"] = \"twitter_url\";\n  Guild_Select_Column[\"Type\"] = \"type\";\n  Guild_Select_Column[\"WebsiteUrl\"] = \"website_url\";\n})(Guild_Select_Column || (Guild_Select_Column = {}));\n\n/** update columns of table \"guild\" */\nexport let Guild_Update_Column;\n/** columns and relationships of \"GuildPosition\" */\n\n(function (Guild_Update_Column) {\n  Guild_Update_Column[\"Description\"] = \"description\";\n  Guild_Update_Column[\"DiscordId\"] = \"discord_id\";\n  Guild_Update_Column[\"DiscordInviteUrl\"] = \"discord_invite_url\";\n  Guild_Update_Column[\"DiscordMetadata\"] = \"discord_metadata\";\n  Guild_Update_Column[\"GithubUrl\"] = \"github_url\";\n  Guild_Update_Column[\"Guildname\"] = \"guildname\";\n  Guild_Update_Column[\"Id\"] = \"id\";\n  Guild_Update_Column[\"JoinButtonUrl\"] = \"join_button_url\";\n  Guild_Update_Column[\"Logo\"] = \"logo\";\n  Guild_Update_Column[\"MolochAddress\"] = \"moloch_address\";\n  Guild_Update_Column[\"Name\"] = \"name\";\n  Guild_Update_Column[\"Position\"] = \"position\";\n  Guild_Update_Column[\"Status\"] = \"status\";\n  Guild_Update_Column[\"TwitterUrl\"] = \"twitter_url\";\n  Guild_Update_Column[\"Type\"] = \"type\";\n  Guild_Update_Column[\"WebsiteUrl\"] = \"website_url\";\n})(Guild_Update_Column || (Guild_Update_Column = {}));\n\n/** unique or primary key constraints on table \"GuildPosition\" */\nexport let GuildPosition_Constraint;\n\n(function (GuildPosition_Constraint) {\n  GuildPosition_Constraint[\"GuildPositionPkey\"] = \"GuildPosition_pkey\";\n})(GuildPosition_Constraint || (GuildPosition_Constraint = {}));\n\nexport let GuildPosition_Enum;\n/** expression to compare columns of type GuildPosition_enum. All fields are combined with logical 'AND'. */\n\n(function (GuildPosition_Enum) {\n  GuildPosition_Enum[\"External\"] = \"EXTERNAL\";\n  GuildPosition_Enum[\"Internal\"] = \"INTERNAL\";\n})(GuildPosition_Enum || (GuildPosition_Enum = {}));\n\n/** select columns of table \"GuildPosition\" */\nexport let GuildPosition_Select_Column;\n/** input type for updating data in table \"GuildPosition\" */\n\n(function (GuildPosition_Select_Column) {\n  GuildPosition_Select_Column[\"Position\"] = \"position\";\n})(GuildPosition_Select_Column || (GuildPosition_Select_Column = {}));\n\n/** update columns of table \"GuildPosition\" */\nexport let GuildPosition_Update_Column;\n/** columns and relationships of \"GuildStatus\" */\n\n(function (GuildPosition_Update_Column) {\n  GuildPosition_Update_Column[\"Position\"] = \"position\";\n})(GuildPosition_Update_Column || (GuildPosition_Update_Column = {}));\n\n/** unique or primary key constraints on table \"GuildStatus\" */\nexport let GuildStatus_Constraint;\n\n(function (GuildStatus_Constraint) {\n  GuildStatus_Constraint[\"GuildStatusPkey\"] = \"GuildStatus_pkey\";\n})(GuildStatus_Constraint || (GuildStatus_Constraint = {}));\n\nexport let GuildStatus_Enum;\n/** expression to compare columns of type GuildStatus_enum. All fields are combined with logical 'AND'. */\n\n(function (GuildStatus_Enum) {\n  GuildStatus_Enum[\"Active\"] = \"ACTIVE\";\n  GuildStatus_Enum[\"Inactive\"] = \"INACTIVE\";\n  GuildStatus_Enum[\"Pending\"] = \"PENDING\";\n})(GuildStatus_Enum || (GuildStatus_Enum = {}));\n\n/** select columns of table \"GuildStatus\" */\nexport let GuildStatus_Select_Column;\n/** input type for updating data in table \"GuildStatus\" */\n\n(function (GuildStatus_Select_Column) {\n  GuildStatus_Select_Column[\"Status\"] = \"status\";\n})(GuildStatus_Select_Column || (GuildStatus_Select_Column = {}));\n\n/** update columns of table \"GuildStatus\" */\nexport let GuildStatus_Update_Column;\n/** columns and relationships of \"GuildType\" */\n\n(function (GuildStatus_Update_Column) {\n  GuildStatus_Update_Column[\"Status\"] = \"status\";\n})(GuildStatus_Update_Column || (GuildStatus_Update_Column = {}));\n\n/** unique or primary key constraints on table \"GuildType\" */\nexport let GuildType_Constraint;\n\n(function (GuildType_Constraint) {\n  GuildType_Constraint[\"GuildTypePkey\"] = \"GuildType_pkey\";\n})(GuildType_Constraint || (GuildType_Constraint = {}));\n\nexport let GuildType_Enum;\n/** expression to compare columns of type GuildType_enum. All fields are combined with logical 'AND'. */\n\n(function (GuildType_Enum) {\n  GuildType_Enum[\"Funding\"] = \"FUNDING\";\n  GuildType_Enum[\"Project\"] = \"PROJECT\";\n  GuildType_Enum[\"Research\"] = \"RESEARCH\";\n  GuildType_Enum[\"Service\"] = \"SERVICE\";\n  GuildType_Enum[\"Social\"] = \"SOCIAL\";\n})(GuildType_Enum || (GuildType_Enum = {}));\n\n/** select columns of table \"GuildType\" */\nexport let GuildType_Select_Column;\n/** input type for updating data in table \"GuildType\" */\n\n(function (GuildType_Select_Column) {\n  GuildType_Select_Column[\"Name\"] = \"name\";\n})(GuildType_Select_Column || (GuildType_Select_Column = {}));\n\n/** update columns of table \"GuildType\" */\nexport let GuildType_Update_Column;\n/** expression to compare columns of type Int. All fields are combined with logical 'AND'. */\n\n(function (GuildType_Update_Column) {\n  GuildType_Update_Column[\"Name\"] = \"name\";\n})(GuildType_Update_Column || (GuildType_Update_Column = {}));\n\n/** select columns of table \"me\" */\nexport let Me_Select_Column;\n/** input type for updating data in table \"me\" */\n\n(function (Me_Select_Column) {\n  Me_Select_Column[\"EthereumAddress\"] = \"ethereum_address\";\n  Me_Select_Column[\"Id\"] = \"id\";\n  Me_Select_Column[\"Username\"] = \"username\";\n})(Me_Select_Column || (Me_Select_Column = {}));\n\n/** column ordering options */\nexport let Order_By;\n/** columns and relationships of \"player\" */\n\n(function (Order_By) {\n  Order_By[\"Asc\"] = \"asc\";\n  Order_By[\"AscNullsFirst\"] = \"asc_nulls_first\";\n  Order_By[\"AscNullsLast\"] = \"asc_nulls_last\";\n  Order_By[\"Desc\"] = \"desc\";\n  Order_By[\"DescNullsFirst\"] = \"desc_nulls_first\";\n  Order_By[\"DescNullsLast\"] = \"desc_nulls_last\";\n})(Order_By || (Order_By = {}));\n\n/** unique or primary key constraints on table \"player_account\" */\nexport let Player_Account_Constraint;\n/** input type for inserting data into table \"player_account\" */\n\n(function (Player_Account_Constraint) {\n  Player_Account_Constraint[\"AccountIdentifierTypeKey\"] = \"Account_identifier_type_key\";\n})(Player_Account_Constraint || (Player_Account_Constraint = {}));\n\n/** select columns of table \"player_account\" */\nexport let Player_Account_Select_Column;\n/** input type for updating data in table \"player_account\" */\n\n(function (Player_Account_Select_Column) {\n  Player_Account_Select_Column[\"Identifier\"] = \"identifier\";\n  Player_Account_Select_Column[\"PlayerId\"] = \"player_id\";\n  Player_Account_Select_Column[\"Type\"] = \"type\";\n})(Player_Account_Select_Column || (Player_Account_Select_Column = {}));\n\n/** update columns of table \"player_account\" */\nexport let Player_Account_Update_Column;\n/** aggregated selection of \"player\" */\n\n(function (Player_Account_Update_Column) {\n  Player_Account_Update_Column[\"Identifier\"] = \"identifier\";\n  Player_Account_Update_Column[\"PlayerId\"] = \"player_id\";\n  Player_Account_Update_Column[\"Type\"] = \"type\";\n})(Player_Account_Update_Column || (Player_Account_Update_Column = {}));\n\n/** unique or primary key constraints on table \"player\" */\nexport let Player_Constraint;\n/** input type for incrementing integer column in table \"player\" */\n\n(function (Player_Constraint) {\n  Player_Constraint[\"PlayerEthereumAddressUniqueKey\"] = \"Player_ethereum_address_unique_key\";\n  Player_Constraint[\"PlayerPkey\"] = \"Player_pkey\";\n  Player_Constraint[\"PlayerUsernameUniqueKey\"] = \"Player_username_unique_key\";\n  Player_Constraint[\"PlayerDiscordIdKey\"] = \"player_discord_id_key\";\n})(Player_Constraint || (Player_Constraint = {}));\n\n/** select columns of table \"player\" */\nexport let Player_Select_Column;\n/** input type for updating data in table \"player\" */\n\n(function (Player_Select_Column) {\n  Player_Select_Column[\"AvailabilityHours\"] = \"availability_hours\";\n  Player_Select_Column[\"ColorMask\"] = \"color_mask\";\n  Player_Select_Column[\"CreatedAt\"] = \"created_at\";\n  Player_Select_Column[\"DiscordId\"] = \"discord_id\";\n  Player_Select_Column[\"EthereumAddress\"] = \"ethereum_address\";\n  Player_Select_Column[\"Id\"] = \"id\";\n  Player_Select_Column[\"PlayerTypeId\"] = \"player_type_id\";\n  Player_Select_Column[\"Rank\"] = \"rank\";\n  Player_Select_Column[\"Role\"] = \"role\";\n  Player_Select_Column[\"SeasonXp\"] = \"season_xp\";\n  Player_Select_Column[\"Timezone\"] = \"timezone\";\n  Player_Select_Column[\"TotalXp\"] = \"total_xp\";\n  Player_Select_Column[\"UpdatedAt\"] = \"updated_at\";\n  Player_Select_Column[\"Username\"] = \"username\";\n})(Player_Select_Column || (Player_Select_Column = {}));\n\n/** unique or primary key constraints on table \"player_skill\" */\nexport let Player_Skill_Constraint;\n/** input type for inserting data into table \"player_skill\" */\n\n(function (Player_Skill_Constraint) {\n  Player_Skill_Constraint[\"PlayerSkillUniqueKey\"] = \"Player_Skill_unique_key\";\n})(Player_Skill_Constraint || (Player_Skill_Constraint = {}));\n\n/** select columns of table \"player_skill\" */\nexport let Player_Skill_Select_Column;\n/** input type for updating data in table \"player_skill\" */\n\n(function (Player_Skill_Select_Column) {\n  Player_Skill_Select_Column[\"PlayerId\"] = \"player_id\";\n  Player_Skill_Select_Column[\"SkillId\"] = \"skill_id\";\n})(Player_Skill_Select_Column || (Player_Skill_Select_Column = {}));\n\n/** update columns of table \"player_skill\" */\nexport let Player_Skill_Update_Column;\n/** aggregate stddev on columns */\n\n(function (Player_Skill_Update_Column) {\n  Player_Skill_Update_Column[\"PlayerId\"] = \"player_id\";\n  Player_Skill_Update_Column[\"SkillId\"] = \"skill_id\";\n})(Player_Skill_Update_Column || (Player_Skill_Update_Column = {}));\n\n/** unique or primary key constraints on table \"player_type\" */\nexport let Player_Type_Constraint;\n/** input type for incrementing integer column in table \"player_type\" */\n\n(function (Player_Type_Constraint) {\n  Player_Type_Constraint[\"PlayerTypePkey\"] = \"PlayerType_pkey\";\n  Player_Type_Constraint[\"PlayerTypeTitleKey\"] = \"PlayerType_title_key\";\n})(Player_Type_Constraint || (Player_Type_Constraint = {}));\n\n/** select columns of table \"player_type\" */\nexport let Player_Type_Select_Column;\n/** input type for updating data in table \"player_type\" */\n\n(function (Player_Type_Select_Column) {\n  Player_Type_Select_Column[\"Description\"] = \"description\";\n  Player_Type_Select_Column[\"Id\"] = \"id\";\n  Player_Type_Select_Column[\"ImageUrl\"] = \"imageUrl\";\n  Player_Type_Select_Column[\"Title\"] = \"title\";\n})(Player_Type_Select_Column || (Player_Type_Select_Column = {}));\n\n/** update columns of table \"player_type\" */\nexport let Player_Type_Update_Column;\n/** aggregate var_pop on columns */\n\n(function (Player_Type_Update_Column) {\n  Player_Type_Update_Column[\"Description\"] = \"description\";\n  Player_Type_Update_Column[\"Id\"] = \"id\";\n  Player_Type_Update_Column[\"ImageUrl\"] = \"imageUrl\";\n  Player_Type_Update_Column[\"Title\"] = \"title\";\n})(Player_Type_Update_Column || (Player_Type_Update_Column = {}));\n\n/** update columns of table \"player\" */\nexport let Player_Update_Column;\n/** aggregate var_pop on columns */\n\n(function (Player_Update_Column) {\n  Player_Update_Column[\"AvailabilityHours\"] = \"availability_hours\";\n  Player_Update_Column[\"ColorMask\"] = \"color_mask\";\n  Player_Update_Column[\"CreatedAt\"] = \"created_at\";\n  Player_Update_Column[\"DiscordId\"] = \"discord_id\";\n  Player_Update_Column[\"EthereumAddress\"] = \"ethereum_address\";\n  Player_Update_Column[\"Id\"] = \"id\";\n  Player_Update_Column[\"PlayerTypeId\"] = \"player_type_id\";\n  Player_Update_Column[\"Rank\"] = \"rank\";\n  Player_Update_Column[\"Role\"] = \"role\";\n  Player_Update_Column[\"SeasonXp\"] = \"season_xp\";\n  Player_Update_Column[\"Timezone\"] = \"timezone\";\n  Player_Update_Column[\"TotalXp\"] = \"total_xp\";\n  Player_Update_Column[\"UpdatedAt\"] = \"updated_at\";\n  Player_Update_Column[\"Username\"] = \"username\";\n})(Player_Update_Column || (Player_Update_Column = {}));\n\n/** unique or primary key constraints on table \"PlayerRank\" */\nexport let PlayerRank_Constraint;\n\n(function (PlayerRank_Constraint) {\n  PlayerRank_Constraint[\"PlayerRankPkey\"] = \"Player_Rank_pkey\";\n})(PlayerRank_Constraint || (PlayerRank_Constraint = {}));\n\nexport let PlayerRank_Enum;\n/** expression to compare columns of type PlayerRank_enum. All fields are combined with logical 'AND'. */\n\n(function (PlayerRank_Enum) {\n  PlayerRank_Enum[\"Bronze\"] = \"BRONZE\";\n  PlayerRank_Enum[\"Diamond\"] = \"DIAMOND\";\n  PlayerRank_Enum[\"Gold\"] = \"GOLD\";\n  PlayerRank_Enum[\"Platinum\"] = \"PLATINUM\";\n  PlayerRank_Enum[\"Silver\"] = \"SILVER\";\n})(PlayerRank_Enum || (PlayerRank_Enum = {}));\n\n/** select columns of table \"PlayerRank\" */\nexport let PlayerRank_Select_Column;\n/** input type for updating data in table \"PlayerRank\" */\n\n(function (PlayerRank_Select_Column) {\n  PlayerRank_Select_Column[\"Rank\"] = \"rank\";\n})(PlayerRank_Select_Column || (PlayerRank_Select_Column = {}));\n\n/** update columns of table \"PlayerRank\" */\nexport let PlayerRank_Update_Column;\n/** columns and relationships of \"profile_cache\" */\n\n(function (PlayerRank_Update_Column) {\n  PlayerRank_Update_Column[\"Rank\"] = \"rank\";\n})(PlayerRank_Update_Column || (PlayerRank_Update_Column = {}));\n\n/** unique or primary key constraints on table \"profile_cache\" */\nexport let Profile_Cache_Constraint;\n/** input type for inserting data into table \"profile_cache\" */\n\n(function (Profile_Cache_Constraint) {\n  Profile_Cache_Constraint[\"ProfileCachePkey\"] = \"profile_cache_pkey\";\n  Profile_Cache_Constraint[\"ProfileCachePlayerIdKey\"] = \"profile_cache_player_id_key\";\n})(Profile_Cache_Constraint || (Profile_Cache_Constraint = {}));\n\n/** select columns of table \"profile_cache\" */\nexport let Profile_Cache_Select_Column;\n/** input type for updating data in table \"profile_cache\" */\n\n(function (Profile_Cache_Select_Column) {\n  Profile_Cache_Select_Column[\"BackgroundImageUrl\"] = \"backgroundImageURL\";\n  Profile_Cache_Select_Column[\"Country\"] = \"country\";\n  Profile_Cache_Select_Column[\"Description\"] = \"description\";\n  Profile_Cache_Select_Column[\"Emoji\"] = \"emoji\";\n  Profile_Cache_Select_Column[\"Gender\"] = \"gender\";\n  Profile_Cache_Select_Column[\"Id\"] = \"id\";\n  Profile_Cache_Select_Column[\"ImageUrl\"] = \"imageURL\";\n  Profile_Cache_Select_Column[\"LastCheckedAt\"] = \"last_checked_at\";\n  Profile_Cache_Select_Column[\"Location\"] = \"location\";\n  Profile_Cache_Select_Column[\"Name\"] = \"name\";\n  Profile_Cache_Select_Column[\"PlayerId\"] = \"playerId\";\n  Profile_Cache_Select_Column[\"Website\"] = \"website\";\n})(Profile_Cache_Select_Column || (Profile_Cache_Select_Column = {}));\n\n/** update columns of table \"profile_cache\" */\nexport let Profile_Cache_Update_Column;\n\n(function (Profile_Cache_Update_Column) {\n  Profile_Cache_Update_Column[\"BackgroundImageUrl\"] = \"backgroundImageURL\";\n  Profile_Cache_Update_Column[\"Country\"] = \"country\";\n  Profile_Cache_Update_Column[\"Description\"] = \"description\";\n  Profile_Cache_Update_Column[\"Emoji\"] = \"emoji\";\n  Profile_Cache_Update_Column[\"Gender\"] = \"gender\";\n  Profile_Cache_Update_Column[\"Id\"] = \"id\";\n  Profile_Cache_Update_Column[\"ImageUrl\"] = \"imageURL\";\n  Profile_Cache_Update_Column[\"LastCheckedAt\"] = \"last_checked_at\";\n  Profile_Cache_Update_Column[\"Location\"] = \"location\";\n  Profile_Cache_Update_Column[\"Name\"] = \"name\";\n  Profile_Cache_Update_Column[\"PlayerId\"] = \"playerId\";\n  Profile_Cache_Update_Column[\"Website\"] = \"website\";\n})(Profile_Cache_Update_Column || (Profile_Cache_Update_Column = {}));\n\n/** unique or primary key constraints on table \"quest_completion\" */\nexport let Quest_Completion_Constraint;\n/** input type for inserting data into table \"quest_completion\" */\n\n(function (Quest_Completion_Constraint) {\n  Quest_Completion_Constraint[\"QuestCompletionPkey\"] = \"quest_completion_pkey\";\n})(Quest_Completion_Constraint || (Quest_Completion_Constraint = {}));\n\n/** select columns of table \"quest_completion\" */\nexport let Quest_Completion_Select_Column;\n/** input type for updating data in table \"quest_completion\" */\n\n(function (Quest_Completion_Select_Column) {\n  Quest_Completion_Select_Column[\"CompletedByPlayerId\"] = \"completed_by_player_id\";\n  Quest_Completion_Select_Column[\"Id\"] = \"id\";\n  Quest_Completion_Select_Column[\"QuestId\"] = \"quest_id\";\n  Quest_Completion_Select_Column[\"Status\"] = \"status\";\n  Quest_Completion_Select_Column[\"SubmissionLink\"] = \"submission_link\";\n  Quest_Completion_Select_Column[\"SubmissionText\"] = \"submission_text\";\n  Quest_Completion_Select_Column[\"SubmittedAt\"] = \"submitted_at\";\n})(Quest_Completion_Select_Column || (Quest_Completion_Select_Column = {}));\n\n/** update columns of table \"quest_completion\" */\nexport let Quest_Completion_Update_Column;\n/** unique or primary key constraints on table \"quest\" */\n\n(function (Quest_Completion_Update_Column) {\n  Quest_Completion_Update_Column[\"CompletedByPlayerId\"] = \"completed_by_player_id\";\n  Quest_Completion_Update_Column[\"Id\"] = \"id\";\n  Quest_Completion_Update_Column[\"QuestId\"] = \"quest_id\";\n  Quest_Completion_Update_Column[\"Status\"] = \"status\";\n  Quest_Completion_Update_Column[\"SubmissionLink\"] = \"submission_link\";\n  Quest_Completion_Update_Column[\"SubmissionText\"] = \"submission_text\";\n  Quest_Completion_Update_Column[\"SubmittedAt\"] = \"submitted_at\";\n})(Quest_Completion_Update_Column || (Quest_Completion_Update_Column = {}));\n\nexport let Quest_Constraint;\n/** input type for incrementing integer column in table \"quest\" */\n\n(function (Quest_Constraint) {\n  Quest_Constraint[\"QuestPkey\"] = \"quest_pkey\";\n})(Quest_Constraint || (Quest_Constraint = {}));\n\n/** select columns of table \"quest\" */\nexport let Quest_Select_Column;\n/** input type for updating data in table \"quest\" */\n\n(function (Quest_Select_Column) {\n  Quest_Select_Column[\"Cooldown\"] = \"cooldown\";\n  Quest_Select_Column[\"CreatedAt\"] = \"created_at\";\n  Quest_Select_Column[\"CreatedByPlayerId\"] = \"created_by_player_id\";\n  Quest_Select_Column[\"Description\"] = \"description\";\n  Quest_Select_Column[\"ExternalLink\"] = \"external_link\";\n  Quest_Select_Column[\"GuildId\"] = \"guild_id\";\n  Quest_Select_Column[\"Id\"] = \"id\";\n  Quest_Select_Column[\"Repetition\"] = \"repetition\";\n  Quest_Select_Column[\"Status\"] = \"status\";\n  Quest_Select_Column[\"Title\"] = \"title\";\n})(Quest_Select_Column || (Quest_Select_Column = {}));\n\n/** unique or primary key constraints on table \"quest_skill\" */\nexport let Quest_Skill_Constraint;\n/** input type for inserting data into table \"quest_skill\" */\n\n(function (Quest_Skill_Constraint) {\n  Quest_Skill_Constraint[\"QuestSkillPkey\"] = \"quest_skill_pkey\";\n})(Quest_Skill_Constraint || (Quest_Skill_Constraint = {}));\n\n/** select columns of table \"quest_skill\" */\nexport let Quest_Skill_Select_Column;\n/** input type for updating data in table \"quest_skill\" */\n\n(function (Quest_Skill_Select_Column) {\n  Quest_Skill_Select_Column[\"QuestId\"] = \"quest_id\";\n  Quest_Skill_Select_Column[\"SkillId\"] = \"skill_id\";\n})(Quest_Skill_Select_Column || (Quest_Skill_Select_Column = {}));\n\n/** update columns of table \"quest_skill\" */\nexport let Quest_Skill_Update_Column;\n/** aggregate stddev on columns */\n\n(function (Quest_Skill_Update_Column) {\n  Quest_Skill_Update_Column[\"QuestId\"] = \"quest_id\";\n  Quest_Skill_Update_Column[\"SkillId\"] = \"skill_id\";\n})(Quest_Skill_Update_Column || (Quest_Skill_Update_Column = {}));\n\n/** update columns of table \"quest\" */\nexport let Quest_Update_Column;\n/** aggregate var_pop on columns */\n\n(function (Quest_Update_Column) {\n  Quest_Update_Column[\"Cooldown\"] = \"cooldown\";\n  Quest_Update_Column[\"CreatedAt\"] = \"created_at\";\n  Quest_Update_Column[\"CreatedByPlayerId\"] = \"created_by_player_id\";\n  Quest_Update_Column[\"Description\"] = \"description\";\n  Quest_Update_Column[\"ExternalLink\"] = \"external_link\";\n  Quest_Update_Column[\"GuildId\"] = \"guild_id\";\n  Quest_Update_Column[\"Id\"] = \"id\";\n  Quest_Update_Column[\"Repetition\"] = \"repetition\";\n  Quest_Update_Column[\"Status\"] = \"status\";\n  Quest_Update_Column[\"Title\"] = \"title\";\n})(Quest_Update_Column || (Quest_Update_Column = {}));\n\nexport let QuestCompletionStatus_ActionEnum;\n/** aggregated selection of \"QuestCompletionStatus\" */\n\n(function (QuestCompletionStatus_ActionEnum) {\n  QuestCompletionStatus_ActionEnum[\"Accepted\"] = \"ACCEPTED\";\n  QuestCompletionStatus_ActionEnum[\"Rejected\"] = \"REJECTED\";\n})(QuestCompletionStatus_ActionEnum || (QuestCompletionStatus_ActionEnum = {}));\n\n/** unique or primary key constraints on table \"QuestCompletionStatus\" */\nexport let QuestCompletionStatus_Constraint;\n\n(function (QuestCompletionStatus_Constraint) {\n  QuestCompletionStatus_Constraint[\"QuestCompletionStatusPkey\"] = \"QuestCompletionStatus_pkey\";\n})(QuestCompletionStatus_Constraint || (QuestCompletionStatus_Constraint = {}));\n\nexport let QuestCompletionStatus_Enum;\n/** expression to compare columns of type QuestCompletionStatus_enum. All fields are combined with logical 'AND'. */\n\n(function (QuestCompletionStatus_Enum) {\n  QuestCompletionStatus_Enum[\"Accepted\"] = \"ACCEPTED\";\n  QuestCompletionStatus_Enum[\"Pending\"] = \"PENDING\";\n  QuestCompletionStatus_Enum[\"Rejected\"] = \"REJECTED\";\n})(QuestCompletionStatus_Enum || (QuestCompletionStatus_Enum = {}));\n\n/** select columns of table \"QuestCompletionStatus\" */\nexport let QuestCompletionStatus_Select_Column;\n/** input type for updating data in table \"QuestCompletionStatus\" */\n\n(function (QuestCompletionStatus_Select_Column) {\n  QuestCompletionStatus_Select_Column[\"Status\"] = \"status\";\n})(QuestCompletionStatus_Select_Column || (QuestCompletionStatus_Select_Column = {}));\n\n/** update columns of table \"QuestCompletionStatus\" */\nexport let QuestCompletionStatus_Update_Column;\n/** columns and relationships of \"QuestRepetition\" */\n\n(function (QuestCompletionStatus_Update_Column) {\n  QuestCompletionStatus_Update_Column[\"Status\"] = \"status\";\n})(QuestCompletionStatus_Update_Column || (QuestCompletionStatus_Update_Column = {}));\n\nexport let QuestRepetition_ActionEnum;\n/** aggregated selection of \"QuestRepetition\" */\n\n(function (QuestRepetition_ActionEnum) {\n  QuestRepetition_ActionEnum[\"Personal\"] = \"PERSONAL\";\n  QuestRepetition_ActionEnum[\"Recurring\"] = \"RECURRING\";\n  QuestRepetition_ActionEnum[\"Unique\"] = \"UNIQUE\";\n})(QuestRepetition_ActionEnum || (QuestRepetition_ActionEnum = {}));\n\n/** unique or primary key constraints on table \"QuestRepetition\" */\nexport let QuestRepetition_Constraint;\n\n(function (QuestRepetition_Constraint) {\n  QuestRepetition_Constraint[\"QuestRepetitionPkey\"] = \"QuestRepetition_pkey\";\n})(QuestRepetition_Constraint || (QuestRepetition_Constraint = {}));\n\nexport let QuestRepetition_Enum;\n/** expression to compare columns of type QuestRepetition_enum. All fields are combined with logical 'AND'. */\n\n(function (QuestRepetition_Enum) {\n  QuestRepetition_Enum[\"Personal\"] = \"PERSONAL\";\n  QuestRepetition_Enum[\"Recurring\"] = \"RECURRING\";\n  QuestRepetition_Enum[\"Unique\"] = \"UNIQUE\";\n})(QuestRepetition_Enum || (QuestRepetition_Enum = {}));\n\n/** select columns of table \"QuestRepetition\" */\nexport let QuestRepetition_Select_Column;\n/** input type for updating data in table \"QuestRepetition\" */\n\n(function (QuestRepetition_Select_Column) {\n  QuestRepetition_Select_Column[\"Repetition\"] = \"repetition\";\n})(QuestRepetition_Select_Column || (QuestRepetition_Select_Column = {}));\n\n/** update columns of table \"QuestRepetition\" */\nexport let QuestRepetition_Update_Column;\n/** columns and relationships of \"QuestStatus\" */\n\n(function (QuestRepetition_Update_Column) {\n  QuestRepetition_Update_Column[\"Repetition\"] = \"repetition\";\n})(QuestRepetition_Update_Column || (QuestRepetition_Update_Column = {}));\n\n/** unique or primary key constraints on table \"QuestStatus\" */\nexport let QuestStatus_Constraint;\n\n(function (QuestStatus_Constraint) {\n  QuestStatus_Constraint[\"QuestStatusPkey\"] = \"QuestStatus_pkey\";\n})(QuestStatus_Constraint || (QuestStatus_Constraint = {}));\n\nexport let QuestStatus_Enum;\n/** expression to compare columns of type QuestStatus_enum. All fields are combined with logical 'AND'. */\n\n(function (QuestStatus_Enum) {\n  QuestStatus_Enum[\"Closed\"] = \"CLOSED\";\n  QuestStatus_Enum[\"Open\"] = \"OPEN\";\n})(QuestStatus_Enum || (QuestStatus_Enum = {}));\n\n/** select columns of table \"QuestStatus\" */\nexport let QuestStatus_Select_Column;\n/** input type for updating data in table \"QuestStatus\" */\n\n(function (QuestStatus_Select_Column) {\n  QuestStatus_Select_Column[\"Status\"] = \"status\";\n})(QuestStatus_Select_Column || (QuestStatus_Select_Column = {}));\n\n/** update columns of table \"QuestStatus\" */\nexport let QuestStatus_Update_Column;\n/** columns and relationships of \"skill\" */\n\n(function (QuestStatus_Update_Column) {\n  QuestStatus_Update_Column[\"Status\"] = \"status\";\n})(QuestStatus_Update_Column || (QuestStatus_Update_Column = {}));\n\n/** unique or primary key constraints on table \"skill\" */\nexport let Skill_Constraint;\n/** input type for inserting data into table \"skill\" */\n\n(function (Skill_Constraint) {\n  Skill_Constraint[\"SkillPkey\"] = \"Skill_pkey\";\n})(Skill_Constraint || (Skill_Constraint = {}));\n\n/** select columns of table \"skill\" */\nexport let Skill_Select_Column;\n/** input type for updating data in table \"skill\" */\n\n(function (Skill_Select_Column) {\n  Skill_Select_Column[\"Category\"] = \"category\";\n  Skill_Select_Column[\"Id\"] = \"id\";\n  Skill_Select_Column[\"Name\"] = \"name\";\n})(Skill_Select_Column || (Skill_Select_Column = {}));\n\n/** update columns of table \"skill\" */\nexport let Skill_Update_Column;\n/** columns and relationships of \"SkillCategory\" */\n\n(function (Skill_Update_Column) {\n  Skill_Update_Column[\"Category\"] = \"category\";\n  Skill_Update_Column[\"Id\"] = \"id\";\n  Skill_Update_Column[\"Name\"] = \"name\";\n})(Skill_Update_Column || (Skill_Update_Column = {}));\n\n/** unique or primary key constraints on table \"SkillCategory\" */\nexport let SkillCategory_Constraint;\n\n(function (SkillCategory_Constraint) {\n  SkillCategory_Constraint[\"SkillCategoryPkey\"] = \"SkillCategory_pkey\";\n})(SkillCategory_Constraint || (SkillCategory_Constraint = {}));\n\nexport let SkillCategory_Enum;\n/** expression to compare columns of type SkillCategory_enum. All fields are combined with logical 'AND'. */\n\n(function (SkillCategory_Enum) {\n  SkillCategory_Enum[\"Community\"] = \"COMMUNITY\";\n  SkillCategory_Enum[\"Design\"] = \"DESIGN\";\n  SkillCategory_Enum[\"Dev\"] = \"DEV\";\n  SkillCategory_Enum[\"Engineering\"] = \"ENGINEERING\";\n  SkillCategory_Enum[\"Strategy\"] = \"STRATEGY\";\n  SkillCategory_Enum[\"Technologies\"] = \"TECHNOLOGIES\";\n})(SkillCategory_Enum || (SkillCategory_Enum = {}));\n\n/** select columns of table \"SkillCategory\" */\nexport let SkillCategory_Select_Column;\n/** input type for updating data in table \"SkillCategory\" */\n\n(function (SkillCategory_Select_Column) {\n  SkillCategory_Select_Column[\"Name\"] = \"name\";\n})(SkillCategory_Select_Column || (SkillCategory_Select_Column = {}));\n\n/** update columns of table \"SkillCategory\" */\nexport let SkillCategory_Update_Column;\n/** expression to compare columns of type String. All fields are combined with logical 'AND'. */\n\n(function (SkillCategory_Update_Column) {\n  SkillCategory_Update_Column[\"Name\"] = \"name\";\n})(SkillCategory_Update_Column || (SkillCategory_Update_Column = {}));\n\nexport const PlayerFragmentFragmentDoc = gql`\n    fragment PlayerFragment on player {\n  id\n  username\n  total_xp\n  rank\n  ethereum_address\n  availability_hours\n  timezone\n  ColorAspect {\n    name\n    description\n    mask\n  }\n  playerType {\n    description\n    id\n    imageUrl\n    title\n  }\n  Player_Skills {\n    Skill {\n      category\n      id\n      name\n    }\n  }\n  Accounts(where: {type: {_in: [TWITTER, GITHUB]}}) {\n    identifier\n    type\n  }\n  profile_cache {\n    description\n    emoji\n    backgroundImageURL\n    imageURL\n    location\n    name\n  }\n  daohausMemberships {\n    id\n    shares\n    molochAddress\n    moloch {\n      id\n      title\n      version\n      totalShares\n      chain\n    }\n  }\n  brightid_status {\n    unique\n    contextIds\n  }\n}\n    `;\nexport const GuildFragmentFragmentDoc = gql`\n    fragment GuildFragment on guild {\n  id\n  guildname\n  description\n  discord_invite_url\n  join_button_url\n  logo\n  moloch_address\n  name\n  type\n  position\n  website_url\n  github_url\n  twitter_url\n}\n    `;\nexport const QuestFragmentFragmentDoc = gql`\n    fragment QuestFragment on quest {\n  id\n  created_at\n  cooldown\n  description\n  external_link\n  guild_id\n  status\n  title\n  repetition\n  guild {\n    name\n    logo\n  }\n  player {\n    id\n    ethereum_address\n  }\n  quest_skills {\n    skill {\n      id\n      name\n      category\n    }\n  }\n}\n    `;\nexport const QuestCompletionFragmentFragmentDoc = gql`\n    fragment QuestCompletionFragment on quest_completion {\n  id\n  completed_by_player_id\n  status\n  submission_link\n  submission_text\n  submitted_at\n}\n    `;\nexport const QuestWithCompletionFragmentFragmentDoc = gql`\n    fragment QuestWithCompletionFragment on quest {\n  id\n  created_at\n  cooldown\n  description\n  external_link\n  guild_id\n  status\n  title\n  repetition\n  guild {\n    name\n    logo\n  }\n  quest_skills {\n    skill {\n      id\n      name\n      category\n    }\n  }\n  quest_completions(order_by: [{submitted_at: desc}]) {\n    ...QuestCompletionFragment\n    player {\n      id\n      ethereum_address\n      username\n    }\n  }\n}\n    ${QuestCompletionFragmentFragmentDoc}`;\nexport const TokenBalancesFragmentFragmentDoc = gql`\n    fragment TokenBalancesFragment on TokenBalances {\n  address: id\n  pSeedBalance\n}\n    `;\nexport const PlayerSkillFragmentFragmentDoc = gql`\n    fragment PlayerSkillFragment on skill {\n  id\n  name\n  category\n}\n    `;\nexport const GetGuildDocument = gql`\n    query GetGuild($guildname: String!) {\n  guild(where: {guildname: {_eq: $guildname}}) {\n    ...GuildFragment\n  }\n}\n    ${GuildFragmentFragmentDoc}`;\nexport function useGetGuildQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetGuildDocument\n  }, options));\n}\n;\nexport const GetGuildsDocument = gql`\n    query GetGuilds($limit: Int) {\n  guild(where: {status: {_eq: ACTIVE}}, limit: $limit) {\n    ...GuildFragment\n  }\n}\n    ${GuildFragmentFragmentDoc}`;\nexport function useGetGuildsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetGuildsDocument\n  }, options));\n}\n;\nexport const GetGuildnamesDocument = gql`\n    query GetGuildnames($limit: Int) {\n  guild(where: {status: {_eq: ACTIVE}}, limit: $limit) {\n    guildname\n  }\n}\n    `;\nexport function useGetGuildnamesQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetGuildnamesDocument\n  }, options));\n}\n;\nexport const GetMeDocument = gql`\n    query GetMe {\n  me {\n    id\n    ethereum_address\n    username\n    player {\n      ...PlayerFragment\n    }\n  }\n}\n    ${PlayerFragmentFragmentDoc}`;\nexport function useGetMeQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetMeDocument\n  }, options));\n}\n;\nexport const GetMembershipsDocument = gql`\n    query GetMemberships($address: String!) {\n  getDaoHausMemberships(memberAddress: $address) {\n    id\n    moloch {\n      id\n      title\n      version\n      chain\n    }\n  }\n}\n    `;\nexport function useGetMembershipsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetMembershipsDocument\n  }, options));\n}\n;\nexport const GetpSeedBalanceDocument = gql`\n    query GetpSeedBalance($address: String!) {\n  getTokenBalances(address: $address) {\n    ...TokenBalancesFragment\n  }\n}\n    ${TokenBalancesFragmentFragmentDoc}`;\nexport function useGetpSeedBalanceQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetpSeedBalanceDocument\n  }, options));\n}\n;\nexport const GetPatronsDocument = gql`\n    query GetPatrons($addresses: [String!], $limit: Int) {\n  player(where: {ethereum_address: {_in: $addresses}}, limit: $limit) {\n    ...PlayerFragment\n  }\n}\n    ${PlayerFragmentFragmentDoc}`;\nexport function useGetPatronsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetPatronsDocument\n  }, options));\n}\n;\nexport const GetpSeedHoldersDocument = gql`\n    query GetpSeedHolders($limit: Int) {\n  pSeedHolders: getTopPSeedHolders(limit: $limit) {\n    ...TokenBalancesFragment\n  }\n}\n    ${TokenBalancesFragmentFragmentDoc}`;\nexport function useGetpSeedHoldersQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetpSeedHoldersDocument\n  }, options));\n}\n;\nexport const GetAspectsDocument = gql`\n    query GetAspects {\n  ColorAspect {\n    mask\n    name\n    description\n  }\n}\n    `;\nexport function useGetAspectsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetAspectsDocument\n  }, options));\n}\n;\nexport const GetPlayerDocument = gql`\n    query GetPlayer($username: String!) {\n  player(where: {username: {_eq: $username}}) {\n    ...PlayerFragment\n  }\n}\n    ${PlayerFragmentFragmentDoc}`;\nexport function useGetPlayerQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetPlayerDocument\n  }, options));\n}\n;\nexport const GetPlayerTypesDocument = gql`\n    query GetPlayerTypes {\n  player_type {\n    description\n    id\n    title\n    imageUrl\n  }\n}\n    `;\nexport function useGetPlayerTypesQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetPlayerTypesDocument\n  }, options));\n}\n;\nexport const GetPlayersDocument = gql`\n    query GetPlayers($offset: Int, $limit: Int, $skillIds: [uuid!], $playerTypeIds: [Int!], $availability: Int, $timezones: [String!], $search: String) {\n  player(\n    order_by: {total_xp: desc}\n    offset: $offset\n    limit: $limit\n    where: {availability_hours: {_gte: $availability}, timezone: {_in: $timezones}, playerType: {id: {_in: $playerTypeIds}}, Player_Skills: {Skill: {id: {_in: $skillIds}}}, _or: [{username: {_ilike: $search}}, {ethereum_address: {_ilike: $search}}]}\n  ) {\n    ...PlayerFragment\n  }\n  player_aggregate(\n    where: {availability_hours: {_gte: $availability}, timezone: {_in: $timezones}, playerType: {id: {_in: $playerTypeIds}}, Player_Skills: {Skill: {id: {_in: $skillIds}}}, _or: [{username: {_ilike: $search}}, {ethereum_address: {_ilike: $search}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    ${PlayerFragmentFragmentDoc}`;\nexport function useGetPlayersQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetPlayersDocument\n  }, options));\n}\n;\nexport const GetPlayerUsernamesDocument = gql`\n    query GetPlayerUsernames($limit: Int) {\n  player(order_by: {total_xp: desc}, limit: $limit) {\n    username\n  }\n}\n    `;\nexport function useGetPlayerUsernamesQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetPlayerUsernamesDocument\n  }, options));\n}\n;\nexport const GetPlayerFiltersDocument = gql`\n    query GetPlayerFilters {\n  skill_aggregate(distinct_on: category) {\n    nodes {\n      name: category\n    }\n  }\n  skill(order_by: {Player_Skills_aggregate: {count: desc}, category: asc}) {\n    ...PlayerSkillFragment\n  }\n  player_type(distinct_on: id) {\n    value: id\n    label: title\n  }\n}\n    ${PlayerSkillFragmentFragmentDoc}`;\nexport function useGetPlayerFiltersQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetPlayerFiltersDocument\n  }, options));\n}\n;\nexport const GetQuestDocument = gql`\n    query GetQuest($id: uuid!) {\n  quest_by_pk(id: $id) {\n    ...QuestFragment\n  }\n}\n    ${QuestFragmentFragmentDoc}`;\nexport function useGetQuestQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetQuestDocument\n  }, options));\n}\n;\nexport const GetQuestWithCompletionsDocument = gql`\n    query GetQuestWithCompletions($id: uuid!) {\n  quest_by_pk(id: $id) {\n    ...QuestWithCompletionFragment\n    player {\n      ...PlayerFragment\n    }\n  }\n}\n    ${QuestWithCompletionFragmentFragmentDoc}\n${PlayerFragmentFragmentDoc}`;\nexport function useGetQuestWithCompletionsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetQuestWithCompletionsDocument\n  }, options));\n}\n;\nexport const GetQuestIdsDocument = gql`\n    query GetQuestIds($limit: Int) {\n  quest(limit: $limit, order_by: {created_at: desc}) {\n    id\n  }\n}\n    `;\nexport function useGetQuestIdsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetQuestIdsDocument\n  }, options));\n}\n;\nexport const GetQuestsDocument = gql`\n    query GetQuests($limit: Int, $status: QuestStatus_enum, $guild_id: uuid, $order: order_by, $created_by_player_id: uuid) {\n  quest(\n    limit: $limit\n    order_by: {created_at: $order}\n    where: {status: {_eq: $status}, guild_id: {_eq: $guild_id}, created_by_player_id: {_eq: $created_by_player_id}}\n  ) {\n    ...QuestFragment\n  }\n}\n    ${QuestFragmentFragmentDoc}`;\nexport function useGetQuestsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetQuestsDocument\n  }, options));\n}\n;\nexport const GetQuestGuildsDocument = gql`\n    query GetQuestGuilds {\n  quest_aggregate(distinct_on: guild_id) {\n    nodes {\n      guild_id\n      guild {\n        name\n      }\n    }\n  }\n}\n    `;\nexport function useGetQuestGuildsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetQuestGuildsDocument\n  }, options));\n}\n;\nexport const GetSkillsDocument = gql`\n    query GetSkills {\n  skill(order_by: {Player_Skills_aggregate: {count: desc}, category: asc}) {\n    ...PlayerSkillFragment\n  }\n}\n    ${PlayerSkillFragmentFragmentDoc}`;\nexport function useGetSkillsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetSkillsDocument\n  }, options));\n}\n;\nexport const CreateQuestDocument = gql`\n    mutation CreateQuest($input: CreateQuestInput!) {\n  createQuest(quest: $input) {\n    success\n    error\n    quest_id\n    quest {\n      id\n    }\n  }\n}\n    `;\nexport function useCreateQuestMutation() {\n  return Urql.useMutation(CreateQuestDocument);\n}\n;\nexport const CreateQuestCompletionDocument = gql`\n    mutation CreateQuestCompletion($input: CreateQuestCompletionInput!) {\n  createQuestCompletion(questCompletion: $input) {\n    success\n    error\n    quest_completion_id\n    quest_completion {\n      id\n      quest {\n        id\n      }\n    }\n  }\n}\n    `;\nexport function useCreateQuestCompletionMutation() {\n  return Urql.useMutation(CreateQuestCompletionDocument);\n}\n;\nexport const AuthenticateDiscordGuildDocument = gql`\n    mutation AuthenticateDiscordGuild($code: String!) {\n  authenticateDiscordGuild(code: $code) {\n    success\n    guildname\n    error\n    exists\n  }\n}\n    `;\nexport function useAuthenticateDiscordGuildMutation() {\n  return Urql.useMutation(AuthenticateDiscordGuildDocument);\n}\n;\nexport const InsertCacheInvalidationDocument = gql`\n    mutation InsertCacheInvalidation($playerId: uuid!) {\n  updateIDXProfile(playerId: $playerId) {\n    success\n    error\n  }\n}\n    `;\nexport function useInsertCacheInvalidationMutation() {\n  return Urql.useMutation(InsertCacheInvalidationDocument);\n}\n;\nexport const UpdatePlayerUsernameDocument = gql`\n    mutation UpdatePlayerUsername($playerId: uuid!, $username: String!) {\n  update_player_by_pk(pk_columns: {id: $playerId}, _set: {username: $username}) {\n    id\n    username\n  }\n}\n    `;\nexport function useUpdatePlayerUsernameMutation() {\n  return Urql.useMutation(UpdatePlayerUsernameDocument);\n}\n;\nexport const UpdateProfileDocument = gql`\n    mutation UpdateProfile($playerId: uuid!, $input: player_set_input!) {\n  update_player_by_pk(pk_columns: {id: $playerId}, _set: $input) {\n    id\n    availability_hours\n    timezone\n  }\n}\n    `;\nexport function useUpdateProfileMutation() {\n  return Urql.useMutation(UpdateProfileDocument);\n}\n;\nexport const UpdateAboutYouDocument = gql`\n    mutation UpdateAboutYou($playerId: uuid!, $input: player_set_input!) {\n  update_player_by_pk(pk_columns: {id: $playerId}, _set: $input) {\n    color_mask\n    playerType {\n      description\n      id\n      imageUrl\n      title\n    }\n    id\n  }\n}\n    `;\nexport function useUpdateAboutYouMutation() {\n  return Urql.useMutation(UpdateAboutYouDocument);\n}\n;\nexport const UpdatePlayerSkillsDocument = gql`\n    mutation UpdatePlayerSkills($skills: [player_skill_insert_input!]!) {\n  delete_player_skill(where: {}) {\n    affected_rows\n  }\n  insert_player_skill(objects: $skills) {\n    affected_rows\n  }\n}\n    `;\nexport function useUpdatePlayerSkillsMutation() {\n  return Urql.useMutation(UpdatePlayerSkillsDocument);\n}\n;\nexport const UpdateQuestDocument = gql`\n    mutation UpdateQuest($id: uuid!, $input: quest_set_input!, $skills: [quest_skill_insert_input!]!) {\n  update_quest_by_pk(pk_columns: {id: $id}, _set: $input) {\n    id\n  }\n  delete_quest_skill(where: {quest_id: {_eq: $id}}) {\n    affected_rows\n  }\n  insert_quest_skill(objects: $skills) {\n    affected_rows\n    returning {\n      quest_id\n      skill_id\n    }\n  }\n}\n    `;\nexport function useUpdateQuestMutation() {\n  return Urql.useMutation(UpdateQuestDocument);\n}\n;\nexport const UpdateQuestCompletionDocument = gql`\n    mutation UpdateQuestCompletion($quest_completion_id: String!, $status: QuestCompletionStatus_ActionEnum!) {\n  updateQuestCompletion(\n    updateData: {quest_completion_id: $quest_completion_id, status: $status}\n  ) {\n    error\n    success\n    quest_completion_id\n    quest_completion {\n      id\n    }\n  }\n}\n    `;\nexport function useUpdateQuestCompletionMutation() {\n  return Urql.useMutation(UpdateQuestCompletionDocument);\n}\n;","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/graphql/autogen/types.tsx"],"names":["gql","Urql","AccountType_Constraint","AccountType_Enum","AccountType_Select_Column","AccountType_Update_Column","ColorAspect_Constraint","ColorAspect_Select_Column","ColorAspect_Update_Column","Guild_Account_Constraint","Guild_Account_Select_Column","Guild_Account_Update_Column","Guild_Constraint","Guild_Player_Constraint","Guild_Player_Select_Column","Guild_Player_Update_Column","Guild_Select_Column","Guild_Update_Column","GuildPosition_Constraint","GuildPosition_Enum","GuildPosition_Select_Column","GuildPosition_Update_Column","GuildStatus_Constraint","GuildStatus_Enum","GuildStatus_Select_Column","GuildStatus_Update_Column","GuildType_Constraint","GuildType_Enum","GuildType_Select_Column","GuildType_Update_Column","Me_Select_Column","Order_By","Player_Account_Constraint","Player_Account_Select_Column","Player_Account_Update_Column","Player_Constraint","Player_Select_Column","Player_Skill_Constraint","Player_Skill_Select_Column","Player_Skill_Update_Column","Player_Type_Constraint","Player_Type_Select_Column","Player_Type_Update_Column","Player_Update_Column","PlayerRank_Constraint","PlayerRank_Enum","PlayerRank_Select_Column","PlayerRank_Update_Column","Profile_Cache_Constraint","Profile_Cache_Select_Column","Profile_Cache_Update_Column","Quest_Completion_Constraint","Quest_Completion_Select_Column","Quest_Completion_Update_Column","Quest_Constraint","Quest_Select_Column","Quest_Skill_Constraint","Quest_Skill_Select_Column","Quest_Skill_Update_Column","Quest_Update_Column","QuestCompletionStatus_ActionEnum","QuestCompletionStatus_Constraint","QuestCompletionStatus_Enum","QuestCompletionStatus_Select_Column","QuestCompletionStatus_Update_Column","QuestRepetition_ActionEnum","QuestRepetition_Constraint","QuestRepetition_Enum","QuestRepetition_Select_Column","QuestRepetition_Update_Column","QuestStatus_Constraint","QuestStatus_Enum","QuestStatus_Select_Column","QuestStatus_Update_Column","Skill_Constraint","Skill_Select_Column","Skill_Update_Column","SkillCategory_Constraint","SkillCategory_Enum","SkillCategory_Select_Column","SkillCategory_Update_Column","PlayerFragmentFragmentDoc","GuildFragmentFragmentDoc","QuestFragmentFragmentDoc","QuestCompletionFragmentFragmentDoc","QuestWithCompletionFragmentFragmentDoc","TokenBalancesFragmentFragmentDoc","PlayerSkillFragmentFragmentDoc","GetGuildDocument","useGetGuildQuery","options","useQuery","query","GetGuildsDocument","useGetGuildsQuery","GetGuildnamesDocument","useGetGuildnamesQuery","GetMeDocument","useGetMeQuery","GetMembershipsDocument","useGetMembershipsQuery","GetpSeedBalanceDocument","useGetpSeedBalanceQuery","GetPatronsDocument","useGetPatronsQuery","GetpSeedHoldersDocument","useGetpSeedHoldersQuery","GetAspectsDocument","useGetAspectsQuery","GetPlayerDocument","useGetPlayerQuery","GetPlayerTypesDocument","useGetPlayerTypesQuery","GetPlayersDocument","useGetPlayersQuery","GetPlayerUsernamesDocument","useGetPlayerUsernamesQuery","GetPlayerFiltersDocument","useGetPlayerFiltersQuery","GetQuestDocument","useGetQuestQuery","GetQuestWithCompletionsDocument","useGetQuestWithCompletionsQuery","GetQuestIdsDocument","useGetQuestIdsQuery","GetQuestsDocument","useGetQuestsQuery","GetQuestGuildsDocument","useGetQuestGuildsQuery","GetSkillsDocument","useGetSkillsQuery","CreateQuestDocument","useCreateQuestMutation","useMutation","CreateQuestCompletionDocument","useCreateQuestCompletionMutation","AuthenticateDiscordGuildDocument","useAuthenticateDiscordGuildMutation","InsertCacheInvalidationDocument","useInsertCacheInvalidationMutation","UpdatePlayerUsernameDocument","useUpdatePlayerUsernameMutation","UpdateProfileDocument","useUpdateProfileMutation","UpdateAboutYouDocument","useUpdateAboutYouMutation","UpdatePlayerSkillsDocument","useUpdatePlayerSkillsMutation","UpdateQuestDocument","useUpdateQuestMutation","UpdateQuestCompletionDocument","useUpdateQuestCompletionMutation"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAxDO;AAyDP,OAAO,MAAMkF,wBAAwB,GAAGlF,GAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAhBO;AAiBP,OAAO,MAAMmF,wBAAwB,GAAGnF,GAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA3BO;AA4BP,OAAO,MAAMoF,kCAAkC,GAAGpF,GAAI;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KATO;AAUP,OAAO,MAAMqF,sCAAsC,GAAGrF,GAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoF,kCAAmC,EA/BlC;AAgCP,OAAO,MAAME,gCAAgC,GAAGtF,GAAI;AACpD;AACA;AACA;AACA;AACA,KALO;AAMP,OAAO,MAAMuF,8BAA8B,GAAGvF,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA,KANO;AAOP,OAAO,MAAMwF,gBAAgB,GAAGxF,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA,MAAMkF,wBAAyB,EANxB;AAQP,OAAO,SAASO,gBAAT,CAA0BC,OAAiE,GAAG,EAA9F,EAAkG;AACvG,SAAOzF,IAAI,CAAC0F,QAAL;AAA+BC,IAAAA,KAAK,EAAEJ;AAAtC,KAA2DE,OAA3D,EAAP;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","sourcesContent":["/* eslint-disable */\nimport gql from 'fake-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  json: any;\n  jsonb: any;\n  numeric: any;\n  timestamptz: any;\n  uuid: any;\n};\n\n/** columns and relationships of \"AccountType\" */\nexport type AccountType = {\n  type: Scalars['String'];\n};\n\n/** aggregated selection of \"AccountType\" */\nexport type AccountType_Aggregate = {\n  aggregate?: Maybe<AccountType_Aggregate_Fields>;\n  nodes: Array<AccountType>;\n};\n\n/** aggregate fields of \"AccountType\" */\nexport type AccountType_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<AccountType_Max_Fields>;\n  min?: Maybe<AccountType_Min_Fields>;\n};\n\n\n/** aggregate fields of \"AccountType\" */\nexport type AccountType_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<AccountType_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"AccountType\" */\nexport type AccountType_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<AccountType_Max_Order_By>;\n  min?: Maybe<AccountType_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"AccountType\" */\nexport type AccountType_Arr_Rel_Insert_Input = {\n  data: Array<AccountType_Insert_Input>;\n  on_conflict?: Maybe<AccountType_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"AccountType\". All fields are combined with a logical 'AND'. */\nexport type AccountType_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<AccountType_Bool_Exp>>>;\n  _not?: Maybe<AccountType_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<AccountType_Bool_Exp>>>;\n  type?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"AccountType\" */\nexport enum AccountType_Constraint {\n  /** unique or primary key constraint */\n  AccountTypePkey = 'AccountType_pkey'\n}\n\nexport enum AccountType_Enum {\n  Discord = 'DISCORD',\n  Discourse = 'DISCOURSE',\n  Ethereum = 'ETHEREUM',\n  Github = 'GITHUB',\n  Twitter = 'TWITTER'\n}\n\n/** expression to compare columns of type AccountType_enum. All fields are combined with logical 'AND'. */\nexport type AccountType_Enum_Comparison_Exp = {\n  _eq?: Maybe<AccountType_Enum>;\n  _in?: Maybe<Array<AccountType_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<AccountType_Enum>;\n  _nin?: Maybe<Array<AccountType_Enum>>;\n};\n\n/** input type for inserting data into table \"AccountType\" */\nexport type AccountType_Insert_Input = {\n  type?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type AccountType_Max_Fields = {\n  type?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"AccountType\" */\nexport type AccountType_Max_Order_By = {\n  type?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type AccountType_Min_Fields = {\n  type?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"AccountType\" */\nexport type AccountType_Min_Order_By = {\n  type?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"AccountType\" */\nexport type AccountType_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<AccountType>;\n};\n\n/** input type for inserting object relation for remote table \"AccountType\" */\nexport type AccountType_Obj_Rel_Insert_Input = {\n  data: AccountType_Insert_Input;\n  on_conflict?: Maybe<AccountType_On_Conflict>;\n};\n\n/** on conflict condition type for table \"AccountType\" */\nexport type AccountType_On_Conflict = {\n  constraint: AccountType_Constraint;\n  update_columns: Array<AccountType_Update_Column>;\n  where?: Maybe<AccountType_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"AccountType\" */\nexport type AccountType_Order_By = {\n  type?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"AccountType\" */\nexport type AccountType_Pk_Columns_Input = {\n  type: Scalars['String'];\n};\n\n/** select columns of table \"AccountType\" */\nexport enum AccountType_Select_Column {\n  /** column name */\n  Type = 'type'\n}\n\n/** input type for updating data in table \"AccountType\" */\nexport type AccountType_Set_Input = {\n  type?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"AccountType\" */\nexport enum AccountType_Update_Column {\n  /** column name */\n  Type = 'type'\n}\n\nexport type BoxProfile = {\n  collectiblesFavorites?: Maybe<Array<CollectiblesFavorites>>;\n  coverImageURL?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  emoji?: Maybe<Scalars['String']>;\n  ethereumAddress?: Maybe<Scalars['String']>;\n  imageURL?: Maybe<Scalars['String']>;\n  job?: Maybe<Scalars['String']>;\n  location?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  website?: Maybe<Scalars['String']>;\n};\n\nexport type BrightIdStatus = {\n  app: Scalars['String'];\n  context: Scalars['String'];\n  contextIds: Array<Scalars['String']>;\n  unique: Scalars['Boolean'];\n};\n\nexport type CacheProcessOutput = {\n  error?: Maybe<Scalars['String']>;\n  success: Scalars['Boolean'];\n};\n\nexport type CollectiblesFavorites = {\n  address?: Maybe<Scalars['String']>;\n  tokenId?: Maybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"ColorAspect\" */\nexport type ColorAspect = {\n  description?: Maybe<Scalars['String']>;\n  mask: Scalars['Int'];\n  name: Scalars['String'];\n  /** An array relationship */\n  players: Array<Player>;\n  /** An aggregated array relationship */\n  players_aggregate: Player_Aggregate;\n};\n\n\n/** columns and relationships of \"ColorAspect\" */\nexport type ColorAspectPlayersArgs = {\n  distinct_on?: Maybe<Array<Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Order_By>>;\n  where?: Maybe<Player_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"ColorAspect\" */\nexport type ColorAspectPlayers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Order_By>>;\n  where?: Maybe<Player_Bool_Exp>;\n};\n\n/** aggregated selection of \"ColorAspect\" */\nexport type ColorAspect_Aggregate = {\n  aggregate?: Maybe<ColorAspect_Aggregate_Fields>;\n  nodes: Array<ColorAspect>;\n};\n\n/** aggregate fields of \"ColorAspect\" */\nexport type ColorAspect_Aggregate_Fields = {\n  avg?: Maybe<ColorAspect_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<ColorAspect_Max_Fields>;\n  min?: Maybe<ColorAspect_Min_Fields>;\n  stddev?: Maybe<ColorAspect_Stddev_Fields>;\n  stddev_pop?: Maybe<ColorAspect_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<ColorAspect_Stddev_Samp_Fields>;\n  sum?: Maybe<ColorAspect_Sum_Fields>;\n  var_pop?: Maybe<ColorAspect_Var_Pop_Fields>;\n  var_samp?: Maybe<ColorAspect_Var_Samp_Fields>;\n  variance?: Maybe<ColorAspect_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"ColorAspect\" */\nexport type ColorAspect_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<ColorAspect_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"ColorAspect\" */\nexport type ColorAspect_Aggregate_Order_By = {\n  avg?: Maybe<ColorAspect_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<ColorAspect_Max_Order_By>;\n  min?: Maybe<ColorAspect_Min_Order_By>;\n  stddev?: Maybe<ColorAspect_Stddev_Order_By>;\n  stddev_pop?: Maybe<ColorAspect_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<ColorAspect_Stddev_Samp_Order_By>;\n  sum?: Maybe<ColorAspect_Sum_Order_By>;\n  var_pop?: Maybe<ColorAspect_Var_Pop_Order_By>;\n  var_samp?: Maybe<ColorAspect_Var_Samp_Order_By>;\n  variance?: Maybe<ColorAspect_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"ColorAspect\" */\nexport type ColorAspect_Arr_Rel_Insert_Input = {\n  data: Array<ColorAspect_Insert_Input>;\n  on_conflict?: Maybe<ColorAspect_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type ColorAspect_Avg_Fields = {\n  mask?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"ColorAspect\" */\nexport type ColorAspect_Avg_Order_By = {\n  mask?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"ColorAspect\". All fields are combined with a logical 'AND'. */\nexport type ColorAspect_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<ColorAspect_Bool_Exp>>>;\n  _not?: Maybe<ColorAspect_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<ColorAspect_Bool_Exp>>>;\n  description?: Maybe<String_Comparison_Exp>;\n  mask?: Maybe<Int_Comparison_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  players?: Maybe<Player_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"ColorAspect\" */\nexport enum ColorAspect_Constraint {\n  /** unique or primary key constraint */\n  ColorAspectNameKey = 'ColorAspect_name_key',\n  /** unique or primary key constraint */\n  ColorAspectPkey = 'ColorAspect_pkey'\n}\n\n/** input type for incrementing integer column in table \"ColorAspect\" */\nexport type ColorAspect_Inc_Input = {\n  mask?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"ColorAspect\" */\nexport type ColorAspect_Insert_Input = {\n  description?: Maybe<Scalars['String']>;\n  mask?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  players?: Maybe<Player_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type ColorAspect_Max_Fields = {\n  description?: Maybe<Scalars['String']>;\n  mask?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"ColorAspect\" */\nexport type ColorAspect_Max_Order_By = {\n  description?: Maybe<Order_By>;\n  mask?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type ColorAspect_Min_Fields = {\n  description?: Maybe<Scalars['String']>;\n  mask?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"ColorAspect\" */\nexport type ColorAspect_Min_Order_By = {\n  description?: Maybe<Order_By>;\n  mask?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"ColorAspect\" */\nexport type ColorAspect_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<ColorAspect>;\n};\n\n/** input type for inserting object relation for remote table \"ColorAspect\" */\nexport type ColorAspect_Obj_Rel_Insert_Input = {\n  data: ColorAspect_Insert_Input;\n  on_conflict?: Maybe<ColorAspect_On_Conflict>;\n};\n\n/** on conflict condition type for table \"ColorAspect\" */\nexport type ColorAspect_On_Conflict = {\n  constraint: ColorAspect_Constraint;\n  update_columns: Array<ColorAspect_Update_Column>;\n  where?: Maybe<ColorAspect_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"ColorAspect\" */\nexport type ColorAspect_Order_By = {\n  description?: Maybe<Order_By>;\n  mask?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  players_aggregate?: Maybe<Player_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: \"ColorAspect\" */\nexport type ColorAspect_Pk_Columns_Input = {\n  mask: Scalars['Int'];\n};\n\n/** select columns of table \"ColorAspect\" */\nexport enum ColorAspect_Select_Column {\n  /** column name */\n  Description = 'description',\n  /** column name */\n  Mask = 'mask',\n  /** column name */\n  Name = 'name'\n}\n\n/** input type for updating data in table \"ColorAspect\" */\nexport type ColorAspect_Set_Input = {\n  description?: Maybe<Scalars['String']>;\n  mask?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type ColorAspect_Stddev_Fields = {\n  mask?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"ColorAspect\" */\nexport type ColorAspect_Stddev_Order_By = {\n  mask?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type ColorAspect_Stddev_Pop_Fields = {\n  mask?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"ColorAspect\" */\nexport type ColorAspect_Stddev_Pop_Order_By = {\n  mask?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type ColorAspect_Stddev_Samp_Fields = {\n  mask?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"ColorAspect\" */\nexport type ColorAspect_Stddev_Samp_Order_By = {\n  mask?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type ColorAspect_Sum_Fields = {\n  mask?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"ColorAspect\" */\nexport type ColorAspect_Sum_Order_By = {\n  mask?: Maybe<Order_By>;\n};\n\n/** update columns of table \"ColorAspect\" */\nexport enum ColorAspect_Update_Column {\n  /** column name */\n  Description = 'description',\n  /** column name */\n  Mask = 'mask',\n  /** column name */\n  Name = 'name'\n}\n\n/** aggregate var_pop on columns */\nexport type ColorAspect_Var_Pop_Fields = {\n  mask?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"ColorAspect\" */\nexport type ColorAspect_Var_Pop_Order_By = {\n  mask?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type ColorAspect_Var_Samp_Fields = {\n  mask?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"ColorAspect\" */\nexport type ColorAspect_Var_Samp_Order_By = {\n  mask?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type ColorAspect_Variance_Fields = {\n  mask?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"ColorAspect\" */\nexport type ColorAspect_Variance_Order_By = {\n  mask?: Maybe<Order_By>;\n};\n\nexport type CreateQuestCompletionInput = {\n  quest_id: Scalars['String'];\n  submission_link?: Maybe<Scalars['String']>;\n  submission_text?: Maybe<Scalars['String']>;\n};\n\nexport type CreateQuestCompletionOutput = {\n  error?: Maybe<Scalars['String']>;\n  quest_completion?: Maybe<Quest_Completion>;\n  quest_completion_id?: Maybe<Scalars['uuid']>;\n  success: Scalars['Boolean'];\n};\n\nexport type CreateQuestInput = {\n  cooldown?: Maybe<Scalars['Int']>;\n  description?: Maybe<Scalars['String']>;\n  external_link?: Maybe<Scalars['String']>;\n  guild_id: Scalars['uuid'];\n  repetition?: Maybe<QuestRepetition_ActionEnum>;\n  skills_id: Array<Maybe<Scalars['uuid']>>;\n  title: Scalars['String'];\n};\n\nexport type CreateQuestOutput = {\n  error?: Maybe<Scalars['String']>;\n  quest?: Maybe<Quest>;\n  quest_id?: Maybe<Scalars['uuid']>;\n  success: Scalars['Boolean'];\n};\n\nexport type DiscordGuildAuthResponse = {\n  error?: Maybe<Scalars['String']>;\n  exists?: Maybe<Scalars['Boolean']>;\n  guildname?: Maybe<Scalars['String']>;\n  success: Scalars['Boolean'];\n};\n\nexport type ExpiredPlayerProfiles = {\n  ids: Array<Maybe<Scalars['String']>>;\n};\n\n/** columns and relationships of \"guild\" */\nexport type Guild = {\n  /** An object relationship */\n  GuildType: GuildType;\n  description?: Maybe<Scalars['String']>;\n  discord_id?: Maybe<Scalars['String']>;\n  discord_invite_url?: Maybe<Scalars['String']>;\n  discord_metadata?: Maybe<Scalars['jsonb']>;\n  github_url?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  guild_accounts: Array<Guild_Account>;\n  /** An aggregated array relationship */\n  guild_accounts_aggregate: Guild_Account_Aggregate;\n  /** An array relationship */\n  guild_players: Array<Guild_Player>;\n  /** An aggregated array relationship */\n  guild_players_aggregate: Guild_Player_Aggregate;\n  /** Unique friendly identifier for the Guild (used in URL) */\n  guildname: Scalars['String'];\n  id: Scalars['uuid'];\n  join_button_url?: Maybe<Scalars['String']>;\n  logo?: Maybe<Scalars['String']>;\n  moloch_address?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  position?: Maybe<GuildPosition_Enum>;\n  /** An array relationship */\n  quests: Array<Quest>;\n  /** An aggregated array relationship */\n  quests_aggregate: Quest_Aggregate;\n  status: GuildStatus_Enum;\n  twitter_url?: Maybe<Scalars['String']>;\n  /** The area of focus for the guild (e.g. funding, project, etc) */\n  type: GuildType_Enum;\n  website_url?: Maybe<Scalars['String']>;\n};\n\n\n/** columns and relationships of \"guild\" */\nexport type GuildDiscord_MetadataArgs = {\n  path?: Maybe<Scalars['String']>;\n};\n\n\n/** columns and relationships of \"guild\" */\nexport type GuildGuild_AccountsArgs = {\n  distinct_on?: Maybe<Array<Guild_Account_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Account_Order_By>>;\n  where?: Maybe<Guild_Account_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"guild\" */\nexport type GuildGuild_Accounts_AggregateArgs = {\n  distinct_on?: Maybe<Array<Guild_Account_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Account_Order_By>>;\n  where?: Maybe<Guild_Account_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"guild\" */\nexport type GuildGuild_PlayersArgs = {\n  distinct_on?: Maybe<Array<Guild_Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Player_Order_By>>;\n  where?: Maybe<Guild_Player_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"guild\" */\nexport type GuildGuild_Players_AggregateArgs = {\n  distinct_on?: Maybe<Array<Guild_Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Player_Order_By>>;\n  where?: Maybe<Guild_Player_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"guild\" */\nexport type GuildQuestsArgs = {\n  distinct_on?: Maybe<Array<Quest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Order_By>>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"guild\" */\nexport type GuildQuests_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Order_By>>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\n/** columns and relationships of \"guild_account\" */\nexport type Guild_Account = {\n  /** An object relationship */\n  AccountType: AccountType;\n  /** An object relationship */\n  Guild: Guild;\n  guild_id: Scalars['uuid'];\n  identifier: Scalars['String'];\n  type: AccountType_Enum;\n};\n\n/** aggregated selection of \"guild_account\" */\nexport type Guild_Account_Aggregate = {\n  aggregate?: Maybe<Guild_Account_Aggregate_Fields>;\n  nodes: Array<Guild_Account>;\n};\n\n/** aggregate fields of \"guild_account\" */\nexport type Guild_Account_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Guild_Account_Max_Fields>;\n  min?: Maybe<Guild_Account_Min_Fields>;\n};\n\n\n/** aggregate fields of \"guild_account\" */\nexport type Guild_Account_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Guild_Account_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"guild_account\" */\nexport type Guild_Account_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Guild_Account_Max_Order_By>;\n  min?: Maybe<Guild_Account_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"guild_account\" */\nexport type Guild_Account_Arr_Rel_Insert_Input = {\n  data: Array<Guild_Account_Insert_Input>;\n  on_conflict?: Maybe<Guild_Account_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"guild_account\". All fields are combined with a logical 'AND'. */\nexport type Guild_Account_Bool_Exp = {\n  AccountType?: Maybe<AccountType_Bool_Exp>;\n  Guild?: Maybe<Guild_Bool_Exp>;\n  _and?: Maybe<Array<Maybe<Guild_Account_Bool_Exp>>>;\n  _not?: Maybe<Guild_Account_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Guild_Account_Bool_Exp>>>;\n  guild_id?: Maybe<Uuid_Comparison_Exp>;\n  identifier?: Maybe<String_Comparison_Exp>;\n  type?: Maybe<AccountType_Enum_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"guild_account\" */\nexport enum Guild_Account_Constraint {\n  /** unique or primary key constraint */\n  GuildAccountPkey = 'guild_account_pkey',\n  /** unique or primary key constraint */\n  GuildAccountTypeIdentifierKey = 'guild_account_type_identifier_key'\n}\n\n/** input type for inserting data into table \"guild_account\" */\nexport type Guild_Account_Insert_Input = {\n  AccountType?: Maybe<AccountType_Obj_Rel_Insert_Input>;\n  Guild?: Maybe<Guild_Obj_Rel_Insert_Input>;\n  guild_id?: Maybe<Scalars['uuid']>;\n  identifier?: Maybe<Scalars['String']>;\n  type?: Maybe<AccountType_Enum>;\n};\n\n/** aggregate max on columns */\nexport type Guild_Account_Max_Fields = {\n  guild_id?: Maybe<Scalars['uuid']>;\n  identifier?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"guild_account\" */\nexport type Guild_Account_Max_Order_By = {\n  guild_id?: Maybe<Order_By>;\n  identifier?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Guild_Account_Min_Fields = {\n  guild_id?: Maybe<Scalars['uuid']>;\n  identifier?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"guild_account\" */\nexport type Guild_Account_Min_Order_By = {\n  guild_id?: Maybe<Order_By>;\n  identifier?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"guild_account\" */\nexport type Guild_Account_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Guild_Account>;\n};\n\n/** input type for inserting object relation for remote table \"guild_account\" */\nexport type Guild_Account_Obj_Rel_Insert_Input = {\n  data: Guild_Account_Insert_Input;\n  on_conflict?: Maybe<Guild_Account_On_Conflict>;\n};\n\n/** on conflict condition type for table \"guild_account\" */\nexport type Guild_Account_On_Conflict = {\n  constraint: Guild_Account_Constraint;\n  update_columns: Array<Guild_Account_Update_Column>;\n  where?: Maybe<Guild_Account_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"guild_account\" */\nexport type Guild_Account_Order_By = {\n  AccountType?: Maybe<AccountType_Order_By>;\n  Guild?: Maybe<Guild_Order_By>;\n  guild_id?: Maybe<Order_By>;\n  identifier?: Maybe<Order_By>;\n  type?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"guild_account\" */\nexport type Guild_Account_Pk_Columns_Input = {\n  guild_id: Scalars['uuid'];\n  type: AccountType_Enum;\n};\n\n/** select columns of table \"guild_account\" */\nexport enum Guild_Account_Select_Column {\n  /** column name */\n  GuildId = 'guild_id',\n  /** column name */\n  Identifier = 'identifier',\n  /** column name */\n  Type = 'type'\n}\n\n/** input type for updating data in table \"guild_account\" */\nexport type Guild_Account_Set_Input = {\n  guild_id?: Maybe<Scalars['uuid']>;\n  identifier?: Maybe<Scalars['String']>;\n  type?: Maybe<AccountType_Enum>;\n};\n\n/** update columns of table \"guild_account\" */\nexport enum Guild_Account_Update_Column {\n  /** column name */\n  GuildId = 'guild_id',\n  /** column name */\n  Identifier = 'identifier',\n  /** column name */\n  Type = 'type'\n}\n\n/** aggregated selection of \"guild\" */\nexport type Guild_Aggregate = {\n  aggregate?: Maybe<Guild_Aggregate_Fields>;\n  nodes: Array<Guild>;\n};\n\n/** aggregate fields of \"guild\" */\nexport type Guild_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Guild_Max_Fields>;\n  min?: Maybe<Guild_Min_Fields>;\n};\n\n\n/** aggregate fields of \"guild\" */\nexport type Guild_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Guild_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"guild\" */\nexport type Guild_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Guild_Max_Order_By>;\n  min?: Maybe<Guild_Min_Order_By>;\n};\n\n/** append existing jsonb value of filtered columns with new jsonb value */\nexport type Guild_Append_Input = {\n  discord_metadata?: Maybe<Scalars['jsonb']>;\n};\n\n/** input type for inserting array relation for remote table \"guild\" */\nexport type Guild_Arr_Rel_Insert_Input = {\n  data: Array<Guild_Insert_Input>;\n  on_conflict?: Maybe<Guild_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"guild\". All fields are combined with a logical 'AND'. */\nexport type Guild_Bool_Exp = {\n  GuildType?: Maybe<GuildType_Bool_Exp>;\n  _and?: Maybe<Array<Maybe<Guild_Bool_Exp>>>;\n  _not?: Maybe<Guild_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Guild_Bool_Exp>>>;\n  description?: Maybe<String_Comparison_Exp>;\n  discord_id?: Maybe<String_Comparison_Exp>;\n  discord_invite_url?: Maybe<String_Comparison_Exp>;\n  discord_metadata?: Maybe<Jsonb_Comparison_Exp>;\n  github_url?: Maybe<String_Comparison_Exp>;\n  guild_accounts?: Maybe<Guild_Account_Bool_Exp>;\n  guild_players?: Maybe<Guild_Player_Bool_Exp>;\n  guildname?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  join_button_url?: Maybe<String_Comparison_Exp>;\n  logo?: Maybe<String_Comparison_Exp>;\n  moloch_address?: Maybe<String_Comparison_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  position?: Maybe<GuildPosition_Enum_Comparison_Exp>;\n  quests?: Maybe<Quest_Bool_Exp>;\n  status?: Maybe<GuildStatus_Enum_Comparison_Exp>;\n  twitter_url?: Maybe<String_Comparison_Exp>;\n  type?: Maybe<GuildType_Enum_Comparison_Exp>;\n  website_url?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"guild\" */\nexport enum Guild_Constraint {\n  /** unique or primary key constraint */\n  GuildGuildnameKey = 'Guild_guildname_key',\n  /** unique or primary key constraint */\n  GuildPkey = 'Guild_pkey',\n  /** unique or primary key constraint */\n  GuildDiscordIdKey = 'guild_discord_id_key'\n}\n\n/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */\nexport type Guild_Delete_At_Path_Input = {\n  discord_metadata?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\n/**\n * delete the array element with specified index (negative integers count from the\n * end). throws an error if top level container is not an array\n */\nexport type Guild_Delete_Elem_Input = {\n  discord_metadata?: Maybe<Scalars['Int']>;\n};\n\n/** delete key/value pair or string element. key/value pairs are matched based on their key value */\nexport type Guild_Delete_Key_Input = {\n  discord_metadata?: Maybe<Scalars['String']>;\n};\n\n/** input type for inserting data into table \"guild\" */\nexport type Guild_Insert_Input = {\n  GuildType?: Maybe<GuildType_Obj_Rel_Insert_Input>;\n  description?: Maybe<Scalars['String']>;\n  discord_id?: Maybe<Scalars['String']>;\n  discord_invite_url?: Maybe<Scalars['String']>;\n  discord_metadata?: Maybe<Scalars['jsonb']>;\n  github_url?: Maybe<Scalars['String']>;\n  guild_accounts?: Maybe<Guild_Account_Arr_Rel_Insert_Input>;\n  guild_players?: Maybe<Guild_Player_Arr_Rel_Insert_Input>;\n  guildname?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  join_button_url?: Maybe<Scalars['String']>;\n  logo?: Maybe<Scalars['String']>;\n  moloch_address?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  position?: Maybe<GuildPosition_Enum>;\n  quests?: Maybe<Quest_Arr_Rel_Insert_Input>;\n  status?: Maybe<GuildStatus_Enum>;\n  twitter_url?: Maybe<Scalars['String']>;\n  type?: Maybe<GuildType_Enum>;\n  website_url?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Guild_Max_Fields = {\n  description?: Maybe<Scalars['String']>;\n  discord_id?: Maybe<Scalars['String']>;\n  discord_invite_url?: Maybe<Scalars['String']>;\n  github_url?: Maybe<Scalars['String']>;\n  guildname?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  join_button_url?: Maybe<Scalars['String']>;\n  logo?: Maybe<Scalars['String']>;\n  moloch_address?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  twitter_url?: Maybe<Scalars['String']>;\n  website_url?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"guild\" */\nexport type Guild_Max_Order_By = {\n  description?: Maybe<Order_By>;\n  discord_id?: Maybe<Order_By>;\n  discord_invite_url?: Maybe<Order_By>;\n  github_url?: Maybe<Order_By>;\n  guildname?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  join_button_url?: Maybe<Order_By>;\n  logo?: Maybe<Order_By>;\n  moloch_address?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  twitter_url?: Maybe<Order_By>;\n  website_url?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Guild_Min_Fields = {\n  description?: Maybe<Scalars['String']>;\n  discord_id?: Maybe<Scalars['String']>;\n  discord_invite_url?: Maybe<Scalars['String']>;\n  github_url?: Maybe<Scalars['String']>;\n  guildname?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  join_button_url?: Maybe<Scalars['String']>;\n  logo?: Maybe<Scalars['String']>;\n  moloch_address?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  twitter_url?: Maybe<Scalars['String']>;\n  website_url?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"guild\" */\nexport type Guild_Min_Order_By = {\n  description?: Maybe<Order_By>;\n  discord_id?: Maybe<Order_By>;\n  discord_invite_url?: Maybe<Order_By>;\n  github_url?: Maybe<Order_By>;\n  guildname?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  join_button_url?: Maybe<Order_By>;\n  logo?: Maybe<Order_By>;\n  moloch_address?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  twitter_url?: Maybe<Order_By>;\n  website_url?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"guild\" */\nexport type Guild_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Guild>;\n};\n\n/** input type for inserting object relation for remote table \"guild\" */\nexport type Guild_Obj_Rel_Insert_Input = {\n  data: Guild_Insert_Input;\n  on_conflict?: Maybe<Guild_On_Conflict>;\n};\n\n/** on conflict condition type for table \"guild\" */\nexport type Guild_On_Conflict = {\n  constraint: Guild_Constraint;\n  update_columns: Array<Guild_Update_Column>;\n  where?: Maybe<Guild_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"guild\" */\nexport type Guild_Order_By = {\n  GuildType?: Maybe<GuildType_Order_By>;\n  description?: Maybe<Order_By>;\n  discord_id?: Maybe<Order_By>;\n  discord_invite_url?: Maybe<Order_By>;\n  discord_metadata?: Maybe<Order_By>;\n  github_url?: Maybe<Order_By>;\n  guild_accounts_aggregate?: Maybe<Guild_Account_Aggregate_Order_By>;\n  guild_players_aggregate?: Maybe<Guild_Player_Aggregate_Order_By>;\n  guildname?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  join_button_url?: Maybe<Order_By>;\n  logo?: Maybe<Order_By>;\n  moloch_address?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  position?: Maybe<Order_By>;\n  quests_aggregate?: Maybe<Quest_Aggregate_Order_By>;\n  status?: Maybe<Order_By>;\n  twitter_url?: Maybe<Order_By>;\n  type?: Maybe<Order_By>;\n  website_url?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"guild\" */\nexport type Guild_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** columns and relationships of \"guild_player\" */\nexport type Guild_Player = {\n  /** An object relationship */\n  Guild: Guild;\n  /** An object relationship */\n  Player: Player;\n  guild_id: Scalars['uuid'];\n  player_id: Scalars['uuid'];\n};\n\n/** aggregated selection of \"guild_player\" */\nexport type Guild_Player_Aggregate = {\n  aggregate?: Maybe<Guild_Player_Aggregate_Fields>;\n  nodes: Array<Guild_Player>;\n};\n\n/** aggregate fields of \"guild_player\" */\nexport type Guild_Player_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Guild_Player_Max_Fields>;\n  min?: Maybe<Guild_Player_Min_Fields>;\n};\n\n\n/** aggregate fields of \"guild_player\" */\nexport type Guild_Player_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Guild_Player_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"guild_player\" */\nexport type Guild_Player_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Guild_Player_Max_Order_By>;\n  min?: Maybe<Guild_Player_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"guild_player\" */\nexport type Guild_Player_Arr_Rel_Insert_Input = {\n  data: Array<Guild_Player_Insert_Input>;\n  on_conflict?: Maybe<Guild_Player_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"guild_player\". All fields are combined with a logical 'AND'. */\nexport type Guild_Player_Bool_Exp = {\n  Guild?: Maybe<Guild_Bool_Exp>;\n  Player?: Maybe<Player_Bool_Exp>;\n  _and?: Maybe<Array<Maybe<Guild_Player_Bool_Exp>>>;\n  _not?: Maybe<Guild_Player_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Guild_Player_Bool_Exp>>>;\n  guild_id?: Maybe<Uuid_Comparison_Exp>;\n  player_id?: Maybe<Uuid_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"guild_player\" */\nexport enum Guild_Player_Constraint {\n  /** unique or primary key constraint */\n  GuildPlayerPkey = 'guild_player_pkey'\n}\n\n/** input type for inserting data into table \"guild_player\" */\nexport type Guild_Player_Insert_Input = {\n  Guild?: Maybe<Guild_Obj_Rel_Insert_Input>;\n  Player?: Maybe<Player_Obj_Rel_Insert_Input>;\n  guild_id?: Maybe<Scalars['uuid']>;\n  player_id?: Maybe<Scalars['uuid']>;\n};\n\n/** aggregate max on columns */\nexport type Guild_Player_Max_Fields = {\n  guild_id?: Maybe<Scalars['uuid']>;\n  player_id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"guild_player\" */\nexport type Guild_Player_Max_Order_By = {\n  guild_id?: Maybe<Order_By>;\n  player_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Guild_Player_Min_Fields = {\n  guild_id?: Maybe<Scalars['uuid']>;\n  player_id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"guild_player\" */\nexport type Guild_Player_Min_Order_By = {\n  guild_id?: Maybe<Order_By>;\n  player_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"guild_player\" */\nexport type Guild_Player_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Guild_Player>;\n};\n\n/** input type for inserting object relation for remote table \"guild_player\" */\nexport type Guild_Player_Obj_Rel_Insert_Input = {\n  data: Guild_Player_Insert_Input;\n  on_conflict?: Maybe<Guild_Player_On_Conflict>;\n};\n\n/** on conflict condition type for table \"guild_player\" */\nexport type Guild_Player_On_Conflict = {\n  constraint: Guild_Player_Constraint;\n  update_columns: Array<Guild_Player_Update_Column>;\n  where?: Maybe<Guild_Player_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"guild_player\" */\nexport type Guild_Player_Order_By = {\n  Guild?: Maybe<Guild_Order_By>;\n  Player?: Maybe<Player_Order_By>;\n  guild_id?: Maybe<Order_By>;\n  player_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"guild_player\" */\nexport type Guild_Player_Pk_Columns_Input = {\n  guild_id: Scalars['uuid'];\n  player_id: Scalars['uuid'];\n};\n\n/** select columns of table \"guild_player\" */\nexport enum Guild_Player_Select_Column {\n  /** column name */\n  GuildId = 'guild_id',\n  /** column name */\n  PlayerId = 'player_id'\n}\n\n/** input type for updating data in table \"guild_player\" */\nexport type Guild_Player_Set_Input = {\n  guild_id?: Maybe<Scalars['uuid']>;\n  player_id?: Maybe<Scalars['uuid']>;\n};\n\n/** update columns of table \"guild_player\" */\nexport enum Guild_Player_Update_Column {\n  /** column name */\n  GuildId = 'guild_id',\n  /** column name */\n  PlayerId = 'player_id'\n}\n\n/** prepend existing jsonb value of filtered columns with new jsonb value */\nexport type Guild_Prepend_Input = {\n  discord_metadata?: Maybe<Scalars['jsonb']>;\n};\n\n/** select columns of table \"guild\" */\nexport enum Guild_Select_Column {\n  /** column name */\n  Description = 'description',\n  /** column name */\n  DiscordId = 'discord_id',\n  /** column name */\n  DiscordInviteUrl = 'discord_invite_url',\n  /** column name */\n  DiscordMetadata = 'discord_metadata',\n  /** column name */\n  GithubUrl = 'github_url',\n  /** column name */\n  Guildname = 'guildname',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  JoinButtonUrl = 'join_button_url',\n  /** column name */\n  Logo = 'logo',\n  /** column name */\n  MolochAddress = 'moloch_address',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  Position = 'position',\n  /** column name */\n  Status = 'status',\n  /** column name */\n  TwitterUrl = 'twitter_url',\n  /** column name */\n  Type = 'type',\n  /** column name */\n  WebsiteUrl = 'website_url'\n}\n\n/** input type for updating data in table \"guild\" */\nexport type Guild_Set_Input = {\n  description?: Maybe<Scalars['String']>;\n  discord_id?: Maybe<Scalars['String']>;\n  discord_invite_url?: Maybe<Scalars['String']>;\n  discord_metadata?: Maybe<Scalars['jsonb']>;\n  github_url?: Maybe<Scalars['String']>;\n  guildname?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  join_button_url?: Maybe<Scalars['String']>;\n  logo?: Maybe<Scalars['String']>;\n  moloch_address?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  position?: Maybe<GuildPosition_Enum>;\n  status?: Maybe<GuildStatus_Enum>;\n  twitter_url?: Maybe<Scalars['String']>;\n  type?: Maybe<GuildType_Enum>;\n  website_url?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"guild\" */\nexport enum Guild_Update_Column {\n  /** column name */\n  Description = 'description',\n  /** column name */\n  DiscordId = 'discord_id',\n  /** column name */\n  DiscordInviteUrl = 'discord_invite_url',\n  /** column name */\n  DiscordMetadata = 'discord_metadata',\n  /** column name */\n  GithubUrl = 'github_url',\n  /** column name */\n  Guildname = 'guildname',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  JoinButtonUrl = 'join_button_url',\n  /** column name */\n  Logo = 'logo',\n  /** column name */\n  MolochAddress = 'moloch_address',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  Position = 'position',\n  /** column name */\n  Status = 'status',\n  /** column name */\n  TwitterUrl = 'twitter_url',\n  /** column name */\n  Type = 'type',\n  /** column name */\n  WebsiteUrl = 'website_url'\n}\n\n/** columns and relationships of \"GuildPosition\" */\nexport type GuildPosition = {\n  position: Scalars['String'];\n};\n\n/** aggregated selection of \"GuildPosition\" */\nexport type GuildPosition_Aggregate = {\n  aggregate?: Maybe<GuildPosition_Aggregate_Fields>;\n  nodes: Array<GuildPosition>;\n};\n\n/** aggregate fields of \"GuildPosition\" */\nexport type GuildPosition_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<GuildPosition_Max_Fields>;\n  min?: Maybe<GuildPosition_Min_Fields>;\n};\n\n\n/** aggregate fields of \"GuildPosition\" */\nexport type GuildPosition_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<GuildPosition_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"GuildPosition\" */\nexport type GuildPosition_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<GuildPosition_Max_Order_By>;\n  min?: Maybe<GuildPosition_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"GuildPosition\" */\nexport type GuildPosition_Arr_Rel_Insert_Input = {\n  data: Array<GuildPosition_Insert_Input>;\n  on_conflict?: Maybe<GuildPosition_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"GuildPosition\". All fields are combined with a logical 'AND'. */\nexport type GuildPosition_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<GuildPosition_Bool_Exp>>>;\n  _not?: Maybe<GuildPosition_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<GuildPosition_Bool_Exp>>>;\n  position?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"GuildPosition\" */\nexport enum GuildPosition_Constraint {\n  /** unique or primary key constraint */\n  GuildPositionPkey = 'GuildPosition_pkey'\n}\n\nexport enum GuildPosition_Enum {\n  External = 'EXTERNAL',\n  Internal = 'INTERNAL'\n}\n\n/** expression to compare columns of type GuildPosition_enum. All fields are combined with logical 'AND'. */\nexport type GuildPosition_Enum_Comparison_Exp = {\n  _eq?: Maybe<GuildPosition_Enum>;\n  _in?: Maybe<Array<GuildPosition_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<GuildPosition_Enum>;\n  _nin?: Maybe<Array<GuildPosition_Enum>>;\n};\n\n/** input type for inserting data into table \"GuildPosition\" */\nexport type GuildPosition_Insert_Input = {\n  position?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type GuildPosition_Max_Fields = {\n  position?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"GuildPosition\" */\nexport type GuildPosition_Max_Order_By = {\n  position?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type GuildPosition_Min_Fields = {\n  position?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"GuildPosition\" */\nexport type GuildPosition_Min_Order_By = {\n  position?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"GuildPosition\" */\nexport type GuildPosition_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<GuildPosition>;\n};\n\n/** input type for inserting object relation for remote table \"GuildPosition\" */\nexport type GuildPosition_Obj_Rel_Insert_Input = {\n  data: GuildPosition_Insert_Input;\n  on_conflict?: Maybe<GuildPosition_On_Conflict>;\n};\n\n/** on conflict condition type for table \"GuildPosition\" */\nexport type GuildPosition_On_Conflict = {\n  constraint: GuildPosition_Constraint;\n  update_columns: Array<GuildPosition_Update_Column>;\n  where?: Maybe<GuildPosition_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"GuildPosition\" */\nexport type GuildPosition_Order_By = {\n  position?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"GuildPosition\" */\nexport type GuildPosition_Pk_Columns_Input = {\n  position: Scalars['String'];\n};\n\n/** select columns of table \"GuildPosition\" */\nexport enum GuildPosition_Select_Column {\n  /** column name */\n  Position = 'position'\n}\n\n/** input type for updating data in table \"GuildPosition\" */\nexport type GuildPosition_Set_Input = {\n  position?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"GuildPosition\" */\nexport enum GuildPosition_Update_Column {\n  /** column name */\n  Position = 'position'\n}\n\n/** columns and relationships of \"GuildStatus\" */\nexport type GuildStatus = {\n  status: Scalars['String'];\n};\n\n/** aggregated selection of \"GuildStatus\" */\nexport type GuildStatus_Aggregate = {\n  aggregate?: Maybe<GuildStatus_Aggregate_Fields>;\n  nodes: Array<GuildStatus>;\n};\n\n/** aggregate fields of \"GuildStatus\" */\nexport type GuildStatus_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<GuildStatus_Max_Fields>;\n  min?: Maybe<GuildStatus_Min_Fields>;\n};\n\n\n/** aggregate fields of \"GuildStatus\" */\nexport type GuildStatus_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<GuildStatus_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"GuildStatus\" */\nexport type GuildStatus_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<GuildStatus_Max_Order_By>;\n  min?: Maybe<GuildStatus_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"GuildStatus\" */\nexport type GuildStatus_Arr_Rel_Insert_Input = {\n  data: Array<GuildStatus_Insert_Input>;\n  on_conflict?: Maybe<GuildStatus_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"GuildStatus\". All fields are combined with a logical 'AND'. */\nexport type GuildStatus_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<GuildStatus_Bool_Exp>>>;\n  _not?: Maybe<GuildStatus_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<GuildStatus_Bool_Exp>>>;\n  status?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"GuildStatus\" */\nexport enum GuildStatus_Constraint {\n  /** unique or primary key constraint */\n  GuildStatusPkey = 'GuildStatus_pkey'\n}\n\nexport enum GuildStatus_Enum {\n  Active = 'ACTIVE',\n  Inactive = 'INACTIVE',\n  Pending = 'PENDING'\n}\n\n/** expression to compare columns of type GuildStatus_enum. All fields are combined with logical 'AND'. */\nexport type GuildStatus_Enum_Comparison_Exp = {\n  _eq?: Maybe<GuildStatus_Enum>;\n  _in?: Maybe<Array<GuildStatus_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<GuildStatus_Enum>;\n  _nin?: Maybe<Array<GuildStatus_Enum>>;\n};\n\n/** input type for inserting data into table \"GuildStatus\" */\nexport type GuildStatus_Insert_Input = {\n  status?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type GuildStatus_Max_Fields = {\n  status?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"GuildStatus\" */\nexport type GuildStatus_Max_Order_By = {\n  status?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type GuildStatus_Min_Fields = {\n  status?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"GuildStatus\" */\nexport type GuildStatus_Min_Order_By = {\n  status?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"GuildStatus\" */\nexport type GuildStatus_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<GuildStatus>;\n};\n\n/** input type for inserting object relation for remote table \"GuildStatus\" */\nexport type GuildStatus_Obj_Rel_Insert_Input = {\n  data: GuildStatus_Insert_Input;\n  on_conflict?: Maybe<GuildStatus_On_Conflict>;\n};\n\n/** on conflict condition type for table \"GuildStatus\" */\nexport type GuildStatus_On_Conflict = {\n  constraint: GuildStatus_Constraint;\n  update_columns: Array<GuildStatus_Update_Column>;\n  where?: Maybe<GuildStatus_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"GuildStatus\" */\nexport type GuildStatus_Order_By = {\n  status?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"GuildStatus\" */\nexport type GuildStatus_Pk_Columns_Input = {\n  status: Scalars['String'];\n};\n\n/** select columns of table \"GuildStatus\" */\nexport enum GuildStatus_Select_Column {\n  /** column name */\n  Status = 'status'\n}\n\n/** input type for updating data in table \"GuildStatus\" */\nexport type GuildStatus_Set_Input = {\n  status?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"GuildStatus\" */\nexport enum GuildStatus_Update_Column {\n  /** column name */\n  Status = 'status'\n}\n\n/** columns and relationships of \"GuildType\" */\nexport type GuildType = {\n  /** An array relationship */\n  Guilds: Array<Guild>;\n  /** An aggregated array relationship */\n  Guilds_aggregate: Guild_Aggregate;\n  name: Scalars['String'];\n};\n\n\n/** columns and relationships of \"GuildType\" */\nexport type GuildTypeGuildsArgs = {\n  distinct_on?: Maybe<Array<Guild_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Order_By>>;\n  where?: Maybe<Guild_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"GuildType\" */\nexport type GuildTypeGuilds_AggregateArgs = {\n  distinct_on?: Maybe<Array<Guild_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Order_By>>;\n  where?: Maybe<Guild_Bool_Exp>;\n};\n\n/** aggregated selection of \"GuildType\" */\nexport type GuildType_Aggregate = {\n  aggregate?: Maybe<GuildType_Aggregate_Fields>;\n  nodes: Array<GuildType>;\n};\n\n/** aggregate fields of \"GuildType\" */\nexport type GuildType_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<GuildType_Max_Fields>;\n  min?: Maybe<GuildType_Min_Fields>;\n};\n\n\n/** aggregate fields of \"GuildType\" */\nexport type GuildType_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<GuildType_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"GuildType\" */\nexport type GuildType_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<GuildType_Max_Order_By>;\n  min?: Maybe<GuildType_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"GuildType\" */\nexport type GuildType_Arr_Rel_Insert_Input = {\n  data: Array<GuildType_Insert_Input>;\n  on_conflict?: Maybe<GuildType_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"GuildType\". All fields are combined with a logical 'AND'. */\nexport type GuildType_Bool_Exp = {\n  Guilds?: Maybe<Guild_Bool_Exp>;\n  _and?: Maybe<Array<Maybe<GuildType_Bool_Exp>>>;\n  _not?: Maybe<GuildType_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<GuildType_Bool_Exp>>>;\n  name?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"GuildType\" */\nexport enum GuildType_Constraint {\n  /** unique or primary key constraint */\n  GuildTypePkey = 'GuildType_pkey'\n}\n\nexport enum GuildType_Enum {\n  Funding = 'FUNDING',\n  Project = 'PROJECT',\n  Research = 'RESEARCH',\n  Service = 'SERVICE',\n  Social = 'SOCIAL'\n}\n\n/** expression to compare columns of type GuildType_enum. All fields are combined with logical 'AND'. */\nexport type GuildType_Enum_Comparison_Exp = {\n  _eq?: Maybe<GuildType_Enum>;\n  _in?: Maybe<Array<GuildType_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<GuildType_Enum>;\n  _nin?: Maybe<Array<GuildType_Enum>>;\n};\n\n/** input type for inserting data into table \"GuildType\" */\nexport type GuildType_Insert_Input = {\n  Guilds?: Maybe<Guild_Arr_Rel_Insert_Input>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type GuildType_Max_Fields = {\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"GuildType\" */\nexport type GuildType_Max_Order_By = {\n  name?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type GuildType_Min_Fields = {\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"GuildType\" */\nexport type GuildType_Min_Order_By = {\n  name?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"GuildType\" */\nexport type GuildType_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<GuildType>;\n};\n\n/** input type for inserting object relation for remote table \"GuildType\" */\nexport type GuildType_Obj_Rel_Insert_Input = {\n  data: GuildType_Insert_Input;\n  on_conflict?: Maybe<GuildType_On_Conflict>;\n};\n\n/** on conflict condition type for table \"GuildType\" */\nexport type GuildType_On_Conflict = {\n  constraint: GuildType_Constraint;\n  update_columns: Array<GuildType_Update_Column>;\n  where?: Maybe<GuildType_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"GuildType\" */\nexport type GuildType_Order_By = {\n  Guilds_aggregate?: Maybe<Guild_Aggregate_Order_By>;\n  name?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"GuildType\" */\nexport type GuildType_Pk_Columns_Input = {\n  name: Scalars['String'];\n};\n\n/** select columns of table \"GuildType\" */\nexport enum GuildType_Select_Column {\n  /** column name */\n  Name = 'name'\n}\n\n/** input type for updating data in table \"GuildType\" */\nexport type GuildType_Set_Input = {\n  name?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"GuildType\" */\nexport enum GuildType_Update_Column {\n  /** column name */\n  Name = 'name'\n}\n\n/** expression to compare columns of type Int. All fields are combined with logical 'AND'. */\nexport type Int_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\n\n/** expression to compare columns of type json. All fields are combined with logical 'AND'. */\nexport type Json_Comparison_Exp = {\n  _eq?: Maybe<Scalars['json']>;\n  _gt?: Maybe<Scalars['json']>;\n  _gte?: Maybe<Scalars['json']>;\n  _in?: Maybe<Array<Scalars['json']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['json']>;\n  _lte?: Maybe<Scalars['json']>;\n  _neq?: Maybe<Scalars['json']>;\n  _nin?: Maybe<Array<Scalars['json']>>;\n};\n\n\n/** expression to compare columns of type jsonb. All fields are combined with logical 'AND'. */\nexport type Jsonb_Comparison_Exp = {\n  /** is the column contained in the given json value */\n  _contained_in?: Maybe<Scalars['jsonb']>;\n  /** does the column contain the given json value at the top level */\n  _contains?: Maybe<Scalars['jsonb']>;\n  _eq?: Maybe<Scalars['jsonb']>;\n  _gt?: Maybe<Scalars['jsonb']>;\n  _gte?: Maybe<Scalars['jsonb']>;\n  /** does the string exist as a top-level key in the column */\n  _has_key?: Maybe<Scalars['String']>;\n  /** do all of these strings exist as top-level keys in the column */\n  _has_keys_all?: Maybe<Array<Scalars['String']>>;\n  /** do any of these strings exist as top-level keys in the column */\n  _has_keys_any?: Maybe<Array<Scalars['String']>>;\n  _in?: Maybe<Array<Scalars['jsonb']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['jsonb']>;\n  _lte?: Maybe<Scalars['jsonb']>;\n  _neq?: Maybe<Scalars['jsonb']>;\n  _nin?: Maybe<Array<Scalars['jsonb']>>;\n};\n\n/** columns and relationships of \"me\" */\nexport type Me = {\n  ethereum_address?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  /** An object relationship */\n  player?: Maybe<Player>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"me\" */\nexport type Me_Aggregate = {\n  aggregate?: Maybe<Me_Aggregate_Fields>;\n  nodes: Array<Me>;\n};\n\n/** aggregate fields of \"me\" */\nexport type Me_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Me_Max_Fields>;\n  min?: Maybe<Me_Min_Fields>;\n};\n\n\n/** aggregate fields of \"me\" */\nexport type Me_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Me_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"me\" */\nexport type Me_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Me_Max_Order_By>;\n  min?: Maybe<Me_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"me\" */\nexport type Me_Arr_Rel_Insert_Input = {\n  data: Array<Me_Insert_Input>;\n};\n\n/** Boolean expression to filter rows from the table \"me\". All fields are combined with a logical 'AND'. */\nexport type Me_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Me_Bool_Exp>>>;\n  _not?: Maybe<Me_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Me_Bool_Exp>>>;\n  ethereum_address?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  player?: Maybe<Player_Bool_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** input type for inserting data into table \"me\" */\nexport type Me_Insert_Input = {\n  ethereum_address?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  player?: Maybe<Player_Obj_Rel_Insert_Input>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Me_Max_Fields = {\n  ethereum_address?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"me\" */\nexport type Me_Max_Order_By = {\n  ethereum_address?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Me_Min_Fields = {\n  ethereum_address?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"me\" */\nexport type Me_Min_Order_By = {\n  ethereum_address?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"me\" */\nexport type Me_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Me>;\n};\n\n/** input type for inserting object relation for remote table \"me\" */\nexport type Me_Obj_Rel_Insert_Input = {\n  data: Me_Insert_Input;\n};\n\n/** ordering options when selecting data from \"me\" */\nexport type Me_Order_By = {\n  ethereum_address?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  player?: Maybe<Player_Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** select columns of table \"me\" */\nexport enum Me_Select_Column {\n  /** column name */\n  EthereumAddress = 'ethereum_address',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"me\" */\nexport type Me_Set_Input = {\n  ethereum_address?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  username?: Maybe<Scalars['String']>;\n};\n\nexport type Member = {\n  createdAt: Scalars['String'];\n  delegateKey: Scalars['String'];\n  exists: Scalars['Boolean'];\n  id: Scalars['ID'];\n  kicked?: Maybe<Scalars['Boolean']>;\n  loot?: Maybe<Scalars['String']>;\n  memberAddress: Scalars['String'];\n  moloch: Moloch;\n  molochAddress: Scalars['String'];\n  shares: Scalars['String'];\n};\n\nexport type Moloch = {\n  chain: Scalars['String'];\n  id: Scalars['ID'];\n  summoner: Scalars['String'];\n  title?: Maybe<Scalars['String']>;\n  totalLoot: Scalars['String'];\n  totalShares: Scalars['String'];\n  version?: Maybe<Scalars['String']>;\n};\n\n/** mutation root */\nexport type Mutation_Root = {\n  /** perform the action: \"authenticateDiscordGuild\" */\n  authenticateDiscordGuild?: Maybe<DiscordGuildAuthResponse>;\n  /** perform the action: \"createQuest\" */\n  createQuest?: Maybe<CreateQuestOutput>;\n  /** perform the action: \"createQuestCompletion\" */\n  createQuestCompletion?: Maybe<CreateQuestCompletionOutput>;\n  /** delete data from the table: \"AccountType\" */\n  delete_AccountType?: Maybe<AccountType_Mutation_Response>;\n  /** delete single row from the table: \"AccountType\" */\n  delete_AccountType_by_pk?: Maybe<AccountType>;\n  /** delete data from the table: \"ColorAspect\" */\n  delete_ColorAspect?: Maybe<ColorAspect_Mutation_Response>;\n  /** delete single row from the table: \"ColorAspect\" */\n  delete_ColorAspect_by_pk?: Maybe<ColorAspect>;\n  /** delete data from the table: \"GuildPosition\" */\n  delete_GuildPosition?: Maybe<GuildPosition_Mutation_Response>;\n  /** delete single row from the table: \"GuildPosition\" */\n  delete_GuildPosition_by_pk?: Maybe<GuildPosition>;\n  /** delete data from the table: \"GuildStatus\" */\n  delete_GuildStatus?: Maybe<GuildStatus_Mutation_Response>;\n  /** delete single row from the table: \"GuildStatus\" */\n  delete_GuildStatus_by_pk?: Maybe<GuildStatus>;\n  /** delete data from the table: \"GuildType\" */\n  delete_GuildType?: Maybe<GuildType_Mutation_Response>;\n  /** delete single row from the table: \"GuildType\" */\n  delete_GuildType_by_pk?: Maybe<GuildType>;\n  /** delete data from the table: \"PlayerRank\" */\n  delete_PlayerRank?: Maybe<PlayerRank_Mutation_Response>;\n  /** delete single row from the table: \"PlayerRank\" */\n  delete_PlayerRank_by_pk?: Maybe<PlayerRank>;\n  /** delete data from the table: \"QuestCompletionStatus\" */\n  delete_QuestCompletionStatus?: Maybe<QuestCompletionStatus_Mutation_Response>;\n  /** delete single row from the table: \"QuestCompletionStatus\" */\n  delete_QuestCompletionStatus_by_pk?: Maybe<QuestCompletionStatus>;\n  /** delete data from the table: \"QuestRepetition\" */\n  delete_QuestRepetition?: Maybe<QuestRepetition_Mutation_Response>;\n  /** delete single row from the table: \"QuestRepetition\" */\n  delete_QuestRepetition_by_pk?: Maybe<QuestRepetition>;\n  /** delete data from the table: \"QuestStatus\" */\n  delete_QuestStatus?: Maybe<QuestStatus_Mutation_Response>;\n  /** delete single row from the table: \"QuestStatus\" */\n  delete_QuestStatus_by_pk?: Maybe<QuestStatus>;\n  /** delete data from the table: \"SkillCategory\" */\n  delete_SkillCategory?: Maybe<SkillCategory_Mutation_Response>;\n  /** delete single row from the table: \"SkillCategory\" */\n  delete_SkillCategory_by_pk?: Maybe<SkillCategory>;\n  /** delete data from the table: \"guild\" */\n  delete_guild?: Maybe<Guild_Mutation_Response>;\n  /** delete data from the table: \"guild_account\" */\n  delete_guild_account?: Maybe<Guild_Account_Mutation_Response>;\n  /** delete single row from the table: \"guild_account\" */\n  delete_guild_account_by_pk?: Maybe<Guild_Account>;\n  /** delete single row from the table: \"guild\" */\n  delete_guild_by_pk?: Maybe<Guild>;\n  /** delete data from the table: \"guild_player\" */\n  delete_guild_player?: Maybe<Guild_Player_Mutation_Response>;\n  /** delete single row from the table: \"guild_player\" */\n  delete_guild_player_by_pk?: Maybe<Guild_Player>;\n  /** delete data from the table: \"me\" */\n  delete_me?: Maybe<Me_Mutation_Response>;\n  /** delete data from the table: \"player\" */\n  delete_player?: Maybe<Player_Mutation_Response>;\n  /** delete data from the table: \"player_account\" */\n  delete_player_account?: Maybe<Player_Account_Mutation_Response>;\n  /** delete single row from the table: \"player\" */\n  delete_player_by_pk?: Maybe<Player>;\n  /** delete data from the table: \"player_skill\" */\n  delete_player_skill?: Maybe<Player_Skill_Mutation_Response>;\n  /** delete single row from the table: \"player_skill\" */\n  delete_player_skill_by_pk?: Maybe<Player_Skill>;\n  /** delete data from the table: \"player_type\" */\n  delete_player_type?: Maybe<Player_Type_Mutation_Response>;\n  /** delete single row from the table: \"player_type\" */\n  delete_player_type_by_pk?: Maybe<Player_Type>;\n  /** delete data from the table: \"profile_cache\" */\n  delete_profile_cache?: Maybe<Profile_Cache_Mutation_Response>;\n  /** delete single row from the table: \"profile_cache\" */\n  delete_profile_cache_by_pk?: Maybe<Profile_Cache>;\n  /** delete data from the table: \"quest\" */\n  delete_quest?: Maybe<Quest_Mutation_Response>;\n  /** delete single row from the table: \"quest\" */\n  delete_quest_by_pk?: Maybe<Quest>;\n  /** delete data from the table: \"quest_completion\" */\n  delete_quest_completion?: Maybe<Quest_Completion_Mutation_Response>;\n  /** delete single row from the table: \"quest_completion\" */\n  delete_quest_completion_by_pk?: Maybe<Quest_Completion>;\n  /** delete data from the table: \"quest_skill\" */\n  delete_quest_skill?: Maybe<Quest_Skill_Mutation_Response>;\n  /** delete single row from the table: \"quest_skill\" */\n  delete_quest_skill_by_pk?: Maybe<Quest_Skill>;\n  /** delete data from the table: \"skill\" */\n  delete_skill?: Maybe<Skill_Mutation_Response>;\n  /** delete single row from the table: \"skill\" */\n  delete_skill_by_pk?: Maybe<Skill>;\n  /** insert data into the table: \"AccountType\" */\n  insert_AccountType?: Maybe<AccountType_Mutation_Response>;\n  /** insert a single row into the table: \"AccountType\" */\n  insert_AccountType_one?: Maybe<AccountType>;\n  /** insert data into the table: \"ColorAspect\" */\n  insert_ColorAspect?: Maybe<ColorAspect_Mutation_Response>;\n  /** insert a single row into the table: \"ColorAspect\" */\n  insert_ColorAspect_one?: Maybe<ColorAspect>;\n  /** insert data into the table: \"GuildPosition\" */\n  insert_GuildPosition?: Maybe<GuildPosition_Mutation_Response>;\n  /** insert a single row into the table: \"GuildPosition\" */\n  insert_GuildPosition_one?: Maybe<GuildPosition>;\n  /** insert data into the table: \"GuildStatus\" */\n  insert_GuildStatus?: Maybe<GuildStatus_Mutation_Response>;\n  /** insert a single row into the table: \"GuildStatus\" */\n  insert_GuildStatus_one?: Maybe<GuildStatus>;\n  /** insert data into the table: \"GuildType\" */\n  insert_GuildType?: Maybe<GuildType_Mutation_Response>;\n  /** insert a single row into the table: \"GuildType\" */\n  insert_GuildType_one?: Maybe<GuildType>;\n  /** insert data into the table: \"PlayerRank\" */\n  insert_PlayerRank?: Maybe<PlayerRank_Mutation_Response>;\n  /** insert a single row into the table: \"PlayerRank\" */\n  insert_PlayerRank_one?: Maybe<PlayerRank>;\n  /** insert data into the table: \"QuestCompletionStatus\" */\n  insert_QuestCompletionStatus?: Maybe<QuestCompletionStatus_Mutation_Response>;\n  /** insert a single row into the table: \"QuestCompletionStatus\" */\n  insert_QuestCompletionStatus_one?: Maybe<QuestCompletionStatus>;\n  /** insert data into the table: \"QuestRepetition\" */\n  insert_QuestRepetition?: Maybe<QuestRepetition_Mutation_Response>;\n  /** insert a single row into the table: \"QuestRepetition\" */\n  insert_QuestRepetition_one?: Maybe<QuestRepetition>;\n  /** insert data into the table: \"QuestStatus\" */\n  insert_QuestStatus?: Maybe<QuestStatus_Mutation_Response>;\n  /** insert a single row into the table: \"QuestStatus\" */\n  insert_QuestStatus_one?: Maybe<QuestStatus>;\n  /** insert data into the table: \"SkillCategory\" */\n  insert_SkillCategory?: Maybe<SkillCategory_Mutation_Response>;\n  /** insert a single row into the table: \"SkillCategory\" */\n  insert_SkillCategory_one?: Maybe<SkillCategory>;\n  /** insert data into the table: \"guild\" */\n  insert_guild?: Maybe<Guild_Mutation_Response>;\n  /** insert data into the table: \"guild_account\" */\n  insert_guild_account?: Maybe<Guild_Account_Mutation_Response>;\n  /** insert a single row into the table: \"guild_account\" */\n  insert_guild_account_one?: Maybe<Guild_Account>;\n  /** insert a single row into the table: \"guild\" */\n  insert_guild_one?: Maybe<Guild>;\n  /** insert data into the table: \"guild_player\" */\n  insert_guild_player?: Maybe<Guild_Player_Mutation_Response>;\n  /** insert a single row into the table: \"guild_player\" */\n  insert_guild_player_one?: Maybe<Guild_Player>;\n  /** insert data into the table: \"me\" */\n  insert_me?: Maybe<Me_Mutation_Response>;\n  /** insert a single row into the table: \"me\" */\n  insert_me_one?: Maybe<Me>;\n  /** insert data into the table: \"player\" */\n  insert_player?: Maybe<Player_Mutation_Response>;\n  /** insert data into the table: \"player_account\" */\n  insert_player_account?: Maybe<Player_Account_Mutation_Response>;\n  /** insert a single row into the table: \"player_account\" */\n  insert_player_account_one?: Maybe<Player_Account>;\n  /** insert a single row into the table: \"player\" */\n  insert_player_one?: Maybe<Player>;\n  /** insert data into the table: \"player_skill\" */\n  insert_player_skill?: Maybe<Player_Skill_Mutation_Response>;\n  /** insert a single row into the table: \"player_skill\" */\n  insert_player_skill_one?: Maybe<Player_Skill>;\n  /** insert data into the table: \"player_type\" */\n  insert_player_type?: Maybe<Player_Type_Mutation_Response>;\n  /** insert a single row into the table: \"player_type\" */\n  insert_player_type_one?: Maybe<Player_Type>;\n  /** insert data into the table: \"profile_cache\" */\n  insert_profile_cache?: Maybe<Profile_Cache_Mutation_Response>;\n  /** insert a single row into the table: \"profile_cache\" */\n  insert_profile_cache_one?: Maybe<Profile_Cache>;\n  /** insert data into the table: \"quest\" */\n  insert_quest?: Maybe<Quest_Mutation_Response>;\n  /** insert data into the table: \"quest_completion\" */\n  insert_quest_completion?: Maybe<Quest_Completion_Mutation_Response>;\n  /** insert a single row into the table: \"quest_completion\" */\n  insert_quest_completion_one?: Maybe<Quest_Completion>;\n  /** insert a single row into the table: \"quest\" */\n  insert_quest_one?: Maybe<Quest>;\n  /** insert data into the table: \"quest_skill\" */\n  insert_quest_skill?: Maybe<Quest_Skill_Mutation_Response>;\n  /** insert a single row into the table: \"quest_skill\" */\n  insert_quest_skill_one?: Maybe<Quest_Skill>;\n  /** insert data into the table: \"skill\" */\n  insert_skill?: Maybe<Skill_Mutation_Response>;\n  /** insert a single row into the table: \"skill\" */\n  insert_skill_one?: Maybe<Skill>;\n  /** perform the action: \"updateExpiredIDXProfiles\" */\n  updateExpiredIDXProfiles?: Maybe<ExpiredPlayerProfiles>;\n  /** perform the action: \"updateIDXProfile\" */\n  updateIDXProfile?: Maybe<CacheProcessOutput>;\n  /** perform the action: \"updateQuestCompletion\" */\n  updateQuestCompletion?: Maybe<UpdateQuestCompletionOutput>;\n  /** update data of the table: \"AccountType\" */\n  update_AccountType?: Maybe<AccountType_Mutation_Response>;\n  /** update single row of the table: \"AccountType\" */\n  update_AccountType_by_pk?: Maybe<AccountType>;\n  /** update data of the table: \"ColorAspect\" */\n  update_ColorAspect?: Maybe<ColorAspect_Mutation_Response>;\n  /** update single row of the table: \"ColorAspect\" */\n  update_ColorAspect_by_pk?: Maybe<ColorAspect>;\n  /** update data of the table: \"GuildPosition\" */\n  update_GuildPosition?: Maybe<GuildPosition_Mutation_Response>;\n  /** update single row of the table: \"GuildPosition\" */\n  update_GuildPosition_by_pk?: Maybe<GuildPosition>;\n  /** update data of the table: \"GuildStatus\" */\n  update_GuildStatus?: Maybe<GuildStatus_Mutation_Response>;\n  /** update single row of the table: \"GuildStatus\" */\n  update_GuildStatus_by_pk?: Maybe<GuildStatus>;\n  /** update data of the table: \"GuildType\" */\n  update_GuildType?: Maybe<GuildType_Mutation_Response>;\n  /** update single row of the table: \"GuildType\" */\n  update_GuildType_by_pk?: Maybe<GuildType>;\n  /** update data of the table: \"PlayerRank\" */\n  update_PlayerRank?: Maybe<PlayerRank_Mutation_Response>;\n  /** update single row of the table: \"PlayerRank\" */\n  update_PlayerRank_by_pk?: Maybe<PlayerRank>;\n  /** update data of the table: \"QuestCompletionStatus\" */\n  update_QuestCompletionStatus?: Maybe<QuestCompletionStatus_Mutation_Response>;\n  /** update single row of the table: \"QuestCompletionStatus\" */\n  update_QuestCompletionStatus_by_pk?: Maybe<QuestCompletionStatus>;\n  /** update data of the table: \"QuestRepetition\" */\n  update_QuestRepetition?: Maybe<QuestRepetition_Mutation_Response>;\n  /** update single row of the table: \"QuestRepetition\" */\n  update_QuestRepetition_by_pk?: Maybe<QuestRepetition>;\n  /** update data of the table: \"QuestStatus\" */\n  update_QuestStatus?: Maybe<QuestStatus_Mutation_Response>;\n  /** update single row of the table: \"QuestStatus\" */\n  update_QuestStatus_by_pk?: Maybe<QuestStatus>;\n  /** update data of the table: \"SkillCategory\" */\n  update_SkillCategory?: Maybe<SkillCategory_Mutation_Response>;\n  /** update single row of the table: \"SkillCategory\" */\n  update_SkillCategory_by_pk?: Maybe<SkillCategory>;\n  /** update data of the table: \"guild\" */\n  update_guild?: Maybe<Guild_Mutation_Response>;\n  /** update data of the table: \"guild_account\" */\n  update_guild_account?: Maybe<Guild_Account_Mutation_Response>;\n  /** update single row of the table: \"guild_account\" */\n  update_guild_account_by_pk?: Maybe<Guild_Account>;\n  /** update single row of the table: \"guild\" */\n  update_guild_by_pk?: Maybe<Guild>;\n  /** update data of the table: \"guild_player\" */\n  update_guild_player?: Maybe<Guild_Player_Mutation_Response>;\n  /** update single row of the table: \"guild_player\" */\n  update_guild_player_by_pk?: Maybe<Guild_Player>;\n  /** update data of the table: \"me\" */\n  update_me?: Maybe<Me_Mutation_Response>;\n  /** update data of the table: \"player\" */\n  update_player?: Maybe<Player_Mutation_Response>;\n  /** update data of the table: \"player_account\" */\n  update_player_account?: Maybe<Player_Account_Mutation_Response>;\n  /** update single row of the table: \"player\" */\n  update_player_by_pk?: Maybe<Player>;\n  /** update data of the table: \"player_skill\" */\n  update_player_skill?: Maybe<Player_Skill_Mutation_Response>;\n  /** update single row of the table: \"player_skill\" */\n  update_player_skill_by_pk?: Maybe<Player_Skill>;\n  /** update data of the table: \"player_type\" */\n  update_player_type?: Maybe<Player_Type_Mutation_Response>;\n  /** update single row of the table: \"player_type\" */\n  update_player_type_by_pk?: Maybe<Player_Type>;\n  /** update data of the table: \"profile_cache\" */\n  update_profile_cache?: Maybe<Profile_Cache_Mutation_Response>;\n  /** update single row of the table: \"profile_cache\" */\n  update_profile_cache_by_pk?: Maybe<Profile_Cache>;\n  /** update data of the table: \"quest\" */\n  update_quest?: Maybe<Quest_Mutation_Response>;\n  /** update single row of the table: \"quest\" */\n  update_quest_by_pk?: Maybe<Quest>;\n  /** update data of the table: \"quest_completion\" */\n  update_quest_completion?: Maybe<Quest_Completion_Mutation_Response>;\n  /** update single row of the table: \"quest_completion\" */\n  update_quest_completion_by_pk?: Maybe<Quest_Completion>;\n  /** update data of the table: \"quest_skill\" */\n  update_quest_skill?: Maybe<Quest_Skill_Mutation_Response>;\n  /** update single row of the table: \"quest_skill\" */\n  update_quest_skill_by_pk?: Maybe<Quest_Skill>;\n  /** update data of the table: \"skill\" */\n  update_skill?: Maybe<Skill_Mutation_Response>;\n  /** update single row of the table: \"skill\" */\n  update_skill_by_pk?: Maybe<Skill>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootAuthenticateDiscordGuildArgs = {\n  code: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootCreateQuestArgs = {\n  quest: CreateQuestInput;\n};\n\n\n/** mutation root */\nexport type Mutation_RootCreateQuestCompletionArgs = {\n  questCompletion: CreateQuestCompletionInput;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_AccountTypeArgs = {\n  where: AccountType_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_AccountType_By_PkArgs = {\n  type: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_ColorAspectArgs = {\n  where: ColorAspect_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_ColorAspect_By_PkArgs = {\n  mask: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_GuildPositionArgs = {\n  where: GuildPosition_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_GuildPosition_By_PkArgs = {\n  position: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_GuildStatusArgs = {\n  where: GuildStatus_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_GuildStatus_By_PkArgs = {\n  status: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_GuildTypeArgs = {\n  where: GuildType_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_GuildType_By_PkArgs = {\n  name: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_PlayerRankArgs = {\n  where: PlayerRank_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_PlayerRank_By_PkArgs = {\n  rank: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_QuestCompletionStatusArgs = {\n  where: QuestCompletionStatus_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_QuestCompletionStatus_By_PkArgs = {\n  status: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_QuestRepetitionArgs = {\n  where: QuestRepetition_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_QuestRepetition_By_PkArgs = {\n  repetition: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_QuestStatusArgs = {\n  where: QuestStatus_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_QuestStatus_By_PkArgs = {\n  status: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_SkillCategoryArgs = {\n  where: SkillCategory_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_SkillCategory_By_PkArgs = {\n  name: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_GuildArgs = {\n  where: Guild_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Guild_AccountArgs = {\n  where: Guild_Account_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Guild_Account_By_PkArgs = {\n  guild_id: Scalars['uuid'];\n  type: AccountType_Enum;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Guild_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Guild_PlayerArgs = {\n  where: Guild_Player_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Guild_Player_By_PkArgs = {\n  guild_id: Scalars['uuid'];\n  player_id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_MeArgs = {\n  where: Me_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_PlayerArgs = {\n  where: Player_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Player_AccountArgs = {\n  where: Player_Account_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Player_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Player_SkillArgs = {\n  where: Player_Skill_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Player_Skill_By_PkArgs = {\n  player_id: Scalars['uuid'];\n  skill_id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Player_TypeArgs = {\n  where: Player_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Player_Type_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Profile_CacheArgs = {\n  where: Profile_Cache_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Profile_Cache_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_QuestArgs = {\n  where: Quest_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Quest_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Quest_CompletionArgs = {\n  where: Quest_Completion_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Quest_Completion_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Quest_SkillArgs = {\n  where: Quest_Skill_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Quest_Skill_By_PkArgs = {\n  quest_id: Scalars['uuid'];\n  skill_id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_SkillArgs = {\n  where: Skill_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Skill_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_AccountTypeArgs = {\n  objects: Array<AccountType_Insert_Input>;\n  on_conflict?: Maybe<AccountType_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_AccountType_OneArgs = {\n  object: AccountType_Insert_Input;\n  on_conflict?: Maybe<AccountType_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_ColorAspectArgs = {\n  objects: Array<ColorAspect_Insert_Input>;\n  on_conflict?: Maybe<ColorAspect_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_ColorAspect_OneArgs = {\n  object: ColorAspect_Insert_Input;\n  on_conflict?: Maybe<ColorAspect_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_GuildPositionArgs = {\n  objects: Array<GuildPosition_Insert_Input>;\n  on_conflict?: Maybe<GuildPosition_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_GuildPosition_OneArgs = {\n  object: GuildPosition_Insert_Input;\n  on_conflict?: Maybe<GuildPosition_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_GuildStatusArgs = {\n  objects: Array<GuildStatus_Insert_Input>;\n  on_conflict?: Maybe<GuildStatus_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_GuildStatus_OneArgs = {\n  object: GuildStatus_Insert_Input;\n  on_conflict?: Maybe<GuildStatus_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_GuildTypeArgs = {\n  objects: Array<GuildType_Insert_Input>;\n  on_conflict?: Maybe<GuildType_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_GuildType_OneArgs = {\n  object: GuildType_Insert_Input;\n  on_conflict?: Maybe<GuildType_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_PlayerRankArgs = {\n  objects: Array<PlayerRank_Insert_Input>;\n  on_conflict?: Maybe<PlayerRank_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_PlayerRank_OneArgs = {\n  object: PlayerRank_Insert_Input;\n  on_conflict?: Maybe<PlayerRank_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_QuestCompletionStatusArgs = {\n  objects: Array<QuestCompletionStatus_Insert_Input>;\n  on_conflict?: Maybe<QuestCompletionStatus_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_QuestCompletionStatus_OneArgs = {\n  object: QuestCompletionStatus_Insert_Input;\n  on_conflict?: Maybe<QuestCompletionStatus_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_QuestRepetitionArgs = {\n  objects: Array<QuestRepetition_Insert_Input>;\n  on_conflict?: Maybe<QuestRepetition_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_QuestRepetition_OneArgs = {\n  object: QuestRepetition_Insert_Input;\n  on_conflict?: Maybe<QuestRepetition_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_QuestStatusArgs = {\n  objects: Array<QuestStatus_Insert_Input>;\n  on_conflict?: Maybe<QuestStatus_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_QuestStatus_OneArgs = {\n  object: QuestStatus_Insert_Input;\n  on_conflict?: Maybe<QuestStatus_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_SkillCategoryArgs = {\n  objects: Array<SkillCategory_Insert_Input>;\n  on_conflict?: Maybe<SkillCategory_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_SkillCategory_OneArgs = {\n  object: SkillCategory_Insert_Input;\n  on_conflict?: Maybe<SkillCategory_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_GuildArgs = {\n  objects: Array<Guild_Insert_Input>;\n  on_conflict?: Maybe<Guild_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Guild_AccountArgs = {\n  objects: Array<Guild_Account_Insert_Input>;\n  on_conflict?: Maybe<Guild_Account_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Guild_Account_OneArgs = {\n  object: Guild_Account_Insert_Input;\n  on_conflict?: Maybe<Guild_Account_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Guild_OneArgs = {\n  object: Guild_Insert_Input;\n  on_conflict?: Maybe<Guild_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Guild_PlayerArgs = {\n  objects: Array<Guild_Player_Insert_Input>;\n  on_conflict?: Maybe<Guild_Player_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Guild_Player_OneArgs = {\n  object: Guild_Player_Insert_Input;\n  on_conflict?: Maybe<Guild_Player_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_MeArgs = {\n  objects: Array<Me_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Me_OneArgs = {\n  object: Me_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_PlayerArgs = {\n  objects: Array<Player_Insert_Input>;\n  on_conflict?: Maybe<Player_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Player_AccountArgs = {\n  objects: Array<Player_Account_Insert_Input>;\n  on_conflict?: Maybe<Player_Account_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Player_Account_OneArgs = {\n  object: Player_Account_Insert_Input;\n  on_conflict?: Maybe<Player_Account_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Player_OneArgs = {\n  object: Player_Insert_Input;\n  on_conflict?: Maybe<Player_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Player_SkillArgs = {\n  objects: Array<Player_Skill_Insert_Input>;\n  on_conflict?: Maybe<Player_Skill_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Player_Skill_OneArgs = {\n  object: Player_Skill_Insert_Input;\n  on_conflict?: Maybe<Player_Skill_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Player_TypeArgs = {\n  objects: Array<Player_Type_Insert_Input>;\n  on_conflict?: Maybe<Player_Type_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Player_Type_OneArgs = {\n  object: Player_Type_Insert_Input;\n  on_conflict?: Maybe<Player_Type_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Profile_CacheArgs = {\n  objects: Array<Profile_Cache_Insert_Input>;\n  on_conflict?: Maybe<Profile_Cache_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Profile_Cache_OneArgs = {\n  object: Profile_Cache_Insert_Input;\n  on_conflict?: Maybe<Profile_Cache_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_QuestArgs = {\n  objects: Array<Quest_Insert_Input>;\n  on_conflict?: Maybe<Quest_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Quest_CompletionArgs = {\n  objects: Array<Quest_Completion_Insert_Input>;\n  on_conflict?: Maybe<Quest_Completion_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Quest_Completion_OneArgs = {\n  object: Quest_Completion_Insert_Input;\n  on_conflict?: Maybe<Quest_Completion_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Quest_OneArgs = {\n  object: Quest_Insert_Input;\n  on_conflict?: Maybe<Quest_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Quest_SkillArgs = {\n  objects: Array<Quest_Skill_Insert_Input>;\n  on_conflict?: Maybe<Quest_Skill_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Quest_Skill_OneArgs = {\n  object: Quest_Skill_Insert_Input;\n  on_conflict?: Maybe<Quest_Skill_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_SkillArgs = {\n  objects: Array<Skill_Insert_Input>;\n  on_conflict?: Maybe<Skill_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Skill_OneArgs = {\n  object: Skill_Insert_Input;\n  on_conflict?: Maybe<Skill_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdateIdxProfileArgs = {\n  playerId?: Maybe<Scalars['uuid']>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdateQuestCompletionArgs = {\n  updateData: UpdateQuestCompletionInput;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_AccountTypeArgs = {\n  _set?: Maybe<AccountType_Set_Input>;\n  where: AccountType_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_AccountType_By_PkArgs = {\n  _set?: Maybe<AccountType_Set_Input>;\n  pk_columns: AccountType_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_ColorAspectArgs = {\n  _inc?: Maybe<ColorAspect_Inc_Input>;\n  _set?: Maybe<ColorAspect_Set_Input>;\n  where: ColorAspect_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_ColorAspect_By_PkArgs = {\n  _inc?: Maybe<ColorAspect_Inc_Input>;\n  _set?: Maybe<ColorAspect_Set_Input>;\n  pk_columns: ColorAspect_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_GuildPositionArgs = {\n  _set?: Maybe<GuildPosition_Set_Input>;\n  where: GuildPosition_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_GuildPosition_By_PkArgs = {\n  _set?: Maybe<GuildPosition_Set_Input>;\n  pk_columns: GuildPosition_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_GuildStatusArgs = {\n  _set?: Maybe<GuildStatus_Set_Input>;\n  where: GuildStatus_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_GuildStatus_By_PkArgs = {\n  _set?: Maybe<GuildStatus_Set_Input>;\n  pk_columns: GuildStatus_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_GuildTypeArgs = {\n  _set?: Maybe<GuildType_Set_Input>;\n  where: GuildType_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_GuildType_By_PkArgs = {\n  _set?: Maybe<GuildType_Set_Input>;\n  pk_columns: GuildType_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_PlayerRankArgs = {\n  _set?: Maybe<PlayerRank_Set_Input>;\n  where: PlayerRank_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_PlayerRank_By_PkArgs = {\n  _set?: Maybe<PlayerRank_Set_Input>;\n  pk_columns: PlayerRank_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_QuestCompletionStatusArgs = {\n  _set?: Maybe<QuestCompletionStatus_Set_Input>;\n  where: QuestCompletionStatus_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_QuestCompletionStatus_By_PkArgs = {\n  _set?: Maybe<QuestCompletionStatus_Set_Input>;\n  pk_columns: QuestCompletionStatus_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_QuestRepetitionArgs = {\n  _set?: Maybe<QuestRepetition_Set_Input>;\n  where: QuestRepetition_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_QuestRepetition_By_PkArgs = {\n  _set?: Maybe<QuestRepetition_Set_Input>;\n  pk_columns: QuestRepetition_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_QuestStatusArgs = {\n  _set?: Maybe<QuestStatus_Set_Input>;\n  where: QuestStatus_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_QuestStatus_By_PkArgs = {\n  _set?: Maybe<QuestStatus_Set_Input>;\n  pk_columns: QuestStatus_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_SkillCategoryArgs = {\n  _set?: Maybe<SkillCategory_Set_Input>;\n  where: SkillCategory_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_SkillCategory_By_PkArgs = {\n  _set?: Maybe<SkillCategory_Set_Input>;\n  pk_columns: SkillCategory_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_GuildArgs = {\n  _append?: Maybe<Guild_Append_Input>;\n  _delete_at_path?: Maybe<Guild_Delete_At_Path_Input>;\n  _delete_elem?: Maybe<Guild_Delete_Elem_Input>;\n  _delete_key?: Maybe<Guild_Delete_Key_Input>;\n  _prepend?: Maybe<Guild_Prepend_Input>;\n  _set?: Maybe<Guild_Set_Input>;\n  where: Guild_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Guild_AccountArgs = {\n  _set?: Maybe<Guild_Account_Set_Input>;\n  where: Guild_Account_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Guild_Account_By_PkArgs = {\n  _set?: Maybe<Guild_Account_Set_Input>;\n  pk_columns: Guild_Account_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Guild_By_PkArgs = {\n  _append?: Maybe<Guild_Append_Input>;\n  _delete_at_path?: Maybe<Guild_Delete_At_Path_Input>;\n  _delete_elem?: Maybe<Guild_Delete_Elem_Input>;\n  _delete_key?: Maybe<Guild_Delete_Key_Input>;\n  _prepend?: Maybe<Guild_Prepend_Input>;\n  _set?: Maybe<Guild_Set_Input>;\n  pk_columns: Guild_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Guild_PlayerArgs = {\n  _set?: Maybe<Guild_Player_Set_Input>;\n  where: Guild_Player_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Guild_Player_By_PkArgs = {\n  _set?: Maybe<Guild_Player_Set_Input>;\n  pk_columns: Guild_Player_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_MeArgs = {\n  _set?: Maybe<Me_Set_Input>;\n  where: Me_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_PlayerArgs = {\n  _inc?: Maybe<Player_Inc_Input>;\n  _set?: Maybe<Player_Set_Input>;\n  where: Player_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Player_AccountArgs = {\n  _set?: Maybe<Player_Account_Set_Input>;\n  where: Player_Account_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Player_By_PkArgs = {\n  _inc?: Maybe<Player_Inc_Input>;\n  _set?: Maybe<Player_Set_Input>;\n  pk_columns: Player_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Player_SkillArgs = {\n  _set?: Maybe<Player_Skill_Set_Input>;\n  where: Player_Skill_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Player_Skill_By_PkArgs = {\n  _set?: Maybe<Player_Skill_Set_Input>;\n  pk_columns: Player_Skill_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Player_TypeArgs = {\n  _inc?: Maybe<Player_Type_Inc_Input>;\n  _set?: Maybe<Player_Type_Set_Input>;\n  where: Player_Type_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Player_Type_By_PkArgs = {\n  _inc?: Maybe<Player_Type_Inc_Input>;\n  _set?: Maybe<Player_Type_Set_Input>;\n  pk_columns: Player_Type_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Profile_CacheArgs = {\n  _set?: Maybe<Profile_Cache_Set_Input>;\n  where: Profile_Cache_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Profile_Cache_By_PkArgs = {\n  _set?: Maybe<Profile_Cache_Set_Input>;\n  pk_columns: Profile_Cache_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_QuestArgs = {\n  _inc?: Maybe<Quest_Inc_Input>;\n  _set?: Maybe<Quest_Set_Input>;\n  where: Quest_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Quest_By_PkArgs = {\n  _inc?: Maybe<Quest_Inc_Input>;\n  _set?: Maybe<Quest_Set_Input>;\n  pk_columns: Quest_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Quest_CompletionArgs = {\n  _set?: Maybe<Quest_Completion_Set_Input>;\n  where: Quest_Completion_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Quest_Completion_By_PkArgs = {\n  _set?: Maybe<Quest_Completion_Set_Input>;\n  pk_columns: Quest_Completion_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Quest_SkillArgs = {\n  _set?: Maybe<Quest_Skill_Set_Input>;\n  where: Quest_Skill_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Quest_Skill_By_PkArgs = {\n  _set?: Maybe<Quest_Skill_Set_Input>;\n  pk_columns: Quest_Skill_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_SkillArgs = {\n  _set?: Maybe<Skill_Set_Input>;\n  where: Skill_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Skill_By_PkArgs = {\n  _set?: Maybe<Skill_Set_Input>;\n  pk_columns: Skill_Pk_Columns_Input;\n};\n\n\n/** expression to compare columns of type numeric. All fields are combined with logical 'AND'. */\nexport type Numeric_Comparison_Exp = {\n  _eq?: Maybe<Scalars['numeric']>;\n  _gt?: Maybe<Scalars['numeric']>;\n  _gte?: Maybe<Scalars['numeric']>;\n  _in?: Maybe<Array<Scalars['numeric']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['numeric']>;\n  _lte?: Maybe<Scalars['numeric']>;\n  _neq?: Maybe<Scalars['numeric']>;\n  _nin?: Maybe<Array<Scalars['numeric']>>;\n};\n\n/** column ordering options */\nexport enum Order_By {\n  /** in the ascending order, nulls last */\n  Asc = 'asc',\n  /** in the ascending order, nulls first */\n  AscNullsFirst = 'asc_nulls_first',\n  /** in the ascending order, nulls last */\n  AscNullsLast = 'asc_nulls_last',\n  /** in the descending order, nulls first */\n  Desc = 'desc',\n  /** in the descending order, nulls first */\n  DescNullsFirst = 'desc_nulls_first',\n  /** in the descending order, nulls last */\n  DescNullsLast = 'desc_nulls_last'\n}\n\n/** columns and relationships of \"player\" */\nexport type Player = {\n  /** An array relationship */\n  Accounts: Array<Player_Account>;\n  /** An aggregated array relationship */\n  Accounts_aggregate: Player_Account_Aggregate;\n  /** An object relationship */\n  ColorAspect?: Maybe<ColorAspect>;\n  /** An array relationship */\n  Player_Skills: Array<Player_Skill>;\n  /** An aggregated array relationship */\n  Player_Skills_aggregate: Player_Skill_Aggregate;\n  availability_hours?: Maybe<Scalars['Int']>;\n  /** Remote relationship field */\n  box_profile?: Maybe<BoxProfile>;\n  /** Remote relationship field */\n  brightid_status?: Maybe<BrightIdStatus>;\n  color_mask?: Maybe<Scalars['Int']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  /** Remote relationship field */\n  daohausMemberships: Array<Member>;\n  discord_id?: Maybe<Scalars['String']>;\n  ethereum_address: Scalars['String'];\n  /** An array relationship */\n  guilds: Array<Guild_Player>;\n  /** An aggregated array relationship */\n  guilds_aggregate: Guild_Player_Aggregate;\n  id: Scalars['uuid'];\n  /** An object relationship */\n  playerType?: Maybe<Player_Type>;\n  player_type_id?: Maybe<Scalars['Int']>;\n  /** An object relationship */\n  profile_cache?: Maybe<Profile_Cache>;\n  /** An array relationship */\n  quest_completions: Array<Quest_Completion>;\n  /** An aggregated array relationship */\n  quest_completions_aggregate: Quest_Completion_Aggregate;\n  /** An array relationship */\n  quests: Array<Quest>;\n  /** An aggregated array relationship */\n  quests_aggregate: Quest_Aggregate;\n  rank?: Maybe<PlayerRank_Enum>;\n  role?: Maybe<Scalars['String']>;\n  season_xp: Scalars['numeric'];\n  timezone?: Maybe<Scalars['String']>;\n  /** Remote relationship field */\n  token_balances?: Maybe<TokenBalances>;\n  total_xp?: Maybe<Scalars['numeric']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  username: Scalars['String'];\n};\n\n\n/** columns and relationships of \"player\" */\nexport type PlayerAccountsArgs = {\n  distinct_on?: Maybe<Array<Player_Account_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Account_Order_By>>;\n  where?: Maybe<Player_Account_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"player\" */\nexport type PlayerAccounts_AggregateArgs = {\n  distinct_on?: Maybe<Array<Player_Account_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Account_Order_By>>;\n  where?: Maybe<Player_Account_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"player\" */\nexport type PlayerPlayer_SkillsArgs = {\n  distinct_on?: Maybe<Array<Player_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Skill_Order_By>>;\n  where?: Maybe<Player_Skill_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"player\" */\nexport type PlayerPlayer_Skills_AggregateArgs = {\n  distinct_on?: Maybe<Array<Player_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Skill_Order_By>>;\n  where?: Maybe<Player_Skill_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"player\" */\nexport type PlayerGuildsArgs = {\n  distinct_on?: Maybe<Array<Guild_Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Player_Order_By>>;\n  where?: Maybe<Guild_Player_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"player\" */\nexport type PlayerGuilds_AggregateArgs = {\n  distinct_on?: Maybe<Array<Guild_Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Player_Order_By>>;\n  where?: Maybe<Guild_Player_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"player\" */\nexport type PlayerQuest_CompletionsArgs = {\n  distinct_on?: Maybe<Array<Quest_Completion_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Completion_Order_By>>;\n  where?: Maybe<Quest_Completion_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"player\" */\nexport type PlayerQuest_Completions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Completion_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Completion_Order_By>>;\n  where?: Maybe<Quest_Completion_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"player\" */\nexport type PlayerQuestsArgs = {\n  distinct_on?: Maybe<Array<Quest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Order_By>>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"player\" */\nexport type PlayerQuests_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Order_By>>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\n/** columns and relationships of \"player_account\" */\nexport type Player_Account = {\n  /** An object relationship */\n  Player: Player;\n  identifier: Scalars['String'];\n  player_id: Scalars['uuid'];\n  type: AccountType_Enum;\n};\n\n/** aggregated selection of \"player_account\" */\nexport type Player_Account_Aggregate = {\n  aggregate?: Maybe<Player_Account_Aggregate_Fields>;\n  nodes: Array<Player_Account>;\n};\n\n/** aggregate fields of \"player_account\" */\nexport type Player_Account_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Player_Account_Max_Fields>;\n  min?: Maybe<Player_Account_Min_Fields>;\n};\n\n\n/** aggregate fields of \"player_account\" */\nexport type Player_Account_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Player_Account_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"player_account\" */\nexport type Player_Account_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Player_Account_Max_Order_By>;\n  min?: Maybe<Player_Account_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"player_account\" */\nexport type Player_Account_Arr_Rel_Insert_Input = {\n  data: Array<Player_Account_Insert_Input>;\n  on_conflict?: Maybe<Player_Account_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"player_account\". All fields are combined with a logical 'AND'. */\nexport type Player_Account_Bool_Exp = {\n  Player?: Maybe<Player_Bool_Exp>;\n  _and?: Maybe<Array<Maybe<Player_Account_Bool_Exp>>>;\n  _not?: Maybe<Player_Account_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Player_Account_Bool_Exp>>>;\n  identifier?: Maybe<String_Comparison_Exp>;\n  player_id?: Maybe<Uuid_Comparison_Exp>;\n  type?: Maybe<AccountType_Enum_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"player_account\" */\nexport enum Player_Account_Constraint {\n  /** unique or primary key constraint */\n  AccountIdentifierTypeKey = 'Account_identifier_type_key'\n}\n\n/** input type for inserting data into table \"player_account\" */\nexport type Player_Account_Insert_Input = {\n  Player?: Maybe<Player_Obj_Rel_Insert_Input>;\n  identifier?: Maybe<Scalars['String']>;\n  player_id?: Maybe<Scalars['uuid']>;\n  type?: Maybe<AccountType_Enum>;\n};\n\n/** aggregate max on columns */\nexport type Player_Account_Max_Fields = {\n  identifier?: Maybe<Scalars['String']>;\n  player_id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"player_account\" */\nexport type Player_Account_Max_Order_By = {\n  identifier?: Maybe<Order_By>;\n  player_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Player_Account_Min_Fields = {\n  identifier?: Maybe<Scalars['String']>;\n  player_id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"player_account\" */\nexport type Player_Account_Min_Order_By = {\n  identifier?: Maybe<Order_By>;\n  player_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"player_account\" */\nexport type Player_Account_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Player_Account>;\n};\n\n/** input type for inserting object relation for remote table \"player_account\" */\nexport type Player_Account_Obj_Rel_Insert_Input = {\n  data: Player_Account_Insert_Input;\n  on_conflict?: Maybe<Player_Account_On_Conflict>;\n};\n\n/** on conflict condition type for table \"player_account\" */\nexport type Player_Account_On_Conflict = {\n  constraint: Player_Account_Constraint;\n  update_columns: Array<Player_Account_Update_Column>;\n  where?: Maybe<Player_Account_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"player_account\" */\nexport type Player_Account_Order_By = {\n  Player?: Maybe<Player_Order_By>;\n  identifier?: Maybe<Order_By>;\n  player_id?: Maybe<Order_By>;\n  type?: Maybe<Order_By>;\n};\n\n/** select columns of table \"player_account\" */\nexport enum Player_Account_Select_Column {\n  /** column name */\n  Identifier = 'identifier',\n  /** column name */\n  PlayerId = 'player_id',\n  /** column name */\n  Type = 'type'\n}\n\n/** input type for updating data in table \"player_account\" */\nexport type Player_Account_Set_Input = {\n  identifier?: Maybe<Scalars['String']>;\n  player_id?: Maybe<Scalars['uuid']>;\n  type?: Maybe<AccountType_Enum>;\n};\n\n/** update columns of table \"player_account\" */\nexport enum Player_Account_Update_Column {\n  /** column name */\n  Identifier = 'identifier',\n  /** column name */\n  PlayerId = 'player_id',\n  /** column name */\n  Type = 'type'\n}\n\n/** aggregated selection of \"player\" */\nexport type Player_Aggregate = {\n  aggregate?: Maybe<Player_Aggregate_Fields>;\n  nodes: Array<Player>;\n};\n\n/** aggregate fields of \"player\" */\nexport type Player_Aggregate_Fields = {\n  avg?: Maybe<Player_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Player_Max_Fields>;\n  min?: Maybe<Player_Min_Fields>;\n  stddev?: Maybe<Player_Stddev_Fields>;\n  stddev_pop?: Maybe<Player_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Player_Stddev_Samp_Fields>;\n  sum?: Maybe<Player_Sum_Fields>;\n  var_pop?: Maybe<Player_Var_Pop_Fields>;\n  var_samp?: Maybe<Player_Var_Samp_Fields>;\n  variance?: Maybe<Player_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"player\" */\nexport type Player_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Player_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"player\" */\nexport type Player_Aggregate_Order_By = {\n  avg?: Maybe<Player_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Player_Max_Order_By>;\n  min?: Maybe<Player_Min_Order_By>;\n  stddev?: Maybe<Player_Stddev_Order_By>;\n  stddev_pop?: Maybe<Player_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Player_Stddev_Samp_Order_By>;\n  sum?: Maybe<Player_Sum_Order_By>;\n  var_pop?: Maybe<Player_Var_Pop_Order_By>;\n  var_samp?: Maybe<Player_Var_Samp_Order_By>;\n  variance?: Maybe<Player_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"player\" */\nexport type Player_Arr_Rel_Insert_Input = {\n  data: Array<Player_Insert_Input>;\n  on_conflict?: Maybe<Player_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Player_Avg_Fields = {\n  availability_hours?: Maybe<Scalars['Float']>;\n  color_mask?: Maybe<Scalars['Float']>;\n  player_type_id?: Maybe<Scalars['Float']>;\n  season_xp?: Maybe<Scalars['Float']>;\n  total_xp?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"player\" */\nexport type Player_Avg_Order_By = {\n  availability_hours?: Maybe<Order_By>;\n  color_mask?: Maybe<Order_By>;\n  player_type_id?: Maybe<Order_By>;\n  season_xp?: Maybe<Order_By>;\n  total_xp?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"player\". All fields are combined with a logical 'AND'. */\nexport type Player_Bool_Exp = {\n  Accounts?: Maybe<Player_Account_Bool_Exp>;\n  ColorAspect?: Maybe<ColorAspect_Bool_Exp>;\n  Player_Skills?: Maybe<Player_Skill_Bool_Exp>;\n  _and?: Maybe<Array<Maybe<Player_Bool_Exp>>>;\n  _not?: Maybe<Player_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Player_Bool_Exp>>>;\n  availability_hours?: Maybe<Int_Comparison_Exp>;\n  color_mask?: Maybe<Int_Comparison_Exp>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  discord_id?: Maybe<String_Comparison_Exp>;\n  ethereum_address?: Maybe<String_Comparison_Exp>;\n  guilds?: Maybe<Guild_Player_Bool_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  playerType?: Maybe<Player_Type_Bool_Exp>;\n  player_type_id?: Maybe<Int_Comparison_Exp>;\n  profile_cache?: Maybe<Profile_Cache_Bool_Exp>;\n  quest_completions?: Maybe<Quest_Completion_Bool_Exp>;\n  quests?: Maybe<Quest_Bool_Exp>;\n  rank?: Maybe<PlayerRank_Enum_Comparison_Exp>;\n  role?: Maybe<String_Comparison_Exp>;\n  season_xp?: Maybe<Numeric_Comparison_Exp>;\n  timezone?: Maybe<String_Comparison_Exp>;\n  total_xp?: Maybe<Numeric_Comparison_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n  username?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"player\" */\nexport enum Player_Constraint {\n  /** unique or primary key constraint */\n  PlayerEthereumAddressUniqueKey = 'Player_ethereum_address_unique_key',\n  /** unique or primary key constraint */\n  PlayerPkey = 'Player_pkey',\n  /** unique or primary key constraint */\n  PlayerUsernameUniqueKey = 'Player_username_unique_key',\n  /** unique or primary key constraint */\n  PlayerDiscordIdKey = 'player_discord_id_key'\n}\n\n/** input type for incrementing integer column in table \"player\" */\nexport type Player_Inc_Input = {\n  availability_hours?: Maybe<Scalars['Int']>;\n  color_mask?: Maybe<Scalars['Int']>;\n  player_type_id?: Maybe<Scalars['Int']>;\n  season_xp?: Maybe<Scalars['numeric']>;\n  total_xp?: Maybe<Scalars['numeric']>;\n};\n\n/** input type for inserting data into table \"player\" */\nexport type Player_Insert_Input = {\n  Accounts?: Maybe<Player_Account_Arr_Rel_Insert_Input>;\n  ColorAspect?: Maybe<ColorAspect_Obj_Rel_Insert_Input>;\n  Player_Skills?: Maybe<Player_Skill_Arr_Rel_Insert_Input>;\n  availability_hours?: Maybe<Scalars['Int']>;\n  color_mask?: Maybe<Scalars['Int']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  discord_id?: Maybe<Scalars['String']>;\n  ethereum_address?: Maybe<Scalars['String']>;\n  guilds?: Maybe<Guild_Player_Arr_Rel_Insert_Input>;\n  id?: Maybe<Scalars['uuid']>;\n  playerType?: Maybe<Player_Type_Obj_Rel_Insert_Input>;\n  player_type_id?: Maybe<Scalars['Int']>;\n  profile_cache?: Maybe<Profile_Cache_Obj_Rel_Insert_Input>;\n  quest_completions?: Maybe<Quest_Completion_Arr_Rel_Insert_Input>;\n  quests?: Maybe<Quest_Arr_Rel_Insert_Input>;\n  rank?: Maybe<PlayerRank_Enum>;\n  role?: Maybe<Scalars['String']>;\n  season_xp?: Maybe<Scalars['numeric']>;\n  timezone?: Maybe<Scalars['String']>;\n  total_xp?: Maybe<Scalars['numeric']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Player_Max_Fields = {\n  availability_hours?: Maybe<Scalars['Int']>;\n  color_mask?: Maybe<Scalars['Int']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  discord_id?: Maybe<Scalars['String']>;\n  ethereum_address?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  player_type_id?: Maybe<Scalars['Int']>;\n  role?: Maybe<Scalars['String']>;\n  season_xp?: Maybe<Scalars['numeric']>;\n  timezone?: Maybe<Scalars['String']>;\n  total_xp?: Maybe<Scalars['numeric']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"player\" */\nexport type Player_Max_Order_By = {\n  availability_hours?: Maybe<Order_By>;\n  color_mask?: Maybe<Order_By>;\n  created_at?: Maybe<Order_By>;\n  discord_id?: Maybe<Order_By>;\n  ethereum_address?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  player_type_id?: Maybe<Order_By>;\n  role?: Maybe<Order_By>;\n  season_xp?: Maybe<Order_By>;\n  timezone?: Maybe<Order_By>;\n  total_xp?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Player_Min_Fields = {\n  availability_hours?: Maybe<Scalars['Int']>;\n  color_mask?: Maybe<Scalars['Int']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  discord_id?: Maybe<Scalars['String']>;\n  ethereum_address?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  player_type_id?: Maybe<Scalars['Int']>;\n  role?: Maybe<Scalars['String']>;\n  season_xp?: Maybe<Scalars['numeric']>;\n  timezone?: Maybe<Scalars['String']>;\n  total_xp?: Maybe<Scalars['numeric']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"player\" */\nexport type Player_Min_Order_By = {\n  availability_hours?: Maybe<Order_By>;\n  color_mask?: Maybe<Order_By>;\n  created_at?: Maybe<Order_By>;\n  discord_id?: Maybe<Order_By>;\n  ethereum_address?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  player_type_id?: Maybe<Order_By>;\n  role?: Maybe<Order_By>;\n  season_xp?: Maybe<Order_By>;\n  timezone?: Maybe<Order_By>;\n  total_xp?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"player\" */\nexport type Player_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Player>;\n};\n\n/** input type for inserting object relation for remote table \"player\" */\nexport type Player_Obj_Rel_Insert_Input = {\n  data: Player_Insert_Input;\n  on_conflict?: Maybe<Player_On_Conflict>;\n};\n\n/** on conflict condition type for table \"player\" */\nexport type Player_On_Conflict = {\n  constraint: Player_Constraint;\n  update_columns: Array<Player_Update_Column>;\n  where?: Maybe<Player_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"player\" */\nexport type Player_Order_By = {\n  Accounts_aggregate?: Maybe<Player_Account_Aggregate_Order_By>;\n  ColorAspect?: Maybe<ColorAspect_Order_By>;\n  Player_Skills_aggregate?: Maybe<Player_Skill_Aggregate_Order_By>;\n  availability_hours?: Maybe<Order_By>;\n  color_mask?: Maybe<Order_By>;\n  created_at?: Maybe<Order_By>;\n  discord_id?: Maybe<Order_By>;\n  ethereum_address?: Maybe<Order_By>;\n  guilds_aggregate?: Maybe<Guild_Player_Aggregate_Order_By>;\n  id?: Maybe<Order_By>;\n  playerType?: Maybe<Player_Type_Order_By>;\n  player_type_id?: Maybe<Order_By>;\n  profile_cache?: Maybe<Profile_Cache_Order_By>;\n  quest_completions_aggregate?: Maybe<Quest_Completion_Aggregate_Order_By>;\n  quests_aggregate?: Maybe<Quest_Aggregate_Order_By>;\n  rank?: Maybe<Order_By>;\n  role?: Maybe<Order_By>;\n  season_xp?: Maybe<Order_By>;\n  timezone?: Maybe<Order_By>;\n  total_xp?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  username?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"player\" */\nexport type Player_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"player\" */\nexport enum Player_Select_Column {\n  /** column name */\n  AvailabilityHours = 'availability_hours',\n  /** column name */\n  ColorMask = 'color_mask',\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  DiscordId = 'discord_id',\n  /** column name */\n  EthereumAddress = 'ethereum_address',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  PlayerTypeId = 'player_type_id',\n  /** column name */\n  Rank = 'rank',\n  /** column name */\n  Role = 'role',\n  /** column name */\n  SeasonXp = 'season_xp',\n  /** column name */\n  Timezone = 'timezone',\n  /** column name */\n  TotalXp = 'total_xp',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  Username = 'username'\n}\n\n/** input type for updating data in table \"player\" */\nexport type Player_Set_Input = {\n  availability_hours?: Maybe<Scalars['Int']>;\n  color_mask?: Maybe<Scalars['Int']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  discord_id?: Maybe<Scalars['String']>;\n  ethereum_address?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  player_type_id?: Maybe<Scalars['Int']>;\n  rank?: Maybe<PlayerRank_Enum>;\n  role?: Maybe<Scalars['String']>;\n  season_xp?: Maybe<Scalars['numeric']>;\n  timezone?: Maybe<Scalars['String']>;\n  total_xp?: Maybe<Scalars['numeric']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  username?: Maybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"player_skill\" */\nexport type Player_Skill = {\n  /** An object relationship */\n  Skill: Skill;\n  player_id: Scalars['uuid'];\n  skill_id: Scalars['uuid'];\n};\n\n/** aggregated selection of \"player_skill\" */\nexport type Player_Skill_Aggregate = {\n  aggregate?: Maybe<Player_Skill_Aggregate_Fields>;\n  nodes: Array<Player_Skill>;\n};\n\n/** aggregate fields of \"player_skill\" */\nexport type Player_Skill_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Player_Skill_Max_Fields>;\n  min?: Maybe<Player_Skill_Min_Fields>;\n};\n\n\n/** aggregate fields of \"player_skill\" */\nexport type Player_Skill_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Player_Skill_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"player_skill\" */\nexport type Player_Skill_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Player_Skill_Max_Order_By>;\n  min?: Maybe<Player_Skill_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"player_skill\" */\nexport type Player_Skill_Arr_Rel_Insert_Input = {\n  data: Array<Player_Skill_Insert_Input>;\n  on_conflict?: Maybe<Player_Skill_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"player_skill\". All fields are combined with a logical 'AND'. */\nexport type Player_Skill_Bool_Exp = {\n  Skill?: Maybe<Skill_Bool_Exp>;\n  _and?: Maybe<Array<Maybe<Player_Skill_Bool_Exp>>>;\n  _not?: Maybe<Player_Skill_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Player_Skill_Bool_Exp>>>;\n  player_id?: Maybe<Uuid_Comparison_Exp>;\n  skill_id?: Maybe<Uuid_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"player_skill\" */\nexport enum Player_Skill_Constraint {\n  /** unique or primary key constraint */\n  PlayerSkillUniqueKey = 'Player_Skill_unique_key'\n}\n\n/** input type for inserting data into table \"player_skill\" */\nexport type Player_Skill_Insert_Input = {\n  Skill?: Maybe<Skill_Obj_Rel_Insert_Input>;\n  player_id?: Maybe<Scalars['uuid']>;\n  skill_id?: Maybe<Scalars['uuid']>;\n};\n\n/** aggregate max on columns */\nexport type Player_Skill_Max_Fields = {\n  player_id?: Maybe<Scalars['uuid']>;\n  skill_id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"player_skill\" */\nexport type Player_Skill_Max_Order_By = {\n  player_id?: Maybe<Order_By>;\n  skill_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Player_Skill_Min_Fields = {\n  player_id?: Maybe<Scalars['uuid']>;\n  skill_id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"player_skill\" */\nexport type Player_Skill_Min_Order_By = {\n  player_id?: Maybe<Order_By>;\n  skill_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"player_skill\" */\nexport type Player_Skill_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Player_Skill>;\n};\n\n/** input type for inserting object relation for remote table \"player_skill\" */\nexport type Player_Skill_Obj_Rel_Insert_Input = {\n  data: Player_Skill_Insert_Input;\n  on_conflict?: Maybe<Player_Skill_On_Conflict>;\n};\n\n/** on conflict condition type for table \"player_skill\" */\nexport type Player_Skill_On_Conflict = {\n  constraint: Player_Skill_Constraint;\n  update_columns: Array<Player_Skill_Update_Column>;\n  where?: Maybe<Player_Skill_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"player_skill\" */\nexport type Player_Skill_Order_By = {\n  Skill?: Maybe<Skill_Order_By>;\n  player_id?: Maybe<Order_By>;\n  skill_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"player_skill\" */\nexport type Player_Skill_Pk_Columns_Input = {\n  player_id: Scalars['uuid'];\n  skill_id: Scalars['uuid'];\n};\n\n/** select columns of table \"player_skill\" */\nexport enum Player_Skill_Select_Column {\n  /** column name */\n  PlayerId = 'player_id',\n  /** column name */\n  SkillId = 'skill_id'\n}\n\n/** input type for updating data in table \"player_skill\" */\nexport type Player_Skill_Set_Input = {\n  player_id?: Maybe<Scalars['uuid']>;\n  skill_id?: Maybe<Scalars['uuid']>;\n};\n\n/** update columns of table \"player_skill\" */\nexport enum Player_Skill_Update_Column {\n  /** column name */\n  PlayerId = 'player_id',\n  /** column name */\n  SkillId = 'skill_id'\n}\n\n/** aggregate stddev on columns */\nexport type Player_Stddev_Fields = {\n  availability_hours?: Maybe<Scalars['Float']>;\n  color_mask?: Maybe<Scalars['Float']>;\n  player_type_id?: Maybe<Scalars['Float']>;\n  season_xp?: Maybe<Scalars['Float']>;\n  total_xp?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"player\" */\nexport type Player_Stddev_Order_By = {\n  availability_hours?: Maybe<Order_By>;\n  color_mask?: Maybe<Order_By>;\n  player_type_id?: Maybe<Order_By>;\n  season_xp?: Maybe<Order_By>;\n  total_xp?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Player_Stddev_Pop_Fields = {\n  availability_hours?: Maybe<Scalars['Float']>;\n  color_mask?: Maybe<Scalars['Float']>;\n  player_type_id?: Maybe<Scalars['Float']>;\n  season_xp?: Maybe<Scalars['Float']>;\n  total_xp?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"player\" */\nexport type Player_Stddev_Pop_Order_By = {\n  availability_hours?: Maybe<Order_By>;\n  color_mask?: Maybe<Order_By>;\n  player_type_id?: Maybe<Order_By>;\n  season_xp?: Maybe<Order_By>;\n  total_xp?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Player_Stddev_Samp_Fields = {\n  availability_hours?: Maybe<Scalars['Float']>;\n  color_mask?: Maybe<Scalars['Float']>;\n  player_type_id?: Maybe<Scalars['Float']>;\n  season_xp?: Maybe<Scalars['Float']>;\n  total_xp?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"player\" */\nexport type Player_Stddev_Samp_Order_By = {\n  availability_hours?: Maybe<Order_By>;\n  color_mask?: Maybe<Order_By>;\n  player_type_id?: Maybe<Order_By>;\n  season_xp?: Maybe<Order_By>;\n  total_xp?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Player_Sum_Fields = {\n  availability_hours?: Maybe<Scalars['Int']>;\n  color_mask?: Maybe<Scalars['Int']>;\n  player_type_id?: Maybe<Scalars['Int']>;\n  season_xp?: Maybe<Scalars['numeric']>;\n  total_xp?: Maybe<Scalars['numeric']>;\n};\n\n/** order by sum() on columns of table \"player\" */\nexport type Player_Sum_Order_By = {\n  availability_hours?: Maybe<Order_By>;\n  color_mask?: Maybe<Order_By>;\n  player_type_id?: Maybe<Order_By>;\n  season_xp?: Maybe<Order_By>;\n  total_xp?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"player_type\" */\nexport type Player_Type = {\n  description: Scalars['String'];\n  id: Scalars['Int'];\n  imageUrl?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n};\n\n/** aggregated selection of \"player_type\" */\nexport type Player_Type_Aggregate = {\n  aggregate?: Maybe<Player_Type_Aggregate_Fields>;\n  nodes: Array<Player_Type>;\n};\n\n/** aggregate fields of \"player_type\" */\nexport type Player_Type_Aggregate_Fields = {\n  avg?: Maybe<Player_Type_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Player_Type_Max_Fields>;\n  min?: Maybe<Player_Type_Min_Fields>;\n  stddev?: Maybe<Player_Type_Stddev_Fields>;\n  stddev_pop?: Maybe<Player_Type_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Player_Type_Stddev_Samp_Fields>;\n  sum?: Maybe<Player_Type_Sum_Fields>;\n  var_pop?: Maybe<Player_Type_Var_Pop_Fields>;\n  var_samp?: Maybe<Player_Type_Var_Samp_Fields>;\n  variance?: Maybe<Player_Type_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"player_type\" */\nexport type Player_Type_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Player_Type_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"player_type\" */\nexport type Player_Type_Aggregate_Order_By = {\n  avg?: Maybe<Player_Type_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Player_Type_Max_Order_By>;\n  min?: Maybe<Player_Type_Min_Order_By>;\n  stddev?: Maybe<Player_Type_Stddev_Order_By>;\n  stddev_pop?: Maybe<Player_Type_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Player_Type_Stddev_Samp_Order_By>;\n  sum?: Maybe<Player_Type_Sum_Order_By>;\n  var_pop?: Maybe<Player_Type_Var_Pop_Order_By>;\n  var_samp?: Maybe<Player_Type_Var_Samp_Order_By>;\n  variance?: Maybe<Player_Type_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"player_type\" */\nexport type Player_Type_Arr_Rel_Insert_Input = {\n  data: Array<Player_Type_Insert_Input>;\n  on_conflict?: Maybe<Player_Type_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Player_Type_Avg_Fields = {\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"player_type\" */\nexport type Player_Type_Avg_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"player_type\". All fields are combined with a logical 'AND'. */\nexport type Player_Type_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Player_Type_Bool_Exp>>>;\n  _not?: Maybe<Player_Type_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Player_Type_Bool_Exp>>>;\n  description?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Int_Comparison_Exp>;\n  imageUrl?: Maybe<String_Comparison_Exp>;\n  title?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"player_type\" */\nexport enum Player_Type_Constraint {\n  /** unique or primary key constraint */\n  PlayerTypePkey = 'PlayerType_pkey',\n  /** unique or primary key constraint */\n  PlayerTypeTitleKey = 'PlayerType_title_key'\n}\n\n/** input type for incrementing integer column in table \"player_type\" */\nexport type Player_Type_Inc_Input = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"player_type\" */\nexport type Player_Type_Insert_Input = {\n  description?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  imageUrl?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Player_Type_Max_Fields = {\n  description?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  imageUrl?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"player_type\" */\nexport type Player_Type_Max_Order_By = {\n  description?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  imageUrl?: Maybe<Order_By>;\n  title?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Player_Type_Min_Fields = {\n  description?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  imageUrl?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"player_type\" */\nexport type Player_Type_Min_Order_By = {\n  description?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  imageUrl?: Maybe<Order_By>;\n  title?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"player_type\" */\nexport type Player_Type_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Player_Type>;\n};\n\n/** input type for inserting object relation for remote table \"player_type\" */\nexport type Player_Type_Obj_Rel_Insert_Input = {\n  data: Player_Type_Insert_Input;\n  on_conflict?: Maybe<Player_Type_On_Conflict>;\n};\n\n/** on conflict condition type for table \"player_type\" */\nexport type Player_Type_On_Conflict = {\n  constraint: Player_Type_Constraint;\n  update_columns: Array<Player_Type_Update_Column>;\n  where?: Maybe<Player_Type_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"player_type\" */\nexport type Player_Type_Order_By = {\n  description?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  imageUrl?: Maybe<Order_By>;\n  title?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"player_type\" */\nexport type Player_Type_Pk_Columns_Input = {\n  id: Scalars['Int'];\n};\n\n/** select columns of table \"player_type\" */\nexport enum Player_Type_Select_Column {\n  /** column name */\n  Description = 'description',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ImageUrl = 'imageUrl',\n  /** column name */\n  Title = 'title'\n}\n\n/** input type for updating data in table \"player_type\" */\nexport type Player_Type_Set_Input = {\n  description?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  imageUrl?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Player_Type_Stddev_Fields = {\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"player_type\" */\nexport type Player_Type_Stddev_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Player_Type_Stddev_Pop_Fields = {\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"player_type\" */\nexport type Player_Type_Stddev_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Player_Type_Stddev_Samp_Fields = {\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"player_type\" */\nexport type Player_Type_Stddev_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Player_Type_Sum_Fields = {\n  id?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"player_type\" */\nexport type Player_Type_Sum_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"player_type\" */\nexport enum Player_Type_Update_Column {\n  /** column name */\n  Description = 'description',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ImageUrl = 'imageUrl',\n  /** column name */\n  Title = 'title'\n}\n\n/** aggregate var_pop on columns */\nexport type Player_Type_Var_Pop_Fields = {\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"player_type\" */\nexport type Player_Type_Var_Pop_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Player_Type_Var_Samp_Fields = {\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"player_type\" */\nexport type Player_Type_Var_Samp_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Player_Type_Variance_Fields = {\n  id?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"player_type\" */\nexport type Player_Type_Variance_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** update columns of table \"player\" */\nexport enum Player_Update_Column {\n  /** column name */\n  AvailabilityHours = 'availability_hours',\n  /** column name */\n  ColorMask = 'color_mask',\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  DiscordId = 'discord_id',\n  /** column name */\n  EthereumAddress = 'ethereum_address',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  PlayerTypeId = 'player_type_id',\n  /** column name */\n  Rank = 'rank',\n  /** column name */\n  Role = 'role',\n  /** column name */\n  SeasonXp = 'season_xp',\n  /** column name */\n  Timezone = 'timezone',\n  /** column name */\n  TotalXp = 'total_xp',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  Username = 'username'\n}\n\n/** aggregate var_pop on columns */\nexport type Player_Var_Pop_Fields = {\n  availability_hours?: Maybe<Scalars['Float']>;\n  color_mask?: Maybe<Scalars['Float']>;\n  player_type_id?: Maybe<Scalars['Float']>;\n  season_xp?: Maybe<Scalars['Float']>;\n  total_xp?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"player\" */\nexport type Player_Var_Pop_Order_By = {\n  availability_hours?: Maybe<Order_By>;\n  color_mask?: Maybe<Order_By>;\n  player_type_id?: Maybe<Order_By>;\n  season_xp?: Maybe<Order_By>;\n  total_xp?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Player_Var_Samp_Fields = {\n  availability_hours?: Maybe<Scalars['Float']>;\n  color_mask?: Maybe<Scalars['Float']>;\n  player_type_id?: Maybe<Scalars['Float']>;\n  season_xp?: Maybe<Scalars['Float']>;\n  total_xp?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"player\" */\nexport type Player_Var_Samp_Order_By = {\n  availability_hours?: Maybe<Order_By>;\n  color_mask?: Maybe<Order_By>;\n  player_type_id?: Maybe<Order_By>;\n  season_xp?: Maybe<Order_By>;\n  total_xp?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Player_Variance_Fields = {\n  availability_hours?: Maybe<Scalars['Float']>;\n  color_mask?: Maybe<Scalars['Float']>;\n  player_type_id?: Maybe<Scalars['Float']>;\n  season_xp?: Maybe<Scalars['Float']>;\n  total_xp?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"player\" */\nexport type Player_Variance_Order_By = {\n  availability_hours?: Maybe<Order_By>;\n  color_mask?: Maybe<Order_By>;\n  player_type_id?: Maybe<Order_By>;\n  season_xp?: Maybe<Order_By>;\n  total_xp?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"PlayerRank\" */\nexport type PlayerRank = {\n  rank: Scalars['String'];\n};\n\n/** aggregated selection of \"PlayerRank\" */\nexport type PlayerRank_Aggregate = {\n  aggregate?: Maybe<PlayerRank_Aggregate_Fields>;\n  nodes: Array<PlayerRank>;\n};\n\n/** aggregate fields of \"PlayerRank\" */\nexport type PlayerRank_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<PlayerRank_Max_Fields>;\n  min?: Maybe<PlayerRank_Min_Fields>;\n};\n\n\n/** aggregate fields of \"PlayerRank\" */\nexport type PlayerRank_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<PlayerRank_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"PlayerRank\" */\nexport type PlayerRank_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<PlayerRank_Max_Order_By>;\n  min?: Maybe<PlayerRank_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"PlayerRank\" */\nexport type PlayerRank_Arr_Rel_Insert_Input = {\n  data: Array<PlayerRank_Insert_Input>;\n  on_conflict?: Maybe<PlayerRank_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"PlayerRank\". All fields are combined with a logical 'AND'. */\nexport type PlayerRank_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<PlayerRank_Bool_Exp>>>;\n  _not?: Maybe<PlayerRank_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<PlayerRank_Bool_Exp>>>;\n  rank?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"PlayerRank\" */\nexport enum PlayerRank_Constraint {\n  /** unique or primary key constraint */\n  PlayerRankPkey = 'Player_Rank_pkey'\n}\n\nexport enum PlayerRank_Enum {\n  Bronze = 'BRONZE',\n  Diamond = 'DIAMOND',\n  Gold = 'GOLD',\n  Platinum = 'PLATINUM',\n  Silver = 'SILVER'\n}\n\n/** expression to compare columns of type PlayerRank_enum. All fields are combined with logical 'AND'. */\nexport type PlayerRank_Enum_Comparison_Exp = {\n  _eq?: Maybe<PlayerRank_Enum>;\n  _in?: Maybe<Array<PlayerRank_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<PlayerRank_Enum>;\n  _nin?: Maybe<Array<PlayerRank_Enum>>;\n};\n\n/** input type for inserting data into table \"PlayerRank\" */\nexport type PlayerRank_Insert_Input = {\n  rank?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type PlayerRank_Max_Fields = {\n  rank?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"PlayerRank\" */\nexport type PlayerRank_Max_Order_By = {\n  rank?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type PlayerRank_Min_Fields = {\n  rank?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"PlayerRank\" */\nexport type PlayerRank_Min_Order_By = {\n  rank?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"PlayerRank\" */\nexport type PlayerRank_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<PlayerRank>;\n};\n\n/** input type for inserting object relation for remote table \"PlayerRank\" */\nexport type PlayerRank_Obj_Rel_Insert_Input = {\n  data: PlayerRank_Insert_Input;\n  on_conflict?: Maybe<PlayerRank_On_Conflict>;\n};\n\n/** on conflict condition type for table \"PlayerRank\" */\nexport type PlayerRank_On_Conflict = {\n  constraint: PlayerRank_Constraint;\n  update_columns: Array<PlayerRank_Update_Column>;\n  where?: Maybe<PlayerRank_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"PlayerRank\" */\nexport type PlayerRank_Order_By = {\n  rank?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"PlayerRank\" */\nexport type PlayerRank_Pk_Columns_Input = {\n  rank: Scalars['String'];\n};\n\n/** select columns of table \"PlayerRank\" */\nexport enum PlayerRank_Select_Column {\n  /** column name */\n  Rank = 'rank'\n}\n\n/** input type for updating data in table \"PlayerRank\" */\nexport type PlayerRank_Set_Input = {\n  rank?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"PlayerRank\" */\nexport enum PlayerRank_Update_Column {\n  /** column name */\n  Rank = 'rank'\n}\n\n/** columns and relationships of \"profile_cache\" */\nexport type Profile_Cache = {\n  backgroundImageURL?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  emoji?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  id: Scalars['uuid'];\n  imageURL?: Maybe<Scalars['String']>;\n  last_checked_at?: Maybe<Scalars['timestamptz']>;\n  location?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  /** An object relationship */\n  player: Player;\n  playerId: Scalars['uuid'];\n  website?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"profile_cache\" */\nexport type Profile_Cache_Aggregate = {\n  aggregate?: Maybe<Profile_Cache_Aggregate_Fields>;\n  nodes: Array<Profile_Cache>;\n};\n\n/** aggregate fields of \"profile_cache\" */\nexport type Profile_Cache_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Profile_Cache_Max_Fields>;\n  min?: Maybe<Profile_Cache_Min_Fields>;\n};\n\n\n/** aggregate fields of \"profile_cache\" */\nexport type Profile_Cache_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Profile_Cache_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"profile_cache\" */\nexport type Profile_Cache_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Profile_Cache_Max_Order_By>;\n  min?: Maybe<Profile_Cache_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"profile_cache\" */\nexport type Profile_Cache_Arr_Rel_Insert_Input = {\n  data: Array<Profile_Cache_Insert_Input>;\n  on_conflict?: Maybe<Profile_Cache_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"profile_cache\". All fields are combined with a logical 'AND'. */\nexport type Profile_Cache_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Profile_Cache_Bool_Exp>>>;\n  _not?: Maybe<Profile_Cache_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Profile_Cache_Bool_Exp>>>;\n  backgroundImageURL?: Maybe<String_Comparison_Exp>;\n  country?: Maybe<String_Comparison_Exp>;\n  description?: Maybe<String_Comparison_Exp>;\n  emoji?: Maybe<String_Comparison_Exp>;\n  gender?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  imageURL?: Maybe<String_Comparison_Exp>;\n  last_checked_at?: Maybe<Timestamptz_Comparison_Exp>;\n  location?: Maybe<String_Comparison_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  player?: Maybe<Player_Bool_Exp>;\n  playerId?: Maybe<Uuid_Comparison_Exp>;\n  website?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"profile_cache\" */\nexport enum Profile_Cache_Constraint {\n  /** unique or primary key constraint */\n  ProfileCachePkey = 'profile_cache_pkey',\n  /** unique or primary key constraint */\n  ProfileCachePlayerIdKey = 'profile_cache_player_id_key'\n}\n\n/** input type for inserting data into table \"profile_cache\" */\nexport type Profile_Cache_Insert_Input = {\n  backgroundImageURL?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  emoji?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  imageURL?: Maybe<Scalars['String']>;\n  last_checked_at?: Maybe<Scalars['timestamptz']>;\n  location?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  player?: Maybe<Player_Obj_Rel_Insert_Input>;\n  playerId?: Maybe<Scalars['uuid']>;\n  website?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Profile_Cache_Max_Fields = {\n  backgroundImageURL?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  emoji?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  imageURL?: Maybe<Scalars['String']>;\n  last_checked_at?: Maybe<Scalars['timestamptz']>;\n  location?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  playerId?: Maybe<Scalars['uuid']>;\n  website?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"profile_cache\" */\nexport type Profile_Cache_Max_Order_By = {\n  backgroundImageURL?: Maybe<Order_By>;\n  country?: Maybe<Order_By>;\n  description?: Maybe<Order_By>;\n  emoji?: Maybe<Order_By>;\n  gender?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  imageURL?: Maybe<Order_By>;\n  last_checked_at?: Maybe<Order_By>;\n  location?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  playerId?: Maybe<Order_By>;\n  website?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Profile_Cache_Min_Fields = {\n  backgroundImageURL?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  emoji?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  imageURL?: Maybe<Scalars['String']>;\n  last_checked_at?: Maybe<Scalars['timestamptz']>;\n  location?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  playerId?: Maybe<Scalars['uuid']>;\n  website?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"profile_cache\" */\nexport type Profile_Cache_Min_Order_By = {\n  backgroundImageURL?: Maybe<Order_By>;\n  country?: Maybe<Order_By>;\n  description?: Maybe<Order_By>;\n  emoji?: Maybe<Order_By>;\n  gender?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  imageURL?: Maybe<Order_By>;\n  last_checked_at?: Maybe<Order_By>;\n  location?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  playerId?: Maybe<Order_By>;\n  website?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"profile_cache\" */\nexport type Profile_Cache_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Profile_Cache>;\n};\n\n/** input type for inserting object relation for remote table \"profile_cache\" */\nexport type Profile_Cache_Obj_Rel_Insert_Input = {\n  data: Profile_Cache_Insert_Input;\n  on_conflict?: Maybe<Profile_Cache_On_Conflict>;\n};\n\n/** on conflict condition type for table \"profile_cache\" */\nexport type Profile_Cache_On_Conflict = {\n  constraint: Profile_Cache_Constraint;\n  update_columns: Array<Profile_Cache_Update_Column>;\n  where?: Maybe<Profile_Cache_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"profile_cache\" */\nexport type Profile_Cache_Order_By = {\n  backgroundImageURL?: Maybe<Order_By>;\n  country?: Maybe<Order_By>;\n  description?: Maybe<Order_By>;\n  emoji?: Maybe<Order_By>;\n  gender?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  imageURL?: Maybe<Order_By>;\n  last_checked_at?: Maybe<Order_By>;\n  location?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  player?: Maybe<Player_Order_By>;\n  playerId?: Maybe<Order_By>;\n  website?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"profile_cache\" */\nexport type Profile_Cache_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"profile_cache\" */\nexport enum Profile_Cache_Select_Column {\n  /** column name */\n  BackgroundImageUrl = 'backgroundImageURL',\n  /** column name */\n  Country = 'country',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  Emoji = 'emoji',\n  /** column name */\n  Gender = 'gender',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ImageUrl = 'imageURL',\n  /** column name */\n  LastCheckedAt = 'last_checked_at',\n  /** column name */\n  Location = 'location',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  PlayerId = 'playerId',\n  /** column name */\n  Website = 'website'\n}\n\n/** input type for updating data in table \"profile_cache\" */\nexport type Profile_Cache_Set_Input = {\n  backgroundImageURL?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  emoji?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  imageURL?: Maybe<Scalars['String']>;\n  last_checked_at?: Maybe<Scalars['timestamptz']>;\n  location?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  playerId?: Maybe<Scalars['uuid']>;\n  website?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"profile_cache\" */\nexport enum Profile_Cache_Update_Column {\n  /** column name */\n  BackgroundImageUrl = 'backgroundImageURL',\n  /** column name */\n  Country = 'country',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  Emoji = 'emoji',\n  /** column name */\n  Gender = 'gender',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ImageUrl = 'imageURL',\n  /** column name */\n  LastCheckedAt = 'last_checked_at',\n  /** column name */\n  Location = 'location',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  PlayerId = 'playerId',\n  /** column name */\n  Website = 'website'\n}\n\nexport type Query = {\n  getBoxProfile?: Maybe<BoxProfile>;\n  getBrightIdStatus?: Maybe<BrightIdStatus>;\n  getDaoHausMemberships: Array<Member>;\n  getTokenBalances?: Maybe<TokenBalances>;\n  getTopPSeedHolders?: Maybe<Array<TokenBalances>>;\n};\n\n\nexport type QueryGetBoxProfileArgs = {\n  address?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetBrightIdStatusArgs = {\n  contextId?: Maybe<Scalars['uuid']>;\n};\n\n\nexport type QueryGetDaoHausMembershipsArgs = {\n  memberAddress?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetTokenBalancesArgs = {\n  address?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryGetTopPSeedHoldersArgs = {\n  limit?: Maybe<Scalars['Int']>;\n};\n\n/** query root */\nexport type Query_Root = {\n  /** fetch data from the table: \"AccountType\" */\n  AccountType: Array<AccountType>;\n  /** fetch aggregated fields from the table: \"AccountType\" */\n  AccountType_aggregate: AccountType_Aggregate;\n  /** fetch data from the table: \"AccountType\" using primary key columns */\n  AccountType_by_pk?: Maybe<AccountType>;\n  /** fetch data from the table: \"ColorAspect\" */\n  ColorAspect: Array<ColorAspect>;\n  /** fetch aggregated fields from the table: \"ColorAspect\" */\n  ColorAspect_aggregate: ColorAspect_Aggregate;\n  /** fetch data from the table: \"ColorAspect\" using primary key columns */\n  ColorAspect_by_pk?: Maybe<ColorAspect>;\n  /** fetch data from the table: \"GuildPosition\" */\n  GuildPosition: Array<GuildPosition>;\n  /** fetch aggregated fields from the table: \"GuildPosition\" */\n  GuildPosition_aggregate: GuildPosition_Aggregate;\n  /** fetch data from the table: \"GuildPosition\" using primary key columns */\n  GuildPosition_by_pk?: Maybe<GuildPosition>;\n  /** fetch data from the table: \"GuildStatus\" */\n  GuildStatus: Array<GuildStatus>;\n  /** fetch aggregated fields from the table: \"GuildStatus\" */\n  GuildStatus_aggregate: GuildStatus_Aggregate;\n  /** fetch data from the table: \"GuildStatus\" using primary key columns */\n  GuildStatus_by_pk?: Maybe<GuildStatus>;\n  /** fetch data from the table: \"GuildType\" */\n  GuildType: Array<GuildType>;\n  /** fetch aggregated fields from the table: \"GuildType\" */\n  GuildType_aggregate: GuildType_Aggregate;\n  /** fetch data from the table: \"GuildType\" using primary key columns */\n  GuildType_by_pk?: Maybe<GuildType>;\n  /** fetch data from the table: \"PlayerRank\" */\n  PlayerRank: Array<PlayerRank>;\n  /** fetch aggregated fields from the table: \"PlayerRank\" */\n  PlayerRank_aggregate: PlayerRank_Aggregate;\n  /** fetch data from the table: \"PlayerRank\" using primary key columns */\n  PlayerRank_by_pk?: Maybe<PlayerRank>;\n  /** fetch data from the table: \"QuestCompletionStatus\" */\n  QuestCompletionStatus: Array<QuestCompletionStatus>;\n  /** fetch aggregated fields from the table: \"QuestCompletionStatus\" */\n  QuestCompletionStatus_aggregate: QuestCompletionStatus_Aggregate;\n  /** fetch data from the table: \"QuestCompletionStatus\" using primary key columns */\n  QuestCompletionStatus_by_pk?: Maybe<QuestCompletionStatus>;\n  /** fetch data from the table: \"QuestRepetition\" */\n  QuestRepetition: Array<QuestRepetition>;\n  /** fetch aggregated fields from the table: \"QuestRepetition\" */\n  QuestRepetition_aggregate: QuestRepetition_Aggregate;\n  /** fetch data from the table: \"QuestRepetition\" using primary key columns */\n  QuestRepetition_by_pk?: Maybe<QuestRepetition>;\n  /** fetch data from the table: \"QuestStatus\" */\n  QuestStatus: Array<QuestStatus>;\n  /** fetch aggregated fields from the table: \"QuestStatus\" */\n  QuestStatus_aggregate: QuestStatus_Aggregate;\n  /** fetch data from the table: \"QuestStatus\" using primary key columns */\n  QuestStatus_by_pk?: Maybe<QuestStatus>;\n  /** fetch data from the table: \"SkillCategory\" */\n  SkillCategory: Array<SkillCategory>;\n  /** fetch aggregated fields from the table: \"SkillCategory\" */\n  SkillCategory_aggregate: SkillCategory_Aggregate;\n  /** fetch data from the table: \"SkillCategory\" using primary key columns */\n  SkillCategory_by_pk?: Maybe<SkillCategory>;\n  getBoxProfile?: Maybe<BoxProfile>;\n  getBrightIdStatus?: Maybe<BrightIdStatus>;\n  getDaoHausMemberships: Array<Member>;\n  getTokenBalances?: Maybe<TokenBalances>;\n  getTopPSeedHolders?: Maybe<Array<TokenBalances>>;\n  /** fetch data from the table: \"guild\" */\n  guild: Array<Guild>;\n  /** fetch data from the table: \"guild_account\" */\n  guild_account: Array<Guild_Account>;\n  /** fetch aggregated fields from the table: \"guild_account\" */\n  guild_account_aggregate: Guild_Account_Aggregate;\n  /** fetch data from the table: \"guild_account\" using primary key columns */\n  guild_account_by_pk?: Maybe<Guild_Account>;\n  /** fetch aggregated fields from the table: \"guild\" */\n  guild_aggregate: Guild_Aggregate;\n  /** fetch data from the table: \"guild\" using primary key columns */\n  guild_by_pk?: Maybe<Guild>;\n  /** fetch data from the table: \"guild_player\" */\n  guild_player: Array<Guild_Player>;\n  /** fetch aggregated fields from the table: \"guild_player\" */\n  guild_player_aggregate: Guild_Player_Aggregate;\n  /** fetch data from the table: \"guild_player\" using primary key columns */\n  guild_player_by_pk?: Maybe<Guild_Player>;\n  /** fetch data from the table: \"me\" */\n  me: Array<Me>;\n  /** fetch aggregated fields from the table: \"me\" */\n  me_aggregate: Me_Aggregate;\n  /** fetch data from the table: \"player\" */\n  player: Array<Player>;\n  /** fetch data from the table: \"player_account\" */\n  player_account: Array<Player_Account>;\n  /** fetch aggregated fields from the table: \"player_account\" */\n  player_account_aggregate: Player_Account_Aggregate;\n  /** fetch aggregated fields from the table: \"player\" */\n  player_aggregate: Player_Aggregate;\n  /** fetch data from the table: \"player\" using primary key columns */\n  player_by_pk?: Maybe<Player>;\n  /** fetch data from the table: \"player_skill\" */\n  player_skill: Array<Player_Skill>;\n  /** fetch aggregated fields from the table: \"player_skill\" */\n  player_skill_aggregate: Player_Skill_Aggregate;\n  /** fetch data from the table: \"player_skill\" using primary key columns */\n  player_skill_by_pk?: Maybe<Player_Skill>;\n  /** fetch data from the table: \"player_type\" */\n  player_type: Array<Player_Type>;\n  /** fetch aggregated fields from the table: \"player_type\" */\n  player_type_aggregate: Player_Type_Aggregate;\n  /** fetch data from the table: \"player_type\" using primary key columns */\n  player_type_by_pk?: Maybe<Player_Type>;\n  /** fetch data from the table: \"profile_cache\" */\n  profile_cache: Array<Profile_Cache>;\n  /** fetch aggregated fields from the table: \"profile_cache\" */\n  profile_cache_aggregate: Profile_Cache_Aggregate;\n  /** fetch data from the table: \"profile_cache\" using primary key columns */\n  profile_cache_by_pk?: Maybe<Profile_Cache>;\n  /** fetch data from the table: \"quest\" */\n  quest: Array<Quest>;\n  /** fetch aggregated fields from the table: \"quest\" */\n  quest_aggregate: Quest_Aggregate;\n  /** fetch data from the table: \"quest\" using primary key columns */\n  quest_by_pk?: Maybe<Quest>;\n  /** fetch data from the table: \"quest_completion\" */\n  quest_completion: Array<Quest_Completion>;\n  /** fetch aggregated fields from the table: \"quest_completion\" */\n  quest_completion_aggregate: Quest_Completion_Aggregate;\n  /** fetch data from the table: \"quest_completion\" using primary key columns */\n  quest_completion_by_pk?: Maybe<Quest_Completion>;\n  /** fetch data from the table: \"quest_skill\" */\n  quest_skill: Array<Quest_Skill>;\n  /** fetch aggregated fields from the table: \"quest_skill\" */\n  quest_skill_aggregate: Quest_Skill_Aggregate;\n  /** fetch data from the table: \"quest_skill\" using primary key columns */\n  quest_skill_by_pk?: Maybe<Quest_Skill>;\n  /** fetch data from the table: \"skill\" */\n  skill: Array<Skill>;\n  /** fetch aggregated fields from the table: \"skill\" */\n  skill_aggregate: Skill_Aggregate;\n  /** fetch data from the table: \"skill\" using primary key columns */\n  skill_by_pk?: Maybe<Skill>;\n};\n\n\n/** query root */\nexport type Query_RootAccountTypeArgs = {\n  distinct_on?: Maybe<Array<AccountType_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<AccountType_Order_By>>;\n  where?: Maybe<AccountType_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootAccountType_AggregateArgs = {\n  distinct_on?: Maybe<Array<AccountType_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<AccountType_Order_By>>;\n  where?: Maybe<AccountType_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootAccountType_By_PkArgs = {\n  type: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootColorAspectArgs = {\n  distinct_on?: Maybe<Array<ColorAspect_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<ColorAspect_Order_By>>;\n  where?: Maybe<ColorAspect_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootColorAspect_AggregateArgs = {\n  distinct_on?: Maybe<Array<ColorAspect_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<ColorAspect_Order_By>>;\n  where?: Maybe<ColorAspect_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootColorAspect_By_PkArgs = {\n  mask: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootGuildPositionArgs = {\n  distinct_on?: Maybe<Array<GuildPosition_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<GuildPosition_Order_By>>;\n  where?: Maybe<GuildPosition_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootGuildPosition_AggregateArgs = {\n  distinct_on?: Maybe<Array<GuildPosition_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<GuildPosition_Order_By>>;\n  where?: Maybe<GuildPosition_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootGuildPosition_By_PkArgs = {\n  position: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootGuildStatusArgs = {\n  distinct_on?: Maybe<Array<GuildStatus_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<GuildStatus_Order_By>>;\n  where?: Maybe<GuildStatus_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootGuildStatus_AggregateArgs = {\n  distinct_on?: Maybe<Array<GuildStatus_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<GuildStatus_Order_By>>;\n  where?: Maybe<GuildStatus_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootGuildStatus_By_PkArgs = {\n  status: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootGuildTypeArgs = {\n  distinct_on?: Maybe<Array<GuildType_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<GuildType_Order_By>>;\n  where?: Maybe<GuildType_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootGuildType_AggregateArgs = {\n  distinct_on?: Maybe<Array<GuildType_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<GuildType_Order_By>>;\n  where?: Maybe<GuildType_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootGuildType_By_PkArgs = {\n  name: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootPlayerRankArgs = {\n  distinct_on?: Maybe<Array<PlayerRank_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<PlayerRank_Order_By>>;\n  where?: Maybe<PlayerRank_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPlayerRank_AggregateArgs = {\n  distinct_on?: Maybe<Array<PlayerRank_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<PlayerRank_Order_By>>;\n  where?: Maybe<PlayerRank_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPlayerRank_By_PkArgs = {\n  rank: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootQuestCompletionStatusArgs = {\n  distinct_on?: Maybe<Array<QuestCompletionStatus_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<QuestCompletionStatus_Order_By>>;\n  where?: Maybe<QuestCompletionStatus_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootQuestCompletionStatus_AggregateArgs = {\n  distinct_on?: Maybe<Array<QuestCompletionStatus_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<QuestCompletionStatus_Order_By>>;\n  where?: Maybe<QuestCompletionStatus_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootQuestCompletionStatus_By_PkArgs = {\n  status: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootQuestRepetitionArgs = {\n  distinct_on?: Maybe<Array<QuestRepetition_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<QuestRepetition_Order_By>>;\n  where?: Maybe<QuestRepetition_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootQuestRepetition_AggregateArgs = {\n  distinct_on?: Maybe<Array<QuestRepetition_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<QuestRepetition_Order_By>>;\n  where?: Maybe<QuestRepetition_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootQuestRepetition_By_PkArgs = {\n  repetition: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootQuestStatusArgs = {\n  distinct_on?: Maybe<Array<QuestStatus_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<QuestStatus_Order_By>>;\n  where?: Maybe<QuestStatus_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootQuestStatus_AggregateArgs = {\n  distinct_on?: Maybe<Array<QuestStatus_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<QuestStatus_Order_By>>;\n  where?: Maybe<QuestStatus_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootQuestStatus_By_PkArgs = {\n  status: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootSkillCategoryArgs = {\n  distinct_on?: Maybe<Array<SkillCategory_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<SkillCategory_Order_By>>;\n  where?: Maybe<SkillCategory_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootSkillCategory_AggregateArgs = {\n  distinct_on?: Maybe<Array<SkillCategory_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<SkillCategory_Order_By>>;\n  where?: Maybe<SkillCategory_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootSkillCategory_By_PkArgs = {\n  name: Scalars['String'];\n};\n\n\n/** query root */\nexport type Query_RootGetBoxProfileArgs = {\n  address?: Maybe<Scalars['String']>;\n};\n\n\n/** query root */\nexport type Query_RootGetBrightIdStatusArgs = {\n  contextId?: Maybe<Scalars['uuid']>;\n};\n\n\n/** query root */\nexport type Query_RootGetDaoHausMembershipsArgs = {\n  memberAddress?: Maybe<Scalars['String']>;\n};\n\n\n/** query root */\nexport type Query_RootGetTokenBalancesArgs = {\n  address?: Maybe<Scalars['String']>;\n};\n\n\n/** query root */\nexport type Query_RootGetTopPSeedHoldersArgs = {\n  limit?: Maybe<Scalars['Int']>;\n};\n\n\n/** query root */\nexport type Query_RootGuildArgs = {\n  distinct_on?: Maybe<Array<Guild_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Order_By>>;\n  where?: Maybe<Guild_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootGuild_AccountArgs = {\n  distinct_on?: Maybe<Array<Guild_Account_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Account_Order_By>>;\n  where?: Maybe<Guild_Account_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootGuild_Account_AggregateArgs = {\n  distinct_on?: Maybe<Array<Guild_Account_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Account_Order_By>>;\n  where?: Maybe<Guild_Account_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootGuild_Account_By_PkArgs = {\n  guild_id: Scalars['uuid'];\n  type: AccountType_Enum;\n};\n\n\n/** query root */\nexport type Query_RootGuild_AggregateArgs = {\n  distinct_on?: Maybe<Array<Guild_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Order_By>>;\n  where?: Maybe<Guild_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootGuild_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** query root */\nexport type Query_RootGuild_PlayerArgs = {\n  distinct_on?: Maybe<Array<Guild_Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Player_Order_By>>;\n  where?: Maybe<Guild_Player_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootGuild_Player_AggregateArgs = {\n  distinct_on?: Maybe<Array<Guild_Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Player_Order_By>>;\n  where?: Maybe<Guild_Player_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootGuild_Player_By_PkArgs = {\n  guild_id: Scalars['uuid'];\n  player_id: Scalars['uuid'];\n};\n\n\n/** query root */\nexport type Query_RootMeArgs = {\n  distinct_on?: Maybe<Array<Me_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Me_Order_By>>;\n  where?: Maybe<Me_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootMe_AggregateArgs = {\n  distinct_on?: Maybe<Array<Me_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Me_Order_By>>;\n  where?: Maybe<Me_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPlayerArgs = {\n  distinct_on?: Maybe<Array<Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Order_By>>;\n  where?: Maybe<Player_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPlayer_AccountArgs = {\n  distinct_on?: Maybe<Array<Player_Account_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Account_Order_By>>;\n  where?: Maybe<Player_Account_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPlayer_Account_AggregateArgs = {\n  distinct_on?: Maybe<Array<Player_Account_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Account_Order_By>>;\n  where?: Maybe<Player_Account_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPlayer_AggregateArgs = {\n  distinct_on?: Maybe<Array<Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Order_By>>;\n  where?: Maybe<Player_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPlayer_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** query root */\nexport type Query_RootPlayer_SkillArgs = {\n  distinct_on?: Maybe<Array<Player_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Skill_Order_By>>;\n  where?: Maybe<Player_Skill_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPlayer_Skill_AggregateArgs = {\n  distinct_on?: Maybe<Array<Player_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Skill_Order_By>>;\n  where?: Maybe<Player_Skill_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPlayer_Skill_By_PkArgs = {\n  player_id: Scalars['uuid'];\n  skill_id: Scalars['uuid'];\n};\n\n\n/** query root */\nexport type Query_RootPlayer_TypeArgs = {\n  distinct_on?: Maybe<Array<Player_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Type_Order_By>>;\n  where?: Maybe<Player_Type_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPlayer_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Player_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Type_Order_By>>;\n  where?: Maybe<Player_Type_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootPlayer_Type_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** query root */\nexport type Query_RootProfile_CacheArgs = {\n  distinct_on?: Maybe<Array<Profile_Cache_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Profile_Cache_Order_By>>;\n  where?: Maybe<Profile_Cache_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootProfile_Cache_AggregateArgs = {\n  distinct_on?: Maybe<Array<Profile_Cache_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Profile_Cache_Order_By>>;\n  where?: Maybe<Profile_Cache_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootProfile_Cache_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** query root */\nexport type Query_RootQuestArgs = {\n  distinct_on?: Maybe<Array<Quest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Order_By>>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootQuest_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Order_By>>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootQuest_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** query root */\nexport type Query_RootQuest_CompletionArgs = {\n  distinct_on?: Maybe<Array<Quest_Completion_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Completion_Order_By>>;\n  where?: Maybe<Quest_Completion_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootQuest_Completion_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Completion_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Completion_Order_By>>;\n  where?: Maybe<Quest_Completion_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootQuest_Completion_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** query root */\nexport type Query_RootQuest_SkillArgs = {\n  distinct_on?: Maybe<Array<Quest_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Skill_Order_By>>;\n  where?: Maybe<Quest_Skill_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootQuest_Skill_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Skill_Order_By>>;\n  where?: Maybe<Quest_Skill_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootQuest_Skill_By_PkArgs = {\n  quest_id: Scalars['uuid'];\n  skill_id: Scalars['uuid'];\n};\n\n\n/** query root */\nexport type Query_RootSkillArgs = {\n  distinct_on?: Maybe<Array<Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Skill_Order_By>>;\n  where?: Maybe<Skill_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootSkill_AggregateArgs = {\n  distinct_on?: Maybe<Array<Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Skill_Order_By>>;\n  where?: Maybe<Skill_Bool_Exp>;\n};\n\n\n/** query root */\nexport type Query_RootSkill_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** columns and relationships of \"quest\" */\nexport type Quest = {\n  /** An object relationship */\n  QuestRepetition: QuestRepetition;\n  /** An object relationship */\n  QuestStatus: QuestStatus;\n  cooldown?: Maybe<Scalars['Int']>;\n  created_at: Scalars['timestamptz'];\n  created_by_player_id: Scalars['uuid'];\n  description?: Maybe<Scalars['String']>;\n  external_link?: Maybe<Scalars['String']>;\n  /** An object relationship */\n  guild: Guild;\n  guild_id: Scalars['uuid'];\n  id: Scalars['uuid'];\n  /** An object relationship */\n  player: Player;\n  /** An array relationship */\n  quest_completions: Array<Quest_Completion>;\n  /** An aggregated array relationship */\n  quest_completions_aggregate: Quest_Completion_Aggregate;\n  /** An array relationship */\n  quest_skills: Array<Quest_Skill>;\n  /** An aggregated array relationship */\n  quest_skills_aggregate: Quest_Skill_Aggregate;\n  repetition: QuestRepetition_Enum;\n  status: QuestStatus_Enum;\n  title: Scalars['String'];\n};\n\n\n/** columns and relationships of \"quest\" */\nexport type QuestQuest_CompletionsArgs = {\n  distinct_on?: Maybe<Array<Quest_Completion_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Completion_Order_By>>;\n  where?: Maybe<Quest_Completion_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"quest\" */\nexport type QuestQuest_Completions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Completion_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Completion_Order_By>>;\n  where?: Maybe<Quest_Completion_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"quest\" */\nexport type QuestQuest_SkillsArgs = {\n  distinct_on?: Maybe<Array<Quest_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Skill_Order_By>>;\n  where?: Maybe<Quest_Skill_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"quest\" */\nexport type QuestQuest_Skills_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Skill_Order_By>>;\n  where?: Maybe<Quest_Skill_Bool_Exp>;\n};\n\n/** aggregated selection of \"quest\" */\nexport type Quest_Aggregate = {\n  aggregate?: Maybe<Quest_Aggregate_Fields>;\n  nodes: Array<Quest>;\n};\n\n/** aggregate fields of \"quest\" */\nexport type Quest_Aggregate_Fields = {\n  avg?: Maybe<Quest_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Quest_Max_Fields>;\n  min?: Maybe<Quest_Min_Fields>;\n  stddev?: Maybe<Quest_Stddev_Fields>;\n  stddev_pop?: Maybe<Quest_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Quest_Stddev_Samp_Fields>;\n  sum?: Maybe<Quest_Sum_Fields>;\n  var_pop?: Maybe<Quest_Var_Pop_Fields>;\n  var_samp?: Maybe<Quest_Var_Samp_Fields>;\n  variance?: Maybe<Quest_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"quest\" */\nexport type Quest_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Quest_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"quest\" */\nexport type Quest_Aggregate_Order_By = {\n  avg?: Maybe<Quest_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Quest_Max_Order_By>;\n  min?: Maybe<Quest_Min_Order_By>;\n  stddev?: Maybe<Quest_Stddev_Order_By>;\n  stddev_pop?: Maybe<Quest_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Quest_Stddev_Samp_Order_By>;\n  sum?: Maybe<Quest_Sum_Order_By>;\n  var_pop?: Maybe<Quest_Var_Pop_Order_By>;\n  var_samp?: Maybe<Quest_Var_Samp_Order_By>;\n  variance?: Maybe<Quest_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"quest\" */\nexport type Quest_Arr_Rel_Insert_Input = {\n  data: Array<Quest_Insert_Input>;\n  on_conflict?: Maybe<Quest_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Quest_Avg_Fields = {\n  cooldown?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"quest\" */\nexport type Quest_Avg_Order_By = {\n  cooldown?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"quest\". All fields are combined with a logical 'AND'. */\nexport type Quest_Bool_Exp = {\n  QuestRepetition?: Maybe<QuestRepetition_Bool_Exp>;\n  QuestStatus?: Maybe<QuestStatus_Bool_Exp>;\n  _and?: Maybe<Array<Maybe<Quest_Bool_Exp>>>;\n  _not?: Maybe<Quest_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Quest_Bool_Exp>>>;\n  cooldown?: Maybe<Int_Comparison_Exp>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  created_by_player_id?: Maybe<Uuid_Comparison_Exp>;\n  description?: Maybe<String_Comparison_Exp>;\n  external_link?: Maybe<String_Comparison_Exp>;\n  guild?: Maybe<Guild_Bool_Exp>;\n  guild_id?: Maybe<Uuid_Comparison_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  player?: Maybe<Player_Bool_Exp>;\n  quest_completions?: Maybe<Quest_Completion_Bool_Exp>;\n  quest_skills?: Maybe<Quest_Skill_Bool_Exp>;\n  repetition?: Maybe<QuestRepetition_Enum_Comparison_Exp>;\n  status?: Maybe<QuestStatus_Enum_Comparison_Exp>;\n  title?: Maybe<String_Comparison_Exp>;\n};\n\n/** columns and relationships of \"quest_completion\" */\nexport type Quest_Completion = {\n  /** An object relationship */\n  QuestCompletionStatus: QuestCompletionStatus;\n  completed_by_player_id: Scalars['uuid'];\n  id: Scalars['uuid'];\n  /** An object relationship */\n  player: Player;\n  /** An object relationship */\n  quest: Quest;\n  quest_id: Scalars['uuid'];\n  status: QuestCompletionStatus_Enum;\n  submission_link?: Maybe<Scalars['String']>;\n  submission_text?: Maybe<Scalars['String']>;\n  submitted_at: Scalars['timestamptz'];\n};\n\n/** aggregated selection of \"quest_completion\" */\nexport type Quest_Completion_Aggregate = {\n  aggregate?: Maybe<Quest_Completion_Aggregate_Fields>;\n  nodes: Array<Quest_Completion>;\n};\n\n/** aggregate fields of \"quest_completion\" */\nexport type Quest_Completion_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Quest_Completion_Max_Fields>;\n  min?: Maybe<Quest_Completion_Min_Fields>;\n};\n\n\n/** aggregate fields of \"quest_completion\" */\nexport type Quest_Completion_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Quest_Completion_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"quest_completion\" */\nexport type Quest_Completion_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Quest_Completion_Max_Order_By>;\n  min?: Maybe<Quest_Completion_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"quest_completion\" */\nexport type Quest_Completion_Arr_Rel_Insert_Input = {\n  data: Array<Quest_Completion_Insert_Input>;\n  on_conflict?: Maybe<Quest_Completion_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"quest_completion\". All fields are combined with a logical 'AND'. */\nexport type Quest_Completion_Bool_Exp = {\n  QuestCompletionStatus?: Maybe<QuestCompletionStatus_Bool_Exp>;\n  _and?: Maybe<Array<Maybe<Quest_Completion_Bool_Exp>>>;\n  _not?: Maybe<Quest_Completion_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Quest_Completion_Bool_Exp>>>;\n  completed_by_player_id?: Maybe<Uuid_Comparison_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  player?: Maybe<Player_Bool_Exp>;\n  quest?: Maybe<Quest_Bool_Exp>;\n  quest_id?: Maybe<Uuid_Comparison_Exp>;\n  status?: Maybe<QuestCompletionStatus_Enum_Comparison_Exp>;\n  submission_link?: Maybe<String_Comparison_Exp>;\n  submission_text?: Maybe<String_Comparison_Exp>;\n  submitted_at?: Maybe<Timestamptz_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"quest_completion\" */\nexport enum Quest_Completion_Constraint {\n  /** unique or primary key constraint */\n  QuestCompletionPkey = 'quest_completion_pkey'\n}\n\n/** input type for inserting data into table \"quest_completion\" */\nexport type Quest_Completion_Insert_Input = {\n  QuestCompletionStatus?: Maybe<QuestCompletionStatus_Obj_Rel_Insert_Input>;\n  completed_by_player_id?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  player?: Maybe<Player_Obj_Rel_Insert_Input>;\n  quest?: Maybe<Quest_Obj_Rel_Insert_Input>;\n  quest_id?: Maybe<Scalars['uuid']>;\n  status?: Maybe<QuestCompletionStatus_Enum>;\n  submission_link?: Maybe<Scalars['String']>;\n  submission_text?: Maybe<Scalars['String']>;\n  submitted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate max on columns */\nexport type Quest_Completion_Max_Fields = {\n  completed_by_player_id?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  quest_id?: Maybe<Scalars['uuid']>;\n  submission_link?: Maybe<Scalars['String']>;\n  submission_text?: Maybe<Scalars['String']>;\n  submitted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by max() on columns of table \"quest_completion\" */\nexport type Quest_Completion_Max_Order_By = {\n  completed_by_player_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  quest_id?: Maybe<Order_By>;\n  submission_link?: Maybe<Order_By>;\n  submission_text?: Maybe<Order_By>;\n  submitted_at?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Quest_Completion_Min_Fields = {\n  completed_by_player_id?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  quest_id?: Maybe<Scalars['uuid']>;\n  submission_link?: Maybe<Scalars['String']>;\n  submission_text?: Maybe<Scalars['String']>;\n  submitted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by min() on columns of table \"quest_completion\" */\nexport type Quest_Completion_Min_Order_By = {\n  completed_by_player_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  quest_id?: Maybe<Order_By>;\n  submission_link?: Maybe<Order_By>;\n  submission_text?: Maybe<Order_By>;\n  submitted_at?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"quest_completion\" */\nexport type Quest_Completion_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Quest_Completion>;\n};\n\n/** input type for inserting object relation for remote table \"quest_completion\" */\nexport type Quest_Completion_Obj_Rel_Insert_Input = {\n  data: Quest_Completion_Insert_Input;\n  on_conflict?: Maybe<Quest_Completion_On_Conflict>;\n};\n\n/** on conflict condition type for table \"quest_completion\" */\nexport type Quest_Completion_On_Conflict = {\n  constraint: Quest_Completion_Constraint;\n  update_columns: Array<Quest_Completion_Update_Column>;\n  where?: Maybe<Quest_Completion_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"quest_completion\" */\nexport type Quest_Completion_Order_By = {\n  QuestCompletionStatus?: Maybe<QuestCompletionStatus_Order_By>;\n  completed_by_player_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  player?: Maybe<Player_Order_By>;\n  quest?: Maybe<Quest_Order_By>;\n  quest_id?: Maybe<Order_By>;\n  status?: Maybe<Order_By>;\n  submission_link?: Maybe<Order_By>;\n  submission_text?: Maybe<Order_By>;\n  submitted_at?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"quest_completion\" */\nexport type Quest_Completion_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"quest_completion\" */\nexport enum Quest_Completion_Select_Column {\n  /** column name */\n  CompletedByPlayerId = 'completed_by_player_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  QuestId = 'quest_id',\n  /** column name */\n  Status = 'status',\n  /** column name */\n  SubmissionLink = 'submission_link',\n  /** column name */\n  SubmissionText = 'submission_text',\n  /** column name */\n  SubmittedAt = 'submitted_at'\n}\n\n/** input type for updating data in table \"quest_completion\" */\nexport type Quest_Completion_Set_Input = {\n  completed_by_player_id?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  quest_id?: Maybe<Scalars['uuid']>;\n  status?: Maybe<QuestCompletionStatus_Enum>;\n  submission_link?: Maybe<Scalars['String']>;\n  submission_text?: Maybe<Scalars['String']>;\n  submitted_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** update columns of table \"quest_completion\" */\nexport enum Quest_Completion_Update_Column {\n  /** column name */\n  CompletedByPlayerId = 'completed_by_player_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  QuestId = 'quest_id',\n  /** column name */\n  Status = 'status',\n  /** column name */\n  SubmissionLink = 'submission_link',\n  /** column name */\n  SubmissionText = 'submission_text',\n  /** column name */\n  SubmittedAt = 'submitted_at'\n}\n\n/** unique or primary key constraints on table \"quest\" */\nexport enum Quest_Constraint {\n  /** unique or primary key constraint */\n  QuestPkey = 'quest_pkey'\n}\n\n/** input type for incrementing integer column in table \"quest\" */\nexport type Quest_Inc_Input = {\n  cooldown?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"quest\" */\nexport type Quest_Insert_Input = {\n  QuestRepetition?: Maybe<QuestRepetition_Obj_Rel_Insert_Input>;\n  QuestStatus?: Maybe<QuestStatus_Obj_Rel_Insert_Input>;\n  cooldown?: Maybe<Scalars['Int']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  created_by_player_id?: Maybe<Scalars['uuid']>;\n  description?: Maybe<Scalars['String']>;\n  external_link?: Maybe<Scalars['String']>;\n  guild?: Maybe<Guild_Obj_Rel_Insert_Input>;\n  guild_id?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  player?: Maybe<Player_Obj_Rel_Insert_Input>;\n  quest_completions?: Maybe<Quest_Completion_Arr_Rel_Insert_Input>;\n  quest_skills?: Maybe<Quest_Skill_Arr_Rel_Insert_Input>;\n  repetition?: Maybe<QuestRepetition_Enum>;\n  status?: Maybe<QuestStatus_Enum>;\n  title?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Quest_Max_Fields = {\n  cooldown?: Maybe<Scalars['Int']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  created_by_player_id?: Maybe<Scalars['uuid']>;\n  description?: Maybe<Scalars['String']>;\n  external_link?: Maybe<Scalars['String']>;\n  guild_id?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  title?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"quest\" */\nexport type Quest_Max_Order_By = {\n  cooldown?: Maybe<Order_By>;\n  created_at?: Maybe<Order_By>;\n  created_by_player_id?: Maybe<Order_By>;\n  description?: Maybe<Order_By>;\n  external_link?: Maybe<Order_By>;\n  guild_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  title?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Quest_Min_Fields = {\n  cooldown?: Maybe<Scalars['Int']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  created_by_player_id?: Maybe<Scalars['uuid']>;\n  description?: Maybe<Scalars['String']>;\n  external_link?: Maybe<Scalars['String']>;\n  guild_id?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  title?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"quest\" */\nexport type Quest_Min_Order_By = {\n  cooldown?: Maybe<Order_By>;\n  created_at?: Maybe<Order_By>;\n  created_by_player_id?: Maybe<Order_By>;\n  description?: Maybe<Order_By>;\n  external_link?: Maybe<Order_By>;\n  guild_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  title?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"quest\" */\nexport type Quest_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Quest>;\n};\n\n/** input type for inserting object relation for remote table \"quest\" */\nexport type Quest_Obj_Rel_Insert_Input = {\n  data: Quest_Insert_Input;\n  on_conflict?: Maybe<Quest_On_Conflict>;\n};\n\n/** on conflict condition type for table \"quest\" */\nexport type Quest_On_Conflict = {\n  constraint: Quest_Constraint;\n  update_columns: Array<Quest_Update_Column>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"quest\" */\nexport type Quest_Order_By = {\n  QuestRepetition?: Maybe<QuestRepetition_Order_By>;\n  QuestStatus?: Maybe<QuestStatus_Order_By>;\n  cooldown?: Maybe<Order_By>;\n  created_at?: Maybe<Order_By>;\n  created_by_player_id?: Maybe<Order_By>;\n  description?: Maybe<Order_By>;\n  external_link?: Maybe<Order_By>;\n  guild?: Maybe<Guild_Order_By>;\n  guild_id?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  player?: Maybe<Player_Order_By>;\n  quest_completions_aggregate?: Maybe<Quest_Completion_Aggregate_Order_By>;\n  quest_skills_aggregate?: Maybe<Quest_Skill_Aggregate_Order_By>;\n  repetition?: Maybe<Order_By>;\n  status?: Maybe<Order_By>;\n  title?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"quest\" */\nexport type Quest_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"quest\" */\nexport enum Quest_Select_Column {\n  /** column name */\n  Cooldown = 'cooldown',\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  CreatedByPlayerId = 'created_by_player_id',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  ExternalLink = 'external_link',\n  /** column name */\n  GuildId = 'guild_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Repetition = 'repetition',\n  /** column name */\n  Status = 'status',\n  /** column name */\n  Title = 'title'\n}\n\n/** input type for updating data in table \"quest\" */\nexport type Quest_Set_Input = {\n  cooldown?: Maybe<Scalars['Int']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  created_by_player_id?: Maybe<Scalars['uuid']>;\n  description?: Maybe<Scalars['String']>;\n  external_link?: Maybe<Scalars['String']>;\n  guild_id?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  repetition?: Maybe<QuestRepetition_Enum>;\n  status?: Maybe<QuestStatus_Enum>;\n  title?: Maybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"quest_skill\" */\nexport type Quest_Skill = {\n  /** An object relationship */\n  quest: Quest;\n  quest_id: Scalars['uuid'];\n  /** An object relationship */\n  skill: Skill;\n  skill_id: Scalars['uuid'];\n};\n\n/** aggregated selection of \"quest_skill\" */\nexport type Quest_Skill_Aggregate = {\n  aggregate?: Maybe<Quest_Skill_Aggregate_Fields>;\n  nodes: Array<Quest_Skill>;\n};\n\n/** aggregate fields of \"quest_skill\" */\nexport type Quest_Skill_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Quest_Skill_Max_Fields>;\n  min?: Maybe<Quest_Skill_Min_Fields>;\n};\n\n\n/** aggregate fields of \"quest_skill\" */\nexport type Quest_Skill_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Quest_Skill_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"quest_skill\" */\nexport type Quest_Skill_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Quest_Skill_Max_Order_By>;\n  min?: Maybe<Quest_Skill_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"quest_skill\" */\nexport type Quest_Skill_Arr_Rel_Insert_Input = {\n  data: Array<Quest_Skill_Insert_Input>;\n  on_conflict?: Maybe<Quest_Skill_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"quest_skill\". All fields are combined with a logical 'AND'. */\nexport type Quest_Skill_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Quest_Skill_Bool_Exp>>>;\n  _not?: Maybe<Quest_Skill_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Quest_Skill_Bool_Exp>>>;\n  quest?: Maybe<Quest_Bool_Exp>;\n  quest_id?: Maybe<Uuid_Comparison_Exp>;\n  skill?: Maybe<Skill_Bool_Exp>;\n  skill_id?: Maybe<Uuid_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"quest_skill\" */\nexport enum Quest_Skill_Constraint {\n  /** unique or primary key constraint */\n  QuestSkillPkey = 'quest_skill_pkey'\n}\n\n/** input type for inserting data into table \"quest_skill\" */\nexport type Quest_Skill_Insert_Input = {\n  quest?: Maybe<Quest_Obj_Rel_Insert_Input>;\n  quest_id?: Maybe<Scalars['uuid']>;\n  skill?: Maybe<Skill_Obj_Rel_Insert_Input>;\n  skill_id?: Maybe<Scalars['uuid']>;\n};\n\n/** aggregate max on columns */\nexport type Quest_Skill_Max_Fields = {\n  quest_id?: Maybe<Scalars['uuid']>;\n  skill_id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"quest_skill\" */\nexport type Quest_Skill_Max_Order_By = {\n  quest_id?: Maybe<Order_By>;\n  skill_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Quest_Skill_Min_Fields = {\n  quest_id?: Maybe<Scalars['uuid']>;\n  skill_id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"quest_skill\" */\nexport type Quest_Skill_Min_Order_By = {\n  quest_id?: Maybe<Order_By>;\n  skill_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"quest_skill\" */\nexport type Quest_Skill_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Quest_Skill>;\n};\n\n/** input type for inserting object relation for remote table \"quest_skill\" */\nexport type Quest_Skill_Obj_Rel_Insert_Input = {\n  data: Quest_Skill_Insert_Input;\n  on_conflict?: Maybe<Quest_Skill_On_Conflict>;\n};\n\n/** on conflict condition type for table \"quest_skill\" */\nexport type Quest_Skill_On_Conflict = {\n  constraint: Quest_Skill_Constraint;\n  update_columns: Array<Quest_Skill_Update_Column>;\n  where?: Maybe<Quest_Skill_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"quest_skill\" */\nexport type Quest_Skill_Order_By = {\n  quest?: Maybe<Quest_Order_By>;\n  quest_id?: Maybe<Order_By>;\n  skill?: Maybe<Skill_Order_By>;\n  skill_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"quest_skill\" */\nexport type Quest_Skill_Pk_Columns_Input = {\n  quest_id: Scalars['uuid'];\n  skill_id: Scalars['uuid'];\n};\n\n/** select columns of table \"quest_skill\" */\nexport enum Quest_Skill_Select_Column {\n  /** column name */\n  QuestId = 'quest_id',\n  /** column name */\n  SkillId = 'skill_id'\n}\n\n/** input type for updating data in table \"quest_skill\" */\nexport type Quest_Skill_Set_Input = {\n  quest_id?: Maybe<Scalars['uuid']>;\n  skill_id?: Maybe<Scalars['uuid']>;\n};\n\n/** update columns of table \"quest_skill\" */\nexport enum Quest_Skill_Update_Column {\n  /** column name */\n  QuestId = 'quest_id',\n  /** column name */\n  SkillId = 'skill_id'\n}\n\n/** aggregate stddev on columns */\nexport type Quest_Stddev_Fields = {\n  cooldown?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"quest\" */\nexport type Quest_Stddev_Order_By = {\n  cooldown?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Quest_Stddev_Pop_Fields = {\n  cooldown?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"quest\" */\nexport type Quest_Stddev_Pop_Order_By = {\n  cooldown?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Quest_Stddev_Samp_Fields = {\n  cooldown?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"quest\" */\nexport type Quest_Stddev_Samp_Order_By = {\n  cooldown?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Quest_Sum_Fields = {\n  cooldown?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"quest\" */\nexport type Quest_Sum_Order_By = {\n  cooldown?: Maybe<Order_By>;\n};\n\n/** update columns of table \"quest\" */\nexport enum Quest_Update_Column {\n  /** column name */\n  Cooldown = 'cooldown',\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  CreatedByPlayerId = 'created_by_player_id',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  ExternalLink = 'external_link',\n  /** column name */\n  GuildId = 'guild_id',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Repetition = 'repetition',\n  /** column name */\n  Status = 'status',\n  /** column name */\n  Title = 'title'\n}\n\n/** aggregate var_pop on columns */\nexport type Quest_Var_Pop_Fields = {\n  cooldown?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"quest\" */\nexport type Quest_Var_Pop_Order_By = {\n  cooldown?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Quest_Var_Samp_Fields = {\n  cooldown?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"quest\" */\nexport type Quest_Var_Samp_Order_By = {\n  cooldown?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Quest_Variance_Fields = {\n  cooldown?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"quest\" */\nexport type Quest_Variance_Order_By = {\n  cooldown?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus = {\n  /** An array relationship */\n  quest_completions: Array<Quest_Completion>;\n  /** An aggregated array relationship */\n  quest_completions_aggregate: Quest_Completion_Aggregate;\n  status: Scalars['String'];\n};\n\n\n/** columns and relationships of \"QuestCompletionStatus\" */\nexport type QuestCompletionStatusQuest_CompletionsArgs = {\n  distinct_on?: Maybe<Array<Quest_Completion_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Completion_Order_By>>;\n  where?: Maybe<Quest_Completion_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"QuestCompletionStatus\" */\nexport type QuestCompletionStatusQuest_Completions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Completion_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Completion_Order_By>>;\n  where?: Maybe<Quest_Completion_Bool_Exp>;\n};\n\nexport enum QuestCompletionStatus_ActionEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED'\n}\n\n/** aggregated selection of \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Aggregate = {\n  aggregate?: Maybe<QuestCompletionStatus_Aggregate_Fields>;\n  nodes: Array<QuestCompletionStatus>;\n};\n\n/** aggregate fields of \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<QuestCompletionStatus_Max_Fields>;\n  min?: Maybe<QuestCompletionStatus_Min_Fields>;\n};\n\n\n/** aggregate fields of \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<QuestCompletionStatus_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<QuestCompletionStatus_Max_Order_By>;\n  min?: Maybe<QuestCompletionStatus_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Arr_Rel_Insert_Input = {\n  data: Array<QuestCompletionStatus_Insert_Input>;\n  on_conflict?: Maybe<QuestCompletionStatus_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"QuestCompletionStatus\". All fields are combined with a logical 'AND'. */\nexport type QuestCompletionStatus_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<QuestCompletionStatus_Bool_Exp>>>;\n  _not?: Maybe<QuestCompletionStatus_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<QuestCompletionStatus_Bool_Exp>>>;\n  quest_completions?: Maybe<Quest_Completion_Bool_Exp>;\n  status?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"QuestCompletionStatus\" */\nexport enum QuestCompletionStatus_Constraint {\n  /** unique or primary key constraint */\n  QuestCompletionStatusPkey = 'QuestCompletionStatus_pkey'\n}\n\nexport enum QuestCompletionStatus_Enum {\n  Accepted = 'ACCEPTED',\n  Pending = 'PENDING',\n  Rejected = 'REJECTED'\n}\n\n/** expression to compare columns of type QuestCompletionStatus_enum. All fields are combined with logical 'AND'. */\nexport type QuestCompletionStatus_Enum_Comparison_Exp = {\n  _eq?: Maybe<QuestCompletionStatus_Enum>;\n  _in?: Maybe<Array<QuestCompletionStatus_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<QuestCompletionStatus_Enum>;\n  _nin?: Maybe<Array<QuestCompletionStatus_Enum>>;\n};\n\n/** input type for inserting data into table \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Insert_Input = {\n  quest_completions?: Maybe<Quest_Completion_Arr_Rel_Insert_Input>;\n  status?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type QuestCompletionStatus_Max_Fields = {\n  status?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Max_Order_By = {\n  status?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type QuestCompletionStatus_Min_Fields = {\n  status?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Min_Order_By = {\n  status?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<QuestCompletionStatus>;\n};\n\n/** input type for inserting object relation for remote table \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Obj_Rel_Insert_Input = {\n  data: QuestCompletionStatus_Insert_Input;\n  on_conflict?: Maybe<QuestCompletionStatus_On_Conflict>;\n};\n\n/** on conflict condition type for table \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_On_Conflict = {\n  constraint: QuestCompletionStatus_Constraint;\n  update_columns: Array<QuestCompletionStatus_Update_Column>;\n  where?: Maybe<QuestCompletionStatus_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Order_By = {\n  quest_completions_aggregate?: Maybe<Quest_Completion_Aggregate_Order_By>;\n  status?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Pk_Columns_Input = {\n  status: Scalars['String'];\n};\n\n/** select columns of table \"QuestCompletionStatus\" */\nexport enum QuestCompletionStatus_Select_Column {\n  /** column name */\n  Status = 'status'\n}\n\n/** input type for updating data in table \"QuestCompletionStatus\" */\nexport type QuestCompletionStatus_Set_Input = {\n  status?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"QuestCompletionStatus\" */\nexport enum QuestCompletionStatus_Update_Column {\n  /** column name */\n  Status = 'status'\n}\n\n/** columns and relationships of \"QuestRepetition\" */\nexport type QuestRepetition = {\n  /** An array relationship */\n  quests: Array<Quest>;\n  /** An aggregated array relationship */\n  quests_aggregate: Quest_Aggregate;\n  repetition: Scalars['String'];\n};\n\n\n/** columns and relationships of \"QuestRepetition\" */\nexport type QuestRepetitionQuestsArgs = {\n  distinct_on?: Maybe<Array<Quest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Order_By>>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"QuestRepetition\" */\nexport type QuestRepetitionQuests_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Order_By>>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\nexport enum QuestRepetition_ActionEnum {\n  Personal = 'PERSONAL',\n  Recurring = 'RECURRING',\n  Unique = 'UNIQUE'\n}\n\n/** aggregated selection of \"QuestRepetition\" */\nexport type QuestRepetition_Aggregate = {\n  aggregate?: Maybe<QuestRepetition_Aggregate_Fields>;\n  nodes: Array<QuestRepetition>;\n};\n\n/** aggregate fields of \"QuestRepetition\" */\nexport type QuestRepetition_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<QuestRepetition_Max_Fields>;\n  min?: Maybe<QuestRepetition_Min_Fields>;\n};\n\n\n/** aggregate fields of \"QuestRepetition\" */\nexport type QuestRepetition_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<QuestRepetition_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"QuestRepetition\" */\nexport type QuestRepetition_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<QuestRepetition_Max_Order_By>;\n  min?: Maybe<QuestRepetition_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"QuestRepetition\" */\nexport type QuestRepetition_Arr_Rel_Insert_Input = {\n  data: Array<QuestRepetition_Insert_Input>;\n  on_conflict?: Maybe<QuestRepetition_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"QuestRepetition\". All fields are combined with a logical 'AND'. */\nexport type QuestRepetition_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<QuestRepetition_Bool_Exp>>>;\n  _not?: Maybe<QuestRepetition_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<QuestRepetition_Bool_Exp>>>;\n  quests?: Maybe<Quest_Bool_Exp>;\n  repetition?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"QuestRepetition\" */\nexport enum QuestRepetition_Constraint {\n  /** unique or primary key constraint */\n  QuestRepetitionPkey = 'QuestRepetition_pkey'\n}\n\nexport enum QuestRepetition_Enum {\n  Personal = 'PERSONAL',\n  Recurring = 'RECURRING',\n  Unique = 'UNIQUE'\n}\n\n/** expression to compare columns of type QuestRepetition_enum. All fields are combined with logical 'AND'. */\nexport type QuestRepetition_Enum_Comparison_Exp = {\n  _eq?: Maybe<QuestRepetition_Enum>;\n  _in?: Maybe<Array<QuestRepetition_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<QuestRepetition_Enum>;\n  _nin?: Maybe<Array<QuestRepetition_Enum>>;\n};\n\n/** input type for inserting data into table \"QuestRepetition\" */\nexport type QuestRepetition_Insert_Input = {\n  quests?: Maybe<Quest_Arr_Rel_Insert_Input>;\n  repetition?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type QuestRepetition_Max_Fields = {\n  repetition?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"QuestRepetition\" */\nexport type QuestRepetition_Max_Order_By = {\n  repetition?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type QuestRepetition_Min_Fields = {\n  repetition?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"QuestRepetition\" */\nexport type QuestRepetition_Min_Order_By = {\n  repetition?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"QuestRepetition\" */\nexport type QuestRepetition_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<QuestRepetition>;\n};\n\n/** input type for inserting object relation for remote table \"QuestRepetition\" */\nexport type QuestRepetition_Obj_Rel_Insert_Input = {\n  data: QuestRepetition_Insert_Input;\n  on_conflict?: Maybe<QuestRepetition_On_Conflict>;\n};\n\n/** on conflict condition type for table \"QuestRepetition\" */\nexport type QuestRepetition_On_Conflict = {\n  constraint: QuestRepetition_Constraint;\n  update_columns: Array<QuestRepetition_Update_Column>;\n  where?: Maybe<QuestRepetition_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"QuestRepetition\" */\nexport type QuestRepetition_Order_By = {\n  quests_aggregate?: Maybe<Quest_Aggregate_Order_By>;\n  repetition?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"QuestRepetition\" */\nexport type QuestRepetition_Pk_Columns_Input = {\n  repetition: Scalars['String'];\n};\n\n/** select columns of table \"QuestRepetition\" */\nexport enum QuestRepetition_Select_Column {\n  /** column name */\n  Repetition = 'repetition'\n}\n\n/** input type for updating data in table \"QuestRepetition\" */\nexport type QuestRepetition_Set_Input = {\n  repetition?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"QuestRepetition\" */\nexport enum QuestRepetition_Update_Column {\n  /** column name */\n  Repetition = 'repetition'\n}\n\n/** columns and relationships of \"QuestStatus\" */\nexport type QuestStatus = {\n  /** An array relationship */\n  quests: Array<Quest>;\n  /** An aggregated array relationship */\n  quests_aggregate: Quest_Aggregate;\n  status: Scalars['String'];\n};\n\n\n/** columns and relationships of \"QuestStatus\" */\nexport type QuestStatusQuestsArgs = {\n  distinct_on?: Maybe<Array<Quest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Order_By>>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"QuestStatus\" */\nexport type QuestStatusQuests_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Order_By>>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\n/** aggregated selection of \"QuestStatus\" */\nexport type QuestStatus_Aggregate = {\n  aggregate?: Maybe<QuestStatus_Aggregate_Fields>;\n  nodes: Array<QuestStatus>;\n};\n\n/** aggregate fields of \"QuestStatus\" */\nexport type QuestStatus_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<QuestStatus_Max_Fields>;\n  min?: Maybe<QuestStatus_Min_Fields>;\n};\n\n\n/** aggregate fields of \"QuestStatus\" */\nexport type QuestStatus_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<QuestStatus_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"QuestStatus\" */\nexport type QuestStatus_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<QuestStatus_Max_Order_By>;\n  min?: Maybe<QuestStatus_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"QuestStatus\" */\nexport type QuestStatus_Arr_Rel_Insert_Input = {\n  data: Array<QuestStatus_Insert_Input>;\n  on_conflict?: Maybe<QuestStatus_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"QuestStatus\". All fields are combined with a logical 'AND'. */\nexport type QuestStatus_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<QuestStatus_Bool_Exp>>>;\n  _not?: Maybe<QuestStatus_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<QuestStatus_Bool_Exp>>>;\n  quests?: Maybe<Quest_Bool_Exp>;\n  status?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"QuestStatus\" */\nexport enum QuestStatus_Constraint {\n  /** unique or primary key constraint */\n  QuestStatusPkey = 'QuestStatus_pkey'\n}\n\nexport enum QuestStatus_Enum {\n  Closed = 'CLOSED',\n  Open = 'OPEN'\n}\n\n/** expression to compare columns of type QuestStatus_enum. All fields are combined with logical 'AND'. */\nexport type QuestStatus_Enum_Comparison_Exp = {\n  _eq?: Maybe<QuestStatus_Enum>;\n  _in?: Maybe<Array<QuestStatus_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<QuestStatus_Enum>;\n  _nin?: Maybe<Array<QuestStatus_Enum>>;\n};\n\n/** input type for inserting data into table \"QuestStatus\" */\nexport type QuestStatus_Insert_Input = {\n  quests?: Maybe<Quest_Arr_Rel_Insert_Input>;\n  status?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type QuestStatus_Max_Fields = {\n  status?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"QuestStatus\" */\nexport type QuestStatus_Max_Order_By = {\n  status?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type QuestStatus_Min_Fields = {\n  status?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"QuestStatus\" */\nexport type QuestStatus_Min_Order_By = {\n  status?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"QuestStatus\" */\nexport type QuestStatus_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<QuestStatus>;\n};\n\n/** input type for inserting object relation for remote table \"QuestStatus\" */\nexport type QuestStatus_Obj_Rel_Insert_Input = {\n  data: QuestStatus_Insert_Input;\n  on_conflict?: Maybe<QuestStatus_On_Conflict>;\n};\n\n/** on conflict condition type for table \"QuestStatus\" */\nexport type QuestStatus_On_Conflict = {\n  constraint: QuestStatus_Constraint;\n  update_columns: Array<QuestStatus_Update_Column>;\n  where?: Maybe<QuestStatus_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"QuestStatus\" */\nexport type QuestStatus_Order_By = {\n  quests_aggregate?: Maybe<Quest_Aggregate_Order_By>;\n  status?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"QuestStatus\" */\nexport type QuestStatus_Pk_Columns_Input = {\n  status: Scalars['String'];\n};\n\n/** select columns of table \"QuestStatus\" */\nexport enum QuestStatus_Select_Column {\n  /** column name */\n  Status = 'status'\n}\n\n/** input type for updating data in table \"QuestStatus\" */\nexport type QuestStatus_Set_Input = {\n  status?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"QuestStatus\" */\nexport enum QuestStatus_Update_Column {\n  /** column name */\n  Status = 'status'\n}\n\n/** columns and relationships of \"skill\" */\nexport type Skill = {\n  /** An array relationship */\n  Player_Skills: Array<Player_Skill>;\n  /** An aggregated array relationship */\n  Player_Skills_aggregate: Player_Skill_Aggregate;\n  category: SkillCategory_Enum;\n  id: Scalars['uuid'];\n  name: Scalars['String'];\n  /** An array relationship */\n  quest_skills: Array<Quest_Skill>;\n  /** An aggregated array relationship */\n  quest_skills_aggregate: Quest_Skill_Aggregate;\n};\n\n\n/** columns and relationships of \"skill\" */\nexport type SkillPlayer_SkillsArgs = {\n  distinct_on?: Maybe<Array<Player_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Skill_Order_By>>;\n  where?: Maybe<Player_Skill_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"skill\" */\nexport type SkillPlayer_Skills_AggregateArgs = {\n  distinct_on?: Maybe<Array<Player_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Skill_Order_By>>;\n  where?: Maybe<Player_Skill_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"skill\" */\nexport type SkillQuest_SkillsArgs = {\n  distinct_on?: Maybe<Array<Quest_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Skill_Order_By>>;\n  where?: Maybe<Quest_Skill_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"skill\" */\nexport type SkillQuest_Skills_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Skill_Order_By>>;\n  where?: Maybe<Quest_Skill_Bool_Exp>;\n};\n\n/** aggregated selection of \"skill\" */\nexport type Skill_Aggregate = {\n  aggregate?: Maybe<Skill_Aggregate_Fields>;\n  nodes: Array<Skill>;\n};\n\n/** aggregate fields of \"skill\" */\nexport type Skill_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Skill_Max_Fields>;\n  min?: Maybe<Skill_Min_Fields>;\n};\n\n\n/** aggregate fields of \"skill\" */\nexport type Skill_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Skill_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"skill\" */\nexport type Skill_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Skill_Max_Order_By>;\n  min?: Maybe<Skill_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"skill\" */\nexport type Skill_Arr_Rel_Insert_Input = {\n  data: Array<Skill_Insert_Input>;\n  on_conflict?: Maybe<Skill_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"skill\". All fields are combined with a logical 'AND'. */\nexport type Skill_Bool_Exp = {\n  Player_Skills?: Maybe<Player_Skill_Bool_Exp>;\n  _and?: Maybe<Array<Maybe<Skill_Bool_Exp>>>;\n  _not?: Maybe<Skill_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Skill_Bool_Exp>>>;\n  category?: Maybe<SkillCategory_Enum_Comparison_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  quest_skills?: Maybe<Quest_Skill_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"skill\" */\nexport enum Skill_Constraint {\n  /** unique or primary key constraint */\n  SkillPkey = 'Skill_pkey'\n}\n\n/** input type for inserting data into table \"skill\" */\nexport type Skill_Insert_Input = {\n  Player_Skills?: Maybe<Player_Skill_Arr_Rel_Insert_Input>;\n  category?: Maybe<SkillCategory_Enum>;\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n  quest_skills?: Maybe<Quest_Skill_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Skill_Max_Fields = {\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"skill\" */\nexport type Skill_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Skill_Min_Fields = {\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"skill\" */\nexport type Skill_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"skill\" */\nexport type Skill_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Skill>;\n};\n\n/** input type for inserting object relation for remote table \"skill\" */\nexport type Skill_Obj_Rel_Insert_Input = {\n  data: Skill_Insert_Input;\n  on_conflict?: Maybe<Skill_On_Conflict>;\n};\n\n/** on conflict condition type for table \"skill\" */\nexport type Skill_On_Conflict = {\n  constraint: Skill_Constraint;\n  update_columns: Array<Skill_Update_Column>;\n  where?: Maybe<Skill_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"skill\" */\nexport type Skill_Order_By = {\n  Player_Skills_aggregate?: Maybe<Player_Skill_Aggregate_Order_By>;\n  category?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  quest_skills_aggregate?: Maybe<Quest_Skill_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: \"skill\" */\nexport type Skill_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"skill\" */\nexport enum Skill_Select_Column {\n  /** column name */\n  Category = 'category',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name'\n}\n\n/** input type for updating data in table \"skill\" */\nexport type Skill_Set_Input = {\n  category?: Maybe<SkillCategory_Enum>;\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"skill\" */\nexport enum Skill_Update_Column {\n  /** column name */\n  Category = 'category',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name'\n}\n\n/** columns and relationships of \"SkillCategory\" */\nexport type SkillCategory = {\n  name: Scalars['String'];\n};\n\n/** aggregated selection of \"SkillCategory\" */\nexport type SkillCategory_Aggregate = {\n  aggregate?: Maybe<SkillCategory_Aggregate_Fields>;\n  nodes: Array<SkillCategory>;\n};\n\n/** aggregate fields of \"SkillCategory\" */\nexport type SkillCategory_Aggregate_Fields = {\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<SkillCategory_Max_Fields>;\n  min?: Maybe<SkillCategory_Min_Fields>;\n};\n\n\n/** aggregate fields of \"SkillCategory\" */\nexport type SkillCategory_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<SkillCategory_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"SkillCategory\" */\nexport type SkillCategory_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<SkillCategory_Max_Order_By>;\n  min?: Maybe<SkillCategory_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"SkillCategory\" */\nexport type SkillCategory_Arr_Rel_Insert_Input = {\n  data: Array<SkillCategory_Insert_Input>;\n  on_conflict?: Maybe<SkillCategory_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"SkillCategory\". All fields are combined with a logical 'AND'. */\nexport type SkillCategory_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<SkillCategory_Bool_Exp>>>;\n  _not?: Maybe<SkillCategory_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<SkillCategory_Bool_Exp>>>;\n  name?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"SkillCategory\" */\nexport enum SkillCategory_Constraint {\n  /** unique or primary key constraint */\n  SkillCategoryPkey = 'SkillCategory_pkey'\n}\n\nexport enum SkillCategory_Enum {\n  Community = 'COMMUNITY',\n  Design = 'DESIGN',\n  Dev = 'DEV',\n  Engineering = 'ENGINEERING',\n  Strategy = 'STRATEGY',\n  Technologies = 'TECHNOLOGIES'\n}\n\n/** expression to compare columns of type SkillCategory_enum. All fields are combined with logical 'AND'. */\nexport type SkillCategory_Enum_Comparison_Exp = {\n  _eq?: Maybe<SkillCategory_Enum>;\n  _in?: Maybe<Array<SkillCategory_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<SkillCategory_Enum>;\n  _nin?: Maybe<Array<SkillCategory_Enum>>;\n};\n\n/** input type for inserting data into table \"SkillCategory\" */\nexport type SkillCategory_Insert_Input = {\n  name?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type SkillCategory_Max_Fields = {\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"SkillCategory\" */\nexport type SkillCategory_Max_Order_By = {\n  name?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type SkillCategory_Min_Fields = {\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"SkillCategory\" */\nexport type SkillCategory_Min_Order_By = {\n  name?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"SkillCategory\" */\nexport type SkillCategory_Mutation_Response = {\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<SkillCategory>;\n};\n\n/** input type for inserting object relation for remote table \"SkillCategory\" */\nexport type SkillCategory_Obj_Rel_Insert_Input = {\n  data: SkillCategory_Insert_Input;\n  on_conflict?: Maybe<SkillCategory_On_Conflict>;\n};\n\n/** on conflict condition type for table \"SkillCategory\" */\nexport type SkillCategory_On_Conflict = {\n  constraint: SkillCategory_Constraint;\n  update_columns: Array<SkillCategory_Update_Column>;\n  where?: Maybe<SkillCategory_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"SkillCategory\" */\nexport type SkillCategory_Order_By = {\n  name?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"SkillCategory\" */\nexport type SkillCategory_Pk_Columns_Input = {\n  name: Scalars['String'];\n};\n\n/** select columns of table \"SkillCategory\" */\nexport enum SkillCategory_Select_Column {\n  /** column name */\n  Name = 'name'\n}\n\n/** input type for updating data in table \"SkillCategory\" */\nexport type SkillCategory_Set_Input = {\n  name?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"SkillCategory\" */\nexport enum SkillCategory_Update_Column {\n  /** column name */\n  Name = 'name'\n}\n\n/** expression to compare columns of type String. All fields are combined with logical 'AND'. */\nexport type String_Comparison_Exp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  _nlike?: Maybe<Scalars['String']>;\n  _nsimilar?: Maybe<Scalars['String']>;\n  _similar?: Maybe<Scalars['String']>;\n};\n\n/** subscription root */\nexport type Subscription_Root = {\n  /** fetch data from the table: \"AccountType\" */\n  AccountType: Array<AccountType>;\n  /** fetch aggregated fields from the table: \"AccountType\" */\n  AccountType_aggregate: AccountType_Aggregate;\n  /** fetch data from the table: \"AccountType\" using primary key columns */\n  AccountType_by_pk?: Maybe<AccountType>;\n  /** fetch data from the table: \"ColorAspect\" */\n  ColorAspect: Array<ColorAspect>;\n  /** fetch aggregated fields from the table: \"ColorAspect\" */\n  ColorAspect_aggregate: ColorAspect_Aggregate;\n  /** fetch data from the table: \"ColorAspect\" using primary key columns */\n  ColorAspect_by_pk?: Maybe<ColorAspect>;\n  /** fetch data from the table: \"GuildPosition\" */\n  GuildPosition: Array<GuildPosition>;\n  /** fetch aggregated fields from the table: \"GuildPosition\" */\n  GuildPosition_aggregate: GuildPosition_Aggregate;\n  /** fetch data from the table: \"GuildPosition\" using primary key columns */\n  GuildPosition_by_pk?: Maybe<GuildPosition>;\n  /** fetch data from the table: \"GuildStatus\" */\n  GuildStatus: Array<GuildStatus>;\n  /** fetch aggregated fields from the table: \"GuildStatus\" */\n  GuildStatus_aggregate: GuildStatus_Aggregate;\n  /** fetch data from the table: \"GuildStatus\" using primary key columns */\n  GuildStatus_by_pk?: Maybe<GuildStatus>;\n  /** fetch data from the table: \"GuildType\" */\n  GuildType: Array<GuildType>;\n  /** fetch aggregated fields from the table: \"GuildType\" */\n  GuildType_aggregate: GuildType_Aggregate;\n  /** fetch data from the table: \"GuildType\" using primary key columns */\n  GuildType_by_pk?: Maybe<GuildType>;\n  /** fetch data from the table: \"PlayerRank\" */\n  PlayerRank: Array<PlayerRank>;\n  /** fetch aggregated fields from the table: \"PlayerRank\" */\n  PlayerRank_aggregate: PlayerRank_Aggregate;\n  /** fetch data from the table: \"PlayerRank\" using primary key columns */\n  PlayerRank_by_pk?: Maybe<PlayerRank>;\n  /** fetch data from the table: \"QuestCompletionStatus\" */\n  QuestCompletionStatus: Array<QuestCompletionStatus>;\n  /** fetch aggregated fields from the table: \"QuestCompletionStatus\" */\n  QuestCompletionStatus_aggregate: QuestCompletionStatus_Aggregate;\n  /** fetch data from the table: \"QuestCompletionStatus\" using primary key columns */\n  QuestCompletionStatus_by_pk?: Maybe<QuestCompletionStatus>;\n  /** fetch data from the table: \"QuestRepetition\" */\n  QuestRepetition: Array<QuestRepetition>;\n  /** fetch aggregated fields from the table: \"QuestRepetition\" */\n  QuestRepetition_aggregate: QuestRepetition_Aggregate;\n  /** fetch data from the table: \"QuestRepetition\" using primary key columns */\n  QuestRepetition_by_pk?: Maybe<QuestRepetition>;\n  /** fetch data from the table: \"QuestStatus\" */\n  QuestStatus: Array<QuestStatus>;\n  /** fetch aggregated fields from the table: \"QuestStatus\" */\n  QuestStatus_aggregate: QuestStatus_Aggregate;\n  /** fetch data from the table: \"QuestStatus\" using primary key columns */\n  QuestStatus_by_pk?: Maybe<QuestStatus>;\n  /** fetch data from the table: \"SkillCategory\" */\n  SkillCategory: Array<SkillCategory>;\n  /** fetch aggregated fields from the table: \"SkillCategory\" */\n  SkillCategory_aggregate: SkillCategory_Aggregate;\n  /** fetch data from the table: \"SkillCategory\" using primary key columns */\n  SkillCategory_by_pk?: Maybe<SkillCategory>;\n  /** fetch data from the table: \"guild\" */\n  guild: Array<Guild>;\n  /** fetch data from the table: \"guild_account\" */\n  guild_account: Array<Guild_Account>;\n  /** fetch aggregated fields from the table: \"guild_account\" */\n  guild_account_aggregate: Guild_Account_Aggregate;\n  /** fetch data from the table: \"guild_account\" using primary key columns */\n  guild_account_by_pk?: Maybe<Guild_Account>;\n  /** fetch aggregated fields from the table: \"guild\" */\n  guild_aggregate: Guild_Aggregate;\n  /** fetch data from the table: \"guild\" using primary key columns */\n  guild_by_pk?: Maybe<Guild>;\n  /** fetch data from the table: \"guild_player\" */\n  guild_player: Array<Guild_Player>;\n  /** fetch aggregated fields from the table: \"guild_player\" */\n  guild_player_aggregate: Guild_Player_Aggregate;\n  /** fetch data from the table: \"guild_player\" using primary key columns */\n  guild_player_by_pk?: Maybe<Guild_Player>;\n  /** fetch data from the table: \"me\" */\n  me: Array<Me>;\n  /** fetch aggregated fields from the table: \"me\" */\n  me_aggregate: Me_Aggregate;\n  /** fetch data from the table: \"player\" */\n  player: Array<Player>;\n  /** fetch data from the table: \"player_account\" */\n  player_account: Array<Player_Account>;\n  /** fetch aggregated fields from the table: \"player_account\" */\n  player_account_aggregate: Player_Account_Aggregate;\n  /** fetch aggregated fields from the table: \"player\" */\n  player_aggregate: Player_Aggregate;\n  /** fetch data from the table: \"player\" using primary key columns */\n  player_by_pk?: Maybe<Player>;\n  /** fetch data from the table: \"player_skill\" */\n  player_skill: Array<Player_Skill>;\n  /** fetch aggregated fields from the table: \"player_skill\" */\n  player_skill_aggregate: Player_Skill_Aggregate;\n  /** fetch data from the table: \"player_skill\" using primary key columns */\n  player_skill_by_pk?: Maybe<Player_Skill>;\n  /** fetch data from the table: \"player_type\" */\n  player_type: Array<Player_Type>;\n  /** fetch aggregated fields from the table: \"player_type\" */\n  player_type_aggregate: Player_Type_Aggregate;\n  /** fetch data from the table: \"player_type\" using primary key columns */\n  player_type_by_pk?: Maybe<Player_Type>;\n  /** fetch data from the table: \"profile_cache\" */\n  profile_cache: Array<Profile_Cache>;\n  /** fetch aggregated fields from the table: \"profile_cache\" */\n  profile_cache_aggregate: Profile_Cache_Aggregate;\n  /** fetch data from the table: \"profile_cache\" using primary key columns */\n  profile_cache_by_pk?: Maybe<Profile_Cache>;\n  /** fetch data from the table: \"quest\" */\n  quest: Array<Quest>;\n  /** fetch aggregated fields from the table: \"quest\" */\n  quest_aggregate: Quest_Aggregate;\n  /** fetch data from the table: \"quest\" using primary key columns */\n  quest_by_pk?: Maybe<Quest>;\n  /** fetch data from the table: \"quest_completion\" */\n  quest_completion: Array<Quest_Completion>;\n  /** fetch aggregated fields from the table: \"quest_completion\" */\n  quest_completion_aggregate: Quest_Completion_Aggregate;\n  /** fetch data from the table: \"quest_completion\" using primary key columns */\n  quest_completion_by_pk?: Maybe<Quest_Completion>;\n  /** fetch data from the table: \"quest_skill\" */\n  quest_skill: Array<Quest_Skill>;\n  /** fetch aggregated fields from the table: \"quest_skill\" */\n  quest_skill_aggregate: Quest_Skill_Aggregate;\n  /** fetch data from the table: \"quest_skill\" using primary key columns */\n  quest_skill_by_pk?: Maybe<Quest_Skill>;\n  /** fetch data from the table: \"skill\" */\n  skill: Array<Skill>;\n  /** fetch aggregated fields from the table: \"skill\" */\n  skill_aggregate: Skill_Aggregate;\n  /** fetch data from the table: \"skill\" using primary key columns */\n  skill_by_pk?: Maybe<Skill>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootAccountTypeArgs = {\n  distinct_on?: Maybe<Array<AccountType_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<AccountType_Order_By>>;\n  where?: Maybe<AccountType_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootAccountType_AggregateArgs = {\n  distinct_on?: Maybe<Array<AccountType_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<AccountType_Order_By>>;\n  where?: Maybe<AccountType_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootAccountType_By_PkArgs = {\n  type: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootColorAspectArgs = {\n  distinct_on?: Maybe<Array<ColorAspect_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<ColorAspect_Order_By>>;\n  where?: Maybe<ColorAspect_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootColorAspect_AggregateArgs = {\n  distinct_on?: Maybe<Array<ColorAspect_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<ColorAspect_Order_By>>;\n  where?: Maybe<ColorAspect_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootColorAspect_By_PkArgs = {\n  mask: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuildPositionArgs = {\n  distinct_on?: Maybe<Array<GuildPosition_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<GuildPosition_Order_By>>;\n  where?: Maybe<GuildPosition_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuildPosition_AggregateArgs = {\n  distinct_on?: Maybe<Array<GuildPosition_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<GuildPosition_Order_By>>;\n  where?: Maybe<GuildPosition_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuildPosition_By_PkArgs = {\n  position: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuildStatusArgs = {\n  distinct_on?: Maybe<Array<GuildStatus_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<GuildStatus_Order_By>>;\n  where?: Maybe<GuildStatus_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuildStatus_AggregateArgs = {\n  distinct_on?: Maybe<Array<GuildStatus_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<GuildStatus_Order_By>>;\n  where?: Maybe<GuildStatus_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuildStatus_By_PkArgs = {\n  status: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuildTypeArgs = {\n  distinct_on?: Maybe<Array<GuildType_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<GuildType_Order_By>>;\n  where?: Maybe<GuildType_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuildType_AggregateArgs = {\n  distinct_on?: Maybe<Array<GuildType_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<GuildType_Order_By>>;\n  where?: Maybe<GuildType_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuildType_By_PkArgs = {\n  name: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayerRankArgs = {\n  distinct_on?: Maybe<Array<PlayerRank_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<PlayerRank_Order_By>>;\n  where?: Maybe<PlayerRank_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayerRank_AggregateArgs = {\n  distinct_on?: Maybe<Array<PlayerRank_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<PlayerRank_Order_By>>;\n  where?: Maybe<PlayerRank_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayerRank_By_PkArgs = {\n  rank: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuestCompletionStatusArgs = {\n  distinct_on?: Maybe<Array<QuestCompletionStatus_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<QuestCompletionStatus_Order_By>>;\n  where?: Maybe<QuestCompletionStatus_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuestCompletionStatus_AggregateArgs = {\n  distinct_on?: Maybe<Array<QuestCompletionStatus_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<QuestCompletionStatus_Order_By>>;\n  where?: Maybe<QuestCompletionStatus_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuestCompletionStatus_By_PkArgs = {\n  status: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuestRepetitionArgs = {\n  distinct_on?: Maybe<Array<QuestRepetition_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<QuestRepetition_Order_By>>;\n  where?: Maybe<QuestRepetition_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuestRepetition_AggregateArgs = {\n  distinct_on?: Maybe<Array<QuestRepetition_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<QuestRepetition_Order_By>>;\n  where?: Maybe<QuestRepetition_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuestRepetition_By_PkArgs = {\n  repetition: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuestStatusArgs = {\n  distinct_on?: Maybe<Array<QuestStatus_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<QuestStatus_Order_By>>;\n  where?: Maybe<QuestStatus_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuestStatus_AggregateArgs = {\n  distinct_on?: Maybe<Array<QuestStatus_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<QuestStatus_Order_By>>;\n  where?: Maybe<QuestStatus_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuestStatus_By_PkArgs = {\n  status: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootSkillCategoryArgs = {\n  distinct_on?: Maybe<Array<SkillCategory_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<SkillCategory_Order_By>>;\n  where?: Maybe<SkillCategory_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootSkillCategory_AggregateArgs = {\n  distinct_on?: Maybe<Array<SkillCategory_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<SkillCategory_Order_By>>;\n  where?: Maybe<SkillCategory_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootSkillCategory_By_PkArgs = {\n  name: Scalars['String'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuildArgs = {\n  distinct_on?: Maybe<Array<Guild_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Order_By>>;\n  where?: Maybe<Guild_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuild_AccountArgs = {\n  distinct_on?: Maybe<Array<Guild_Account_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Account_Order_By>>;\n  where?: Maybe<Guild_Account_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuild_Account_AggregateArgs = {\n  distinct_on?: Maybe<Array<Guild_Account_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Account_Order_By>>;\n  where?: Maybe<Guild_Account_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuild_Account_By_PkArgs = {\n  guild_id: Scalars['uuid'];\n  type: AccountType_Enum;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuild_AggregateArgs = {\n  distinct_on?: Maybe<Array<Guild_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Order_By>>;\n  where?: Maybe<Guild_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuild_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuild_PlayerArgs = {\n  distinct_on?: Maybe<Array<Guild_Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Player_Order_By>>;\n  where?: Maybe<Guild_Player_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuild_Player_AggregateArgs = {\n  distinct_on?: Maybe<Array<Guild_Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Guild_Player_Order_By>>;\n  where?: Maybe<Guild_Player_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootGuild_Player_By_PkArgs = {\n  guild_id: Scalars['uuid'];\n  player_id: Scalars['uuid'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootMeArgs = {\n  distinct_on?: Maybe<Array<Me_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Me_Order_By>>;\n  where?: Maybe<Me_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootMe_AggregateArgs = {\n  distinct_on?: Maybe<Array<Me_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Me_Order_By>>;\n  where?: Maybe<Me_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayerArgs = {\n  distinct_on?: Maybe<Array<Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Order_By>>;\n  where?: Maybe<Player_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayer_AccountArgs = {\n  distinct_on?: Maybe<Array<Player_Account_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Account_Order_By>>;\n  where?: Maybe<Player_Account_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayer_Account_AggregateArgs = {\n  distinct_on?: Maybe<Array<Player_Account_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Account_Order_By>>;\n  where?: Maybe<Player_Account_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayer_AggregateArgs = {\n  distinct_on?: Maybe<Array<Player_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Order_By>>;\n  where?: Maybe<Player_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayer_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayer_SkillArgs = {\n  distinct_on?: Maybe<Array<Player_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Skill_Order_By>>;\n  where?: Maybe<Player_Skill_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayer_Skill_AggregateArgs = {\n  distinct_on?: Maybe<Array<Player_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Skill_Order_By>>;\n  where?: Maybe<Player_Skill_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayer_Skill_By_PkArgs = {\n  player_id: Scalars['uuid'];\n  skill_id: Scalars['uuid'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayer_TypeArgs = {\n  distinct_on?: Maybe<Array<Player_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Type_Order_By>>;\n  where?: Maybe<Player_Type_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayer_Type_AggregateArgs = {\n  distinct_on?: Maybe<Array<Player_Type_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Player_Type_Order_By>>;\n  where?: Maybe<Player_Type_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootPlayer_Type_By_PkArgs = {\n  id: Scalars['Int'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootProfile_CacheArgs = {\n  distinct_on?: Maybe<Array<Profile_Cache_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Profile_Cache_Order_By>>;\n  where?: Maybe<Profile_Cache_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootProfile_Cache_AggregateArgs = {\n  distinct_on?: Maybe<Array<Profile_Cache_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Profile_Cache_Order_By>>;\n  where?: Maybe<Profile_Cache_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootProfile_Cache_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuestArgs = {\n  distinct_on?: Maybe<Array<Quest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Order_By>>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuest_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Order_By>>;\n  where?: Maybe<Quest_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuest_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuest_CompletionArgs = {\n  distinct_on?: Maybe<Array<Quest_Completion_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Completion_Order_By>>;\n  where?: Maybe<Quest_Completion_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuest_Completion_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Completion_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Completion_Order_By>>;\n  where?: Maybe<Quest_Completion_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuest_Completion_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuest_SkillArgs = {\n  distinct_on?: Maybe<Array<Quest_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Skill_Order_By>>;\n  where?: Maybe<Quest_Skill_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuest_Skill_AggregateArgs = {\n  distinct_on?: Maybe<Array<Quest_Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Quest_Skill_Order_By>>;\n  where?: Maybe<Quest_Skill_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootQuest_Skill_By_PkArgs = {\n  quest_id: Scalars['uuid'];\n  skill_id: Scalars['uuid'];\n};\n\n\n/** subscription root */\nexport type Subscription_RootSkillArgs = {\n  distinct_on?: Maybe<Array<Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Skill_Order_By>>;\n  where?: Maybe<Skill_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootSkill_AggregateArgs = {\n  distinct_on?: Maybe<Array<Skill_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Skill_Order_By>>;\n  where?: Maybe<Skill_Bool_Exp>;\n};\n\n\n/** subscription root */\nexport type Subscription_RootSkill_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** expression to compare columns of type timestamptz. All fields are combined with logical 'AND'. */\nexport type Timestamptz_Comparison_Exp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\nexport type TokenBalances = {\n  id: Scalars['ID'];\n  pSeedBalance: Scalars['String'];\n  seedBalance: Scalars['String'];\n};\n\nexport type UpdateBoxProfileResponse = {\n  success: Scalars['Boolean'];\n  updatedProfiles: Array<Scalars['String']>;\n};\n\nexport type UpdateIdxProfileResponse = {\n  success: Scalars['Boolean'];\n  updatedProfiles: Array<Scalars['String']>;\n};\n\nexport type UpdateQuestCompletionInput = {\n  quest_completion_id: Scalars['String'];\n  status: QuestCompletionStatus_ActionEnum;\n};\n\nexport type UpdateQuestCompletionOutput = {\n  error?: Maybe<Scalars['String']>;\n  quest_completion?: Maybe<Quest_Completion>;\n  quest_completion_id?: Maybe<Scalars['uuid']>;\n  success: Scalars['Boolean'];\n};\n\n\n/** expression to compare columns of type uuid. All fields are combined with logical 'AND'. */\nexport type Uuid_Comparison_Exp = {\n  _eq?: Maybe<Scalars['uuid']>;\n  _gt?: Maybe<Scalars['uuid']>;\n  _gte?: Maybe<Scalars['uuid']>;\n  _in?: Maybe<Array<Scalars['uuid']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['uuid']>;\n  _lte?: Maybe<Scalars['uuid']>;\n  _neq?: Maybe<Scalars['uuid']>;\n  _nin?: Maybe<Array<Scalars['uuid']>>;\n};\n\nexport type PlayerFragmentFragment = (\n  Pick<Player, 'id' | 'username' | 'total_xp' | 'rank' | 'ethereum_address' | 'availability_hours' | 'timezone'>\n  & { ColorAspect?: Maybe<Pick<ColorAspect, 'name' | 'description' | 'mask'>>, playerType?: Maybe<Pick<Player_Type, 'description' | 'id' | 'imageUrl' | 'title'>>, Player_Skills: Array<{ Skill: Pick<Skill, 'category' | 'id' | 'name'> }>, Accounts: Array<Pick<Player_Account, 'identifier' | 'type'>>, profile_cache?: Maybe<Pick<Profile_Cache, 'description' | 'emoji' | 'backgroundImageURL' | 'imageURL' | 'location' | 'name'>>, daohausMemberships: Array<(\n    Pick<Member, 'id' | 'shares' | 'molochAddress'>\n    & { moloch: Pick<Moloch, 'id' | 'title' | 'version' | 'totalShares' | 'chain'> }\n  )>, brightid_status?: Maybe<Pick<BrightIdStatus, 'unique' | 'contextIds'>> }\n);\n\nexport type GuildFragmentFragment = Pick<Guild, 'id' | 'guildname' | 'description' | 'discord_invite_url' | 'join_button_url' | 'logo' | 'moloch_address' | 'name' | 'type' | 'position' | 'website_url' | 'github_url' | 'twitter_url'>;\n\nexport type QuestFragmentFragment = (\n  Pick<Quest, 'id' | 'created_at' | 'cooldown' | 'description' | 'external_link' | 'guild_id' | 'status' | 'title' | 'repetition'>\n  & { guild: Pick<Guild, 'name' | 'logo'>, player: Pick<Player, 'id' | 'ethereum_address'>, quest_skills: Array<{ skill: Pick<Skill, 'id' | 'name' | 'category'> }> }\n);\n\nexport type QuestWithCompletionFragmentFragment = (\n  Pick<Quest, 'id' | 'created_at' | 'cooldown' | 'description' | 'external_link' | 'guild_id' | 'status' | 'title' | 'repetition'>\n  & { guild: Pick<Guild, 'name' | 'logo'>, quest_skills: Array<{ skill: Pick<Skill, 'id' | 'name' | 'category'> }>, quest_completions: Array<(\n    { player: Pick<Player, 'id' | 'ethereum_address' | 'username'> }\n    & QuestCompletionFragmentFragment\n  )> }\n);\n\nexport type QuestCompletionFragmentFragment = Pick<Quest_Completion, 'id' | 'completed_by_player_id' | 'status' | 'submission_link' | 'submission_text' | 'submitted_at'>;\n\nexport type TokenBalancesFragmentFragment = (\n  Pick<TokenBalances, 'pSeedBalance'>\n  & { address: TokenBalances['id'] }\n);\n\nexport type PlayerSkillFragmentFragment = Pick<Skill, 'id' | 'name' | 'category'>;\n\nexport type GetGuildQueryVariables = Exact<{\n  guildname: Scalars['String'];\n}>;\n\n\nexport type GetGuildQuery = { guild: Array<GuildFragmentFragment> };\n\nexport type GetGuildsQueryVariables = Exact<{\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetGuildsQuery = { guild: Array<GuildFragmentFragment> };\n\nexport type GetGuildnamesQueryVariables = Exact<{\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetGuildnamesQuery = { guild: Array<Pick<Guild, 'guildname'>> };\n\nexport type GetMeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMeQuery = { me: Array<(\n    Pick<Me, 'id' | 'ethereum_address' | 'username'>\n    & { player?: Maybe<PlayerFragmentFragment> }\n  )> };\n\nexport type GetMembershipsQueryVariables = Exact<{\n  address: Scalars['String'];\n}>;\n\n\nexport type GetMembershipsQuery = { getDaoHausMemberships: Array<(\n    Pick<Member, 'id'>\n    & { moloch: Pick<Moloch, 'id' | 'title' | 'version' | 'chain'> }\n  )> };\n\nexport type GetpSeedBalanceQueryVariables = Exact<{\n  address: Scalars['String'];\n}>;\n\n\nexport type GetpSeedBalanceQuery = { getTokenBalances?: Maybe<TokenBalancesFragmentFragment> };\n\nexport type GetPatronsQueryVariables = Exact<{\n  addresses?: Maybe<Array<Scalars['String']> | Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetPatronsQuery = { player: Array<PlayerFragmentFragment> };\n\nexport type GetpSeedHoldersQueryVariables = Exact<{\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetpSeedHoldersQuery = { pSeedHolders?: Maybe<Array<TokenBalancesFragmentFragment>> };\n\nexport type GetAspectsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAspectsQuery = { ColorAspect: Array<Pick<ColorAspect, 'mask' | 'name' | 'description'>> };\n\nexport type GetPlayerQueryVariables = Exact<{\n  username: Scalars['String'];\n}>;\n\n\nexport type GetPlayerQuery = { player: Array<PlayerFragmentFragment> };\n\nexport type GetPlayerTypesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPlayerTypesQuery = { player_type: Array<Pick<Player_Type, 'description' | 'id' | 'title' | 'imageUrl'>> };\n\nexport type GetPlayersQueryVariables = Exact<{\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  skillIds?: Maybe<Array<Scalars['uuid']> | Scalars['uuid']>;\n  playerTypeIds?: Maybe<Array<Scalars['Int']> | Scalars['Int']>;\n  availability?: Maybe<Scalars['Int']>;\n  timezones?: Maybe<Array<Scalars['String']> | Scalars['String']>;\n  search?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type GetPlayersQuery = { player: Array<PlayerFragmentFragment>, player_aggregate: { aggregate?: Maybe<Pick<Player_Aggregate_Fields, 'count'>> } };\n\nexport type GetPlayerUsernamesQueryVariables = Exact<{\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetPlayerUsernamesQuery = { player: Array<Pick<Player, 'username'>> };\n\nexport type GetPlayerFiltersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPlayerFiltersQuery = { skill_aggregate: { nodes: Array<{ name: Skill['category'] }> }, skill: Array<PlayerSkillFragmentFragment>, player_type: Array<{ value: Player_Type['id'], label: Player_Type['title'] }> };\n\nexport type GetQuestQueryVariables = Exact<{\n  id: Scalars['uuid'];\n}>;\n\n\nexport type GetQuestQuery = { quest_by_pk?: Maybe<QuestFragmentFragment> };\n\nexport type GetQuestWithCompletionsQueryVariables = Exact<{\n  id: Scalars['uuid'];\n}>;\n\n\nexport type GetQuestWithCompletionsQuery = { quest_by_pk?: Maybe<(\n    { player: PlayerFragmentFragment }\n    & QuestWithCompletionFragmentFragment\n  )> };\n\nexport type GetQuestIdsQueryVariables = Exact<{\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetQuestIdsQuery = { quest: Array<Pick<Quest, 'id'>> };\n\nexport type GetQuestsQueryVariables = Exact<{\n  limit?: Maybe<Scalars['Int']>;\n  status?: Maybe<QuestStatus_Enum>;\n  guild_id?: Maybe<Scalars['uuid']>;\n  order?: Maybe<Order_By>;\n  created_by_player_id?: Maybe<Scalars['uuid']>;\n}>;\n\n\nexport type GetQuestsQuery = { quest: Array<QuestFragmentFragment> };\n\nexport type GetQuestGuildsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetQuestGuildsQuery = { quest_aggregate: { nodes: Array<(\n      Pick<Quest, 'guild_id'>\n      & { guild: Pick<Guild, 'name'> }\n    )> } };\n\nexport type GetSkillsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetSkillsQuery = { skill: Array<PlayerSkillFragmentFragment> };\n\nexport type CreateQuestMutationVariables = Exact<{\n  input: CreateQuestInput;\n}>;\n\n\nexport type CreateQuestMutation = { createQuest?: Maybe<(\n    Pick<CreateQuestOutput, 'success' | 'error' | 'quest_id'>\n    & { quest?: Maybe<Pick<Quest, 'id'>> }\n  )> };\n\nexport type CreateQuestCompletionMutationVariables = Exact<{\n  input: CreateQuestCompletionInput;\n}>;\n\n\nexport type CreateQuestCompletionMutation = { createQuestCompletion?: Maybe<(\n    Pick<CreateQuestCompletionOutput, 'success' | 'error' | 'quest_completion_id'>\n    & { quest_completion?: Maybe<(\n      Pick<Quest_Completion, 'id'>\n      & { quest: Pick<Quest, 'id'> }\n    )> }\n  )> };\n\nexport type AuthenticateDiscordGuildMutationVariables = Exact<{\n  code: Scalars['String'];\n}>;\n\n\nexport type AuthenticateDiscordGuildMutation = { authenticateDiscordGuild?: Maybe<Pick<DiscordGuildAuthResponse, 'success' | 'guildname' | 'error' | 'exists'>> };\n\nexport type InsertCacheInvalidationMutationVariables = Exact<{\n  playerId: Scalars['uuid'];\n}>;\n\n\nexport type InsertCacheInvalidationMutation = { updateIDXProfile?: Maybe<Pick<CacheProcessOutput, 'success' | 'error'>> };\n\nexport type UpdatePlayerUsernameMutationVariables = Exact<{\n  playerId: Scalars['uuid'];\n  username: Scalars['String'];\n}>;\n\n\nexport type UpdatePlayerUsernameMutation = { update_player_by_pk?: Maybe<Pick<Player, 'id' | 'username'>> };\n\nexport type UpdateProfileMutationVariables = Exact<{\n  playerId: Scalars['uuid'];\n  input: Player_Set_Input;\n}>;\n\n\nexport type UpdateProfileMutation = { update_player_by_pk?: Maybe<Pick<Player, 'id' | 'availability_hours' | 'timezone'>> };\n\nexport type UpdateAboutYouMutationVariables = Exact<{\n  playerId: Scalars['uuid'];\n  input: Player_Set_Input;\n}>;\n\n\nexport type UpdateAboutYouMutation = { update_player_by_pk?: Maybe<(\n    Pick<Player, 'color_mask' | 'id'>\n    & { playerType?: Maybe<Pick<Player_Type, 'description' | 'id' | 'imageUrl' | 'title'>> }\n  )> };\n\nexport type UpdatePlayerSkillsMutationVariables = Exact<{\n  skills: Array<Player_Skill_Insert_Input> | Player_Skill_Insert_Input;\n}>;\n\n\nexport type UpdatePlayerSkillsMutation = { delete_player_skill?: Maybe<Pick<Player_Skill_Mutation_Response, 'affected_rows'>>, insert_player_skill?: Maybe<Pick<Player_Skill_Mutation_Response, 'affected_rows'>> };\n\nexport type UpdateQuestMutationVariables = Exact<{\n  id: Scalars['uuid'];\n  input: Quest_Set_Input;\n  skills: Array<Quest_Skill_Insert_Input> | Quest_Skill_Insert_Input;\n}>;\n\n\nexport type UpdateQuestMutation = { update_quest_by_pk?: Maybe<Pick<Quest, 'id'>>, delete_quest_skill?: Maybe<Pick<Quest_Skill_Mutation_Response, 'affected_rows'>>, insert_quest_skill?: Maybe<(\n    Pick<Quest_Skill_Mutation_Response, 'affected_rows'>\n    & { returning: Array<Pick<Quest_Skill, 'quest_id' | 'skill_id'>> }\n  )> };\n\nexport type UpdateQuestCompletionMutationVariables = Exact<{\n  quest_completion_id: Scalars['String'];\n  status: QuestCompletionStatus_ActionEnum;\n}>;\n\n\nexport type UpdateQuestCompletionMutation = { updateQuestCompletion?: Maybe<(\n    Pick<UpdateQuestCompletionOutput, 'error' | 'success' | 'quest_completion_id'>\n    & { quest_completion?: Maybe<Pick<Quest_Completion, 'id'>> }\n  )> };\n\nexport const PlayerFragmentFragmentDoc = gql`\n    fragment PlayerFragment on player {\n  id\n  username\n  total_xp\n  rank\n  ethereum_address\n  availability_hours\n  timezone\n  ColorAspect {\n    name\n    description\n    mask\n  }\n  playerType {\n    description\n    id\n    imageUrl\n    title\n  }\n  Player_Skills {\n    Skill {\n      category\n      id\n      name\n    }\n  }\n  Accounts(where: {type: {_in: [TWITTER, GITHUB]}}) {\n    identifier\n    type\n  }\n  profile_cache {\n    description\n    emoji\n    backgroundImageURL\n    imageURL\n    location\n    name\n  }\n  daohausMemberships {\n    id\n    shares\n    molochAddress\n    moloch {\n      id\n      title\n      version\n      totalShares\n      chain\n    }\n  }\n  brightid_status {\n    unique\n    contextIds\n  }\n}\n    `;\nexport const GuildFragmentFragmentDoc = gql`\n    fragment GuildFragment on guild {\n  id\n  guildname\n  description\n  discord_invite_url\n  join_button_url\n  logo\n  moloch_address\n  name\n  type\n  position\n  website_url\n  github_url\n  twitter_url\n}\n    `;\nexport const QuestFragmentFragmentDoc = gql`\n    fragment QuestFragment on quest {\n  id\n  created_at\n  cooldown\n  description\n  external_link\n  guild_id\n  status\n  title\n  repetition\n  guild {\n    name\n    logo\n  }\n  player {\n    id\n    ethereum_address\n  }\n  quest_skills {\n    skill {\n      id\n      name\n      category\n    }\n  }\n}\n    `;\nexport const QuestCompletionFragmentFragmentDoc = gql`\n    fragment QuestCompletionFragment on quest_completion {\n  id\n  completed_by_player_id\n  status\n  submission_link\n  submission_text\n  submitted_at\n}\n    `;\nexport const QuestWithCompletionFragmentFragmentDoc = gql`\n    fragment QuestWithCompletionFragment on quest {\n  id\n  created_at\n  cooldown\n  description\n  external_link\n  guild_id\n  status\n  title\n  repetition\n  guild {\n    name\n    logo\n  }\n  quest_skills {\n    skill {\n      id\n      name\n      category\n    }\n  }\n  quest_completions(order_by: [{submitted_at: desc}]) {\n    ...QuestCompletionFragment\n    player {\n      id\n      ethereum_address\n      username\n    }\n  }\n}\n    ${QuestCompletionFragmentFragmentDoc}`;\nexport const TokenBalancesFragmentFragmentDoc = gql`\n    fragment TokenBalancesFragment on TokenBalances {\n  address: id\n  pSeedBalance\n}\n    `;\nexport const PlayerSkillFragmentFragmentDoc = gql`\n    fragment PlayerSkillFragment on skill {\n  id\n  name\n  category\n}\n    `;\nexport const GetGuildDocument = gql`\n    query GetGuild($guildname: String!) {\n  guild(where: {guildname: {_eq: $guildname}}) {\n    ...GuildFragment\n  }\n}\n    ${GuildFragmentFragmentDoc}`;\n\nexport function useGetGuildQuery(options: Omit<Urql.UseQueryArgs<GetGuildQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetGuildQuery>({ query: GetGuildDocument, ...options });\n};\nexport const GetGuildsDocument = gql`\n    query GetGuilds($limit: Int) {\n  guild(where: {status: {_eq: ACTIVE}}, limit: $limit) {\n    ...GuildFragment\n  }\n}\n    ${GuildFragmentFragmentDoc}`;\n\nexport function useGetGuildsQuery(options: Omit<Urql.UseQueryArgs<GetGuildsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetGuildsQuery>({ query: GetGuildsDocument, ...options });\n};\nexport const GetGuildnamesDocument = gql`\n    query GetGuildnames($limit: Int) {\n  guild(where: {status: {_eq: ACTIVE}}, limit: $limit) {\n    guildname\n  }\n}\n    `;\n\nexport function useGetGuildnamesQuery(options: Omit<Urql.UseQueryArgs<GetGuildnamesQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetGuildnamesQuery>({ query: GetGuildnamesDocument, ...options });\n};\nexport const GetMeDocument = gql`\n    query GetMe {\n  me {\n    id\n    ethereum_address\n    username\n    player {\n      ...PlayerFragment\n    }\n  }\n}\n    ${PlayerFragmentFragmentDoc}`;\n\nexport function useGetMeQuery(options: Omit<Urql.UseQueryArgs<GetMeQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetMeQuery>({ query: GetMeDocument, ...options });\n};\nexport const GetMembershipsDocument = gql`\n    query GetMemberships($address: String!) {\n  getDaoHausMemberships(memberAddress: $address) {\n    id\n    moloch {\n      id\n      title\n      version\n      chain\n    }\n  }\n}\n    `;\n\nexport function useGetMembershipsQuery(options: Omit<Urql.UseQueryArgs<GetMembershipsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetMembershipsQuery>({ query: GetMembershipsDocument, ...options });\n};\nexport const GetpSeedBalanceDocument = gql`\n    query GetpSeedBalance($address: String!) {\n  getTokenBalances(address: $address) {\n    ...TokenBalancesFragment\n  }\n}\n    ${TokenBalancesFragmentFragmentDoc}`;\n\nexport function useGetpSeedBalanceQuery(options: Omit<Urql.UseQueryArgs<GetpSeedBalanceQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetpSeedBalanceQuery>({ query: GetpSeedBalanceDocument, ...options });\n};\nexport const GetPatronsDocument = gql`\n    query GetPatrons($addresses: [String!], $limit: Int) {\n  player(where: {ethereum_address: {_in: $addresses}}, limit: $limit) {\n    ...PlayerFragment\n  }\n}\n    ${PlayerFragmentFragmentDoc}`;\n\nexport function useGetPatronsQuery(options: Omit<Urql.UseQueryArgs<GetPatronsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetPatronsQuery>({ query: GetPatronsDocument, ...options });\n};\nexport const GetpSeedHoldersDocument = gql`\n    query GetpSeedHolders($limit: Int) {\n  pSeedHolders: getTopPSeedHolders(limit: $limit) {\n    ...TokenBalancesFragment\n  }\n}\n    ${TokenBalancesFragmentFragmentDoc}`;\n\nexport function useGetpSeedHoldersQuery(options: Omit<Urql.UseQueryArgs<GetpSeedHoldersQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetpSeedHoldersQuery>({ query: GetpSeedHoldersDocument, ...options });\n};\nexport const GetAspectsDocument = gql`\n    query GetAspects {\n  ColorAspect {\n    mask\n    name\n    description\n  }\n}\n    `;\n\nexport function useGetAspectsQuery(options: Omit<Urql.UseQueryArgs<GetAspectsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetAspectsQuery>({ query: GetAspectsDocument, ...options });\n};\nexport const GetPlayerDocument = gql`\n    query GetPlayer($username: String!) {\n  player(where: {username: {_eq: $username}}) {\n    ...PlayerFragment\n  }\n}\n    ${PlayerFragmentFragmentDoc}`;\n\nexport function useGetPlayerQuery(options: Omit<Urql.UseQueryArgs<GetPlayerQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetPlayerQuery>({ query: GetPlayerDocument, ...options });\n};\nexport const GetPlayerTypesDocument = gql`\n    query GetPlayerTypes {\n  player_type {\n    description\n    id\n    title\n    imageUrl\n  }\n}\n    `;\n\nexport function useGetPlayerTypesQuery(options: Omit<Urql.UseQueryArgs<GetPlayerTypesQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetPlayerTypesQuery>({ query: GetPlayerTypesDocument, ...options });\n};\nexport const GetPlayersDocument = gql`\n    query GetPlayers($offset: Int, $limit: Int, $skillIds: [uuid!], $playerTypeIds: [Int!], $availability: Int, $timezones: [String!], $search: String) {\n  player(\n    order_by: {total_xp: desc}\n    offset: $offset\n    limit: $limit\n    where: {availability_hours: {_gte: $availability}, timezone: {_in: $timezones}, playerType: {id: {_in: $playerTypeIds}}, Player_Skills: {Skill: {id: {_in: $skillIds}}}, _or: [{username: {_ilike: $search}}, {ethereum_address: {_ilike: $search}}]}\n  ) {\n    ...PlayerFragment\n  }\n  player_aggregate(\n    where: {availability_hours: {_gte: $availability}, timezone: {_in: $timezones}, playerType: {id: {_in: $playerTypeIds}}, Player_Skills: {Skill: {id: {_in: $skillIds}}}, _or: [{username: {_ilike: $search}}, {ethereum_address: {_ilike: $search}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    ${PlayerFragmentFragmentDoc}`;\n\nexport function useGetPlayersQuery(options: Omit<Urql.UseQueryArgs<GetPlayersQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetPlayersQuery>({ query: GetPlayersDocument, ...options });\n};\nexport const GetPlayerUsernamesDocument = gql`\n    query GetPlayerUsernames($limit: Int) {\n  player(order_by: {total_xp: desc}, limit: $limit) {\n    username\n  }\n}\n    `;\n\nexport function useGetPlayerUsernamesQuery(options: Omit<Urql.UseQueryArgs<GetPlayerUsernamesQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetPlayerUsernamesQuery>({ query: GetPlayerUsernamesDocument, ...options });\n};\nexport const GetPlayerFiltersDocument = gql`\n    query GetPlayerFilters {\n  skill_aggregate(distinct_on: category) {\n    nodes {\n      name: category\n    }\n  }\n  skill(order_by: {Player_Skills_aggregate: {count: desc}, category: asc}) {\n    ...PlayerSkillFragment\n  }\n  player_type(distinct_on: id) {\n    value: id\n    label: title\n  }\n}\n    ${PlayerSkillFragmentFragmentDoc}`;\n\nexport function useGetPlayerFiltersQuery(options: Omit<Urql.UseQueryArgs<GetPlayerFiltersQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetPlayerFiltersQuery>({ query: GetPlayerFiltersDocument, ...options });\n};\nexport const GetQuestDocument = gql`\n    query GetQuest($id: uuid!) {\n  quest_by_pk(id: $id) {\n    ...QuestFragment\n  }\n}\n    ${QuestFragmentFragmentDoc}`;\n\nexport function useGetQuestQuery(options: Omit<Urql.UseQueryArgs<GetQuestQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetQuestQuery>({ query: GetQuestDocument, ...options });\n};\nexport const GetQuestWithCompletionsDocument = gql`\n    query GetQuestWithCompletions($id: uuid!) {\n  quest_by_pk(id: $id) {\n    ...QuestWithCompletionFragment\n    player {\n      ...PlayerFragment\n    }\n  }\n}\n    ${QuestWithCompletionFragmentFragmentDoc}\n${PlayerFragmentFragmentDoc}`;\n\nexport function useGetQuestWithCompletionsQuery(options: Omit<Urql.UseQueryArgs<GetQuestWithCompletionsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetQuestWithCompletionsQuery>({ query: GetQuestWithCompletionsDocument, ...options });\n};\nexport const GetQuestIdsDocument = gql`\n    query GetQuestIds($limit: Int) {\n  quest(limit: $limit, order_by: {created_at: desc}) {\n    id\n  }\n}\n    `;\n\nexport function useGetQuestIdsQuery(options: Omit<Urql.UseQueryArgs<GetQuestIdsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetQuestIdsQuery>({ query: GetQuestIdsDocument, ...options });\n};\nexport const GetQuestsDocument = gql`\n    query GetQuests($limit: Int, $status: QuestStatus_enum, $guild_id: uuid, $order: order_by, $created_by_player_id: uuid) {\n  quest(\n    limit: $limit\n    order_by: {created_at: $order}\n    where: {status: {_eq: $status}, guild_id: {_eq: $guild_id}, created_by_player_id: {_eq: $created_by_player_id}}\n  ) {\n    ...QuestFragment\n  }\n}\n    ${QuestFragmentFragmentDoc}`;\n\nexport function useGetQuestsQuery(options: Omit<Urql.UseQueryArgs<GetQuestsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetQuestsQuery>({ query: GetQuestsDocument, ...options });\n};\nexport const GetQuestGuildsDocument = gql`\n    query GetQuestGuilds {\n  quest_aggregate(distinct_on: guild_id) {\n    nodes {\n      guild_id\n      guild {\n        name\n      }\n    }\n  }\n}\n    `;\n\nexport function useGetQuestGuildsQuery(options: Omit<Urql.UseQueryArgs<GetQuestGuildsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetQuestGuildsQuery>({ query: GetQuestGuildsDocument, ...options });\n};\nexport const GetSkillsDocument = gql`\n    query GetSkills {\n  skill(order_by: {Player_Skills_aggregate: {count: desc}, category: asc}) {\n    ...PlayerSkillFragment\n  }\n}\n    ${PlayerSkillFragmentFragmentDoc}`;\n\nexport function useGetSkillsQuery(options: Omit<Urql.UseQueryArgs<GetSkillsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetSkillsQuery>({ query: GetSkillsDocument, ...options });\n};\nexport const CreateQuestDocument = gql`\n    mutation CreateQuest($input: CreateQuestInput!) {\n  createQuest(quest: $input) {\n    success\n    error\n    quest_id\n    quest {\n      id\n    }\n  }\n}\n    `;\n\nexport function useCreateQuestMutation() {\n  return Urql.useMutation<CreateQuestMutation, CreateQuestMutationVariables>(CreateQuestDocument);\n};\nexport const CreateQuestCompletionDocument = gql`\n    mutation CreateQuestCompletion($input: CreateQuestCompletionInput!) {\n  createQuestCompletion(questCompletion: $input) {\n    success\n    error\n    quest_completion_id\n    quest_completion {\n      id\n      quest {\n        id\n      }\n    }\n  }\n}\n    `;\n\nexport function useCreateQuestCompletionMutation() {\n  return Urql.useMutation<CreateQuestCompletionMutation, CreateQuestCompletionMutationVariables>(CreateQuestCompletionDocument);\n};\nexport const AuthenticateDiscordGuildDocument = gql`\n    mutation AuthenticateDiscordGuild($code: String!) {\n  authenticateDiscordGuild(code: $code) {\n    success\n    guildname\n    error\n    exists\n  }\n}\n    `;\n\nexport function useAuthenticateDiscordGuildMutation() {\n  return Urql.useMutation<AuthenticateDiscordGuildMutation, AuthenticateDiscordGuildMutationVariables>(AuthenticateDiscordGuildDocument);\n};\nexport const InsertCacheInvalidationDocument = gql`\n    mutation InsertCacheInvalidation($playerId: uuid!) {\n  updateIDXProfile(playerId: $playerId) {\n    success\n    error\n  }\n}\n    `;\n\nexport function useInsertCacheInvalidationMutation() {\n  return Urql.useMutation<InsertCacheInvalidationMutation, InsertCacheInvalidationMutationVariables>(InsertCacheInvalidationDocument);\n};\nexport const UpdatePlayerUsernameDocument = gql`\n    mutation UpdatePlayerUsername($playerId: uuid!, $username: String!) {\n  update_player_by_pk(pk_columns: {id: $playerId}, _set: {username: $username}) {\n    id\n    username\n  }\n}\n    `;\n\nexport function useUpdatePlayerUsernameMutation() {\n  return Urql.useMutation<UpdatePlayerUsernameMutation, UpdatePlayerUsernameMutationVariables>(UpdatePlayerUsernameDocument);\n};\nexport const UpdateProfileDocument = gql`\n    mutation UpdateProfile($playerId: uuid!, $input: player_set_input!) {\n  update_player_by_pk(pk_columns: {id: $playerId}, _set: $input) {\n    id\n    availability_hours\n    timezone\n  }\n}\n    `;\n\nexport function useUpdateProfileMutation() {\n  return Urql.useMutation<UpdateProfileMutation, UpdateProfileMutationVariables>(UpdateProfileDocument);\n};\nexport const UpdateAboutYouDocument = gql`\n    mutation UpdateAboutYou($playerId: uuid!, $input: player_set_input!) {\n  update_player_by_pk(pk_columns: {id: $playerId}, _set: $input) {\n    color_mask\n    playerType {\n      description\n      id\n      imageUrl\n      title\n    }\n    id\n  }\n}\n    `;\n\nexport function useUpdateAboutYouMutation() {\n  return Urql.useMutation<UpdateAboutYouMutation, UpdateAboutYouMutationVariables>(UpdateAboutYouDocument);\n};\nexport const UpdatePlayerSkillsDocument = gql`\n    mutation UpdatePlayerSkills($skills: [player_skill_insert_input!]!) {\n  delete_player_skill(where: {}) {\n    affected_rows\n  }\n  insert_player_skill(objects: $skills) {\n    affected_rows\n  }\n}\n    `;\n\nexport function useUpdatePlayerSkillsMutation() {\n  return Urql.useMutation<UpdatePlayerSkillsMutation, UpdatePlayerSkillsMutationVariables>(UpdatePlayerSkillsDocument);\n};\nexport const UpdateQuestDocument = gql`\n    mutation UpdateQuest($id: uuid!, $input: quest_set_input!, $skills: [quest_skill_insert_input!]!) {\n  update_quest_by_pk(pk_columns: {id: $id}, _set: $input) {\n    id\n  }\n  delete_quest_skill(where: {quest_id: {_eq: $id}}) {\n    affected_rows\n  }\n  insert_quest_skill(objects: $skills) {\n    affected_rows\n    returning {\n      quest_id\n      skill_id\n    }\n  }\n}\n    `;\n\nexport function useUpdateQuestMutation() {\n  return Urql.useMutation<UpdateQuestMutation, UpdateQuestMutationVariables>(UpdateQuestDocument);\n};\nexport const UpdateQuestCompletionDocument = gql`\n    mutation UpdateQuestCompletion($quest_completion_id: String!, $status: QuestCompletionStatus_ActionEnum!) {\n  updateQuestCompletion(\n    updateData: {quest_completion_id: $quest_completion_id, status: $status}\n  ) {\n    error\n    success\n    quest_completion_id\n    quest_completion {\n      id\n    }\n  }\n}\n    `;\n\nexport function useUpdateQuestCompletionMutation() {\n  return Urql.useMutation<UpdateQuestCompletionMutation, UpdateQuestCompletionMutationVariables>(UpdateQuestCompletionDocument);\n};"]},"metadata":{},"sourceType":"module"}