{"ast":null,"code":"import { useGetpSeedBalanceQuery } from '../../graphql/autogen/types';\nimport { useUser } from './index';\nexport const usePSeedBalance = () => {\n  var _respSeedBalance$data, _respSeedBalance$data2;\n\n  const {\n    user\n  } = useUser();\n  const [respSeedBalance] = useGetpSeedBalanceQuery({\n    variables: {\n      address: (user === null || user === void 0 ? void 0 : user.ethereum_address) || ''\n    },\n    pause: !(user !== null && user !== void 0 && user.ethereum_address)\n  });\n  const pSeedBalance = (user === null || user === void 0 ? void 0 : user.ethereum_address) && ((_respSeedBalance$data = respSeedBalance.data) === null || _respSeedBalance$data === void 0 ? void 0 : (_respSeedBalance$data2 = _respSeedBalance$data.getTokenBalances) === null || _respSeedBalance$data2 === void 0 ? void 0 : _respSeedBalance$data2.pSeedBalance) || null;\n  return {\n    pSeedBalance,\n    fetching: respSeedBalance.fetching\n  };\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/lib/hooks/balances.ts"],"names":["useGetpSeedBalanceQuery","useUser","usePSeedBalance","user","respSeedBalance","variables","address","ethereum_address","pause","pSeedBalance","data","getTokenBalances","fetching"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,6BAAxC;AACA,SAASC,OAAT,QAAwB,SAAxB;AAMA,OAAO,MAAMC,eAAuC,GAAG,MAAM;AAAA;;AAC3D,QAAM;AAAEC,IAAAA;AAAF,MAAWF,OAAO,EAAxB;AAEA,QAAM,CAACG,eAAD,IAAoBJ,uBAAuB,CAAC;AAChDK,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE,CAAAH,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEI,gBAAN,KAA0B;AAD1B,KADqC;AAIhDC,IAAAA,KAAK,EAAE,EAACL,IAAD,aAACA,IAAD,eAACA,IAAI,CAAEI,gBAAP;AAJyC,GAAD,CAAjD;AAMA,QAAME,YAAY,GACf,CAAAN,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEI,gBAAN,+BACCH,eAAe,CAACM,IADjB,oFACC,sBAAsBC,gBADvB,2DACC,uBAAwCF,YADzC,CAAD,IAEA,IAHF;AAKA,SAAO;AACLA,IAAAA,YADK;AAELG,IAAAA,QAAQ,EAAER,eAAe,CAACQ;AAFrB,GAAP;AAID,CAlBM","sourcesContent":["import { useGetpSeedBalanceQuery } from '../../graphql/autogen/types';\nimport { useUser } from './index';\n\ninterface PSeedBalanceHook {\n  pSeedBalance: string | null;\n  fetching: boolean;\n}\nexport const usePSeedBalance: () => PSeedBalanceHook = () => {\n  const { user } = useUser();\n\n  const [respSeedBalance] = useGetpSeedBalanceQuery({\n    variables: {\n      address: user?.ethereum_address || '',\n    },\n    pause: !user?.ethereum_address,\n  });\n  const pSeedBalance =\n    (user?.ethereum_address &&\n      respSeedBalance.data?.getTokenBalances?.pSeedBalance) ||\n    null;\n\n  return {\n    pSeedBalance,\n    fetching: respSeedBalance.fetching,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}