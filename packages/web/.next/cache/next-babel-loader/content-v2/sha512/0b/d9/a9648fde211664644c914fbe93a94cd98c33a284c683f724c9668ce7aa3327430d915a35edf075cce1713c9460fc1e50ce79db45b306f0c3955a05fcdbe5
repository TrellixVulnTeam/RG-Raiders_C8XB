{"ast":null,"code":"import gql from 'fake-tag';\nimport { GetPlayerFiltersDocument, GetPlayersDocument } from './autogen/types';\nimport { client as defaultClient } from './client';\nimport { PlayerFragment, PlayerSkillFragment } from './fragments'; // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\ngql`\n  query GetPlayers(\n    $offset: Int\n    $limit: Int\n    $skillIds: [uuid!]\n    $playerTypeIds: [Int!]\n    $availability: Int\n    $timezones: [String!]\n    $search: String\n  ) {\n    player(\n      order_by: { total_xp: desc }\n      offset: $offset\n      limit: $limit\n      where: {\n        availability_hours: { _gte: $availability }\n        timezone: { _in: $timezones }\n        playerType: { id: { _in: $playerTypeIds } }\n        Player_Skills: { Skill: { id: { _in: $skillIds } } }\n        _or: [\n          { username: { _ilike: $search } }\n          { ethereum_address: { _ilike: $search } }\n        ]\n      }\n    ) {\n      ...PlayerFragment\n    }\n    player_aggregate(\n      where: {\n        availability_hours: { _gte: $availability }\n        timezone: { _in: $timezones }\n        playerType: { id: { _in: $playerTypeIds } }\n        Player_Skills: { Skill: { id: { _in: $skillIds } } }\n        _or: [\n          { username: { _ilike: $search } }\n          { ethereum_address: { _ilike: $search } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n  ${PlayerFragment}\n`;\nexport const PLAYER_LIMIT = 9;\nexport const defaultQueryVariables = {\n  offset: 0,\n  limit: PLAYER_LIMIT,\n  availability: 0,\n  skillIds: null,\n  playerTypeIds: null,\n  timezones: null,\n  search: '%%'\n};\nexport const getPlayersWithCount = async (queryVariables = defaultQueryVariables, client = defaultClient) => {\n  var _data$player_aggregat;\n\n  const {\n    data,\n    error\n  } = await client.query(GetPlayersDocument, queryVariables).toPromise();\n  return {\n    players: (data === null || data === void 0 ? void 0 : data.player) || [],\n    count: (data === null || data === void 0 ? void 0 : (_data$player_aggregat = data.player_aggregate.aggregate) === null || _data$player_aggregat === void 0 ? void 0 : _data$player_aggregat.count) || 0,\n    error\n  };\n};\nconst playerUsernamesQuery = gql`\n  query GetPlayerUsernames($limit: Int) {\n    player(order_by: { total_xp: desc }, limit: $limit) {\n      username\n    }\n  }\n`;\nexport const getPlayerUsernames = async (limit = 150) => {\n  const {\n    data,\n    error\n  } = await defaultClient.query(playerUsernamesQuery, {\n    limit\n  }).toPromise();\n\n  if (!data) {\n    if (error) {\n      throw error;\n    }\n\n    return [];\n  }\n\n  return data.player.map(p => p.username);\n};\nexport const getTopPlayerUsernames = getPlayerUsernames; // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\ngql`\n  query GetPlayerFilters {\n    skill_aggregate(distinct_on: category) {\n      nodes {\n        name: category\n      }\n    }\n    skill(\n      order_by: { Player_Skills_aggregate: { count: desc }, category: asc }\n    ) {\n      ...PlayerSkillFragment\n    }\n    player_type(distinct_on: id) {\n      value: id\n      label: title\n    }\n  }\n  ${PlayerSkillFragment}\n`;\nexport const getPlayerFilters = async (client = defaultClient) => {\n  const {\n    data,\n    error\n  } = await client.query(GetPlayerFiltersDocument).toPromise();\n\n  if (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    throw error;\n  }\n\n  return data;\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/graphql/getPlayers.ts"],"names":["gql","GetPlayerFiltersDocument","GetPlayersDocument","client","defaultClient","PlayerFragment","PlayerSkillFragment","PLAYER_LIMIT","defaultQueryVariables","offset","limit","availability","skillIds","playerTypeIds","timezones","search","getPlayersWithCount","queryVariables","data","error","query","toPromise","players","player","count","player_aggregate","aggregate","playerUsernamesQuery","getPlayerUsernames","map","p","username","getTopPlayerUsernames","getPlayerFilters","console"],"mappings":"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","sourcesContent":["import gql from 'fake-tag';\nimport { Client } from 'urql';\n\nimport {\n  GetPlayerFiltersDocument,\n  GetPlayerFiltersQuery,\n  GetPlayerFiltersQueryVariables,\n  GetPlayersDocument,\n  GetPlayersQuery,\n  GetPlayersQueryVariables,\n  GetPlayerUsernamesQuery,\n  GetPlayerUsernamesQueryVariables,\n  PlayerFragmentFragment,\n} from './autogen/types';\nimport { client as defaultClient } from './client';\nimport { PlayerFragment, PlayerSkillFragment } from './fragments';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-expressions\ngql`\n  query GetPlayers(\n    $offset: Int\n    $limit: Int\n    $skillIds: [uuid!]\n    $playerTypeIds: [Int!]\n    $availability: Int\n    $timezones: [String!]\n    $search: String\n  ) {\n    player(\n      order_by: { total_xp: desc }\n      offset: $offset\n      limit: $limit\n      where: {\n        availability_hours: { _gte: $availability }\n        timezone: { _in: $timezones }\n        playerType: { id: { _in: $playerTypeIds } }\n        Player_Skills: { Skill: { id: { _in: $skillIds } } }\n        _or: [\n          { username: { _ilike: $search } }\n          { ethereum_address: { _ilike: $search } }\n        ]\n      }\n    ) {\n      ...PlayerFragment\n    }\n    player_aggregate(\n      where: {\n        availability_hours: { _gte: $availability }\n        timezone: { _in: $timezones }\n        playerType: { id: { _in: $playerTypeIds } }\n        Player_Skills: { Skill: { id: { _in: $skillIds } } }\n        _or: [\n          { username: { _ilike: $search } }\n          { ethereum_address: { _ilike: $search } }\n        ]\n      }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n  ${PlayerFragment}\n`;\n\nexport const PLAYER_LIMIT = 9;\n\nexport const defaultQueryVariables: GetPlayersQueryVariables = {\n  offset: 0,\n  limit: PLAYER_LIMIT,\n  availability: 0,\n  skillIds: null,\n  playerTypeIds: null,\n  timezones: null,\n  search: '%%',\n};\n\nexport type PlayersResponse = {\n  error: Error | undefined;\n  count: number;\n  players: PlayerFragmentFragment[];\n};\n\nexport const getPlayersWithCount = async (\n  queryVariables = defaultQueryVariables,\n  client: Client = defaultClient,\n): Promise<PlayersResponse> => {\n  const { data, error } = await client\n    .query<GetPlayersQuery, GetPlayersQueryVariables>(\n      GetPlayersDocument,\n      queryVariables,\n    )\n    .toPromise();\n\n  return {\n    players: data?.player || [],\n    count: data?.player_aggregate.aggregate?.count || 0,\n    error,\n  };\n};\n\nconst playerUsernamesQuery = gql`\n  query GetPlayerUsernames($limit: Int) {\n    player(order_by: { total_xp: desc }, limit: $limit) {\n      username\n    }\n  }\n`;\n\nexport const getPlayerUsernames = async (limit = 150): Promise<string[]> => {\n  const { data, error } = await defaultClient\n    .query<GetPlayerUsernamesQuery, GetPlayerUsernamesQueryVariables>(\n      playerUsernamesQuery,\n      {\n        limit,\n      },\n    )\n    .toPromise();\n\n  if (!data) {\n    if (error) {\n      throw error;\n    }\n\n    return [];\n  }\n\n  return data.player.map((p) => p.username);\n};\n\nexport const getTopPlayerUsernames = getPlayerUsernames;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-expressions\ngql`\n  query GetPlayerFilters {\n    skill_aggregate(distinct_on: category) {\n      nodes {\n        name: category\n      }\n    }\n    skill(\n      order_by: { Player_Skills_aggregate: { count: desc }, category: asc }\n    ) {\n      ...PlayerSkillFragment\n    }\n    player_type(distinct_on: id) {\n      value: id\n      label: title\n    }\n  }\n  ${PlayerSkillFragment}\n`;\n\nexport const getPlayerFilters = async (client: Client = defaultClient) => {\n  const { data, error } = await client\n    .query<GetPlayerFiltersQuery, GetPlayerFiltersQueryVariables>(\n      GetPlayerFiltersDocument,\n    )\n    .toPromise();\n\n  if (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    throw error;\n  }\n\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}