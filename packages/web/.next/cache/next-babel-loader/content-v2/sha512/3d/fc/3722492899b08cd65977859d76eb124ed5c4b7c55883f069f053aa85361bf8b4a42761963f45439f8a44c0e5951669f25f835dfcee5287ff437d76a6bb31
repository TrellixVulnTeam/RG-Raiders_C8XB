{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { CONFIG } from 'config';\nimport { useEffect, useMemo } from 'react';\nvar BRIGHTID_CONTEXT = 'MetaGame';\nvar DEEPLINK_ENDPOINT = \"brightid://link-verification/\".concat(CONFIG.brightIdNodeURL, \"/\").concat(BRIGHTID_CONTEXT);\nvar UNIVERSAL_LINK_ENDPOINT = \"\".concat(CONFIG.brightIdAppURL, \"/link-verification/\").concat(CONFIG.brightIdNodeURL, \"/\").concat(CONFIG.brightIdNodeURL, \"/\").concat(BRIGHTID_CONTEXT);\nvar VERIFICATION_ENDPOINT = \"\".concat(CONFIG.brightIdAppURL, \"/node/v5/verifications/\").concat(BRIGHTID_CONTEXT);\nvar POLL_INTERVAL = 5000;\n\nvar isStatusVerified = function isStatusVerified(status, contextId) {\n  return (status === null || status === void 0 ? void 0 : status.unique) === true || (status === null || status === void 0 ? void 0 : status.contextIds.includes(contextId)) === true;\n};\n\nexport var useBrightIdStatus = function useBrightIdStatus(_ref) {\n  _s();\n\n  var player = _ref.player;\n  return useMemo(function () {\n    var contextId = player.id;\n    var verified = isStatusVerified(player.brightid_status, contextId);\n    var deeplink = \"\".concat(DEEPLINK_ENDPOINT, \"/\").concat(contextId);\n    var universalLink = \"\".concat(UNIVERSAL_LINK_ENDPOINT, \"/\").concat(contextId);\n    return {\n      verified: verified,\n      deeplink: deeplink,\n      universalLink: universalLink\n    };\n  }, [player]);\n};\n\n_s(useBrightIdStatus, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\nvar fetchVerificationData = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(contextId) {\n    var response, responseData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(\"\".concat(VERIFICATION_ENDPOINT, \"/\").concat(contextId));\n\n          case 3:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 6:\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            responseData = _context.sent;\n            return _context.abrupt(\"return\", responseData.data);\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", null);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 12]]);\n  }));\n\n  return function fetchVerificationData(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport var useBrightIdUpdated = function useBrightIdUpdated(_ref3) {\n  _s2();\n\n  var player = _ref3.player,\n      poll = _ref3.poll;\n  var contextId = player.id;\n  useEffect(function () {\n    if (!contextId || !poll) return function () {\n      return undefined;\n    };\n    var isSubscribed = true;\n\n    var update = function update() {\n      fetchVerificationData(contextId).then(function (status) {\n        var isVerified = isStatusVerified(status, contextId);\n\n        if (isSubscribed && isVerified) {\n          window.location.reload();\n        }\n      });\n    };\n\n    var interval = setInterval(update, POLL_INTERVAL);\n    return function () {\n      isSubscribed = false;\n      clearInterval(interval);\n    };\n  }, [contextId, poll]);\n};\n\n_s2(useBrightIdUpdated, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/lib/hooks/brightId.ts"],"names":["CONFIG","useEffect","useMemo","BRIGHTID_CONTEXT","DEEPLINK_ENDPOINT","brightIdNodeURL","UNIVERSAL_LINK_ENDPOINT","brightIdAppURL","VERIFICATION_ENDPOINT","POLL_INTERVAL","isStatusVerified","status","contextId","unique","contextIds","includes","useBrightIdStatus","player","id","verified","brightid_status","deeplink","universalLink","fetchVerificationData","fetch","response","ok","json","responseData","data","useBrightIdUpdated","poll","undefined","isSubscribed","update","then","isVerified","window","location","reload","interval","setInterval","clearInterval"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AAEA,IAAMC,gBAAgB,GAAG,UAAzB;AACA,IAAMC,iBAAiB,0CAAmCJ,MAAM,CAACK,eAA1C,cAA6DF,gBAA7D,CAAvB;AACA,IAAMG,uBAAuB,aAAMN,MAAM,CAACO,cAAb,gCAAiDP,MAAM,CAACK,eAAxD,cAA2EL,MAAM,CAACK,eAAlF,cAAqGF,gBAArG,CAA7B;AACA,IAAMK,qBAAqB,aAAMR,MAAM,CAACO,cAAb,oCAAqDJ,gBAArD,CAA3B;AACA,IAAMM,aAAa,GAAG,IAAtB;;AAYA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CACvBC,MADuB,EAEvBC,SAFuB;AAAA,SAIvB,CAAAD,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEE,MAAR,MAAmB,IAAnB,IAA2B,CAAAF,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,UAAR,CAAmBC,QAAnB,CAA4BH,SAA5B,OAA2C,IAJ/C;AAAA,CAAzB;;AAMA,OAAO,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA;;AAAA,MAC/BC,MAD+B,QAC/BA,MAD+B;AAAA,SAS/Bf,OAAO,CAAC,YAAM;AACZ,QAAMU,SAAS,GAAGK,MAAM,CAACC,EAAzB;AACA,QAAMC,QAAQ,GAAGT,gBAAgB,CAACO,MAAM,CAACG,eAAR,EAAyBR,SAAzB,CAAjC;AACA,QAAMS,QAAQ,aAAMjB,iBAAN,cAA2BQ,SAA3B,CAAd;AACA,QAAMU,aAAa,aAAMhB,uBAAN,cAAiCM,SAAjC,CAAnB;AAEA,WAAO;AAAEO,MAAAA,QAAQ,EAARA,QAAF;AAAYE,MAAAA,QAAQ,EAARA,QAAZ;AAAsBC,MAAAA,aAAa,EAAbA;AAAtB,KAAP;AACD,GAPM,EAOJ,CAACL,MAAD,CAPI,CATwB;AAAA,CAA1B;;GAAMD,iB;;AAkBb,IAAMO,qBAAqB;AAAA,uEAAG,iBAC5BX,SAD4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIHY,KAAK,WAAIhB,qBAAJ,cAA6BI,SAA7B,EAJF;;AAAA;AAIpBa,YAAAA,QAJoB;;AAAA,gBAKrBA,QAAQ,CAACC,EALY;AAAA;AAAA;AAAA;;AAAA,6CAKD,IALC;;AAAA;AAAA;AAAA,mBAMCD,QAAQ,CAACE,IAAT,EAND;;AAAA;AAMpBC,YAAAA,YANoB;AAAA,6CAOnBA,YAAY,CAACC,IAPM;;AAAA;AAAA;AAAA;AAAA,6CASnB,IATmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBN,qBAAqB;AAAA;AAAA;AAAA,GAA3B;;AAaA,OAAO,IAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,QAMtB;AAAA;;AAAA,MALVb,MAKU,SALVA,MAKU;AAAA,MAJVc,IAIU,SAJVA,IAIU;AACV,MAAMnB,SAAS,GAAGK,MAAM,CAACC,EAAzB;AAEAjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACW,SAAD,IAAc,CAACmB,IAAnB,EAAyB,OAAO;AAAA,aAAMC,SAAN;AAAA,KAAP;AAEzB,QAAIC,YAAY,GAAG,IAAnB;;AAEA,QAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBX,MAAAA,qBAAqB,CAACX,SAAD,CAArB,CAAiCuB,IAAjC,CAAsC,UAACxB,MAAD,EAAY;AAChD,YAAMyB,UAAU,GAAG1B,gBAAgB,CAACC,MAAD,EAASC,SAAT,CAAnC;;AACA,YAAIqB,YAAY,IAAIG,UAApB,EAAgC;AAC9BC,UAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;AACF,OALD;AAMD,KAPD;;AASA,QAAMC,QAAQ,GAAGC,WAAW,CAACP,MAAD,EAASzB,aAAT,CAA5B;AAEA,WAAO,YAAM;AACXwB,MAAAA,YAAY,GAAG,KAAf;AACAS,MAAAA,aAAa,CAACF,QAAD,CAAb;AACD,KAHD;AAID,GApBQ,EAoBN,CAAC5B,SAAD,EAAYmB,IAAZ,CApBM,CAAT;AAqBD,CA9BM;;IAAMD,kB","sourcesContent":["import { CONFIG } from 'config';\nimport { PlayerFragmentFragment } from 'graphql/autogen/types';\nimport { useEffect, useMemo } from 'react';\n\nconst BRIGHTID_CONTEXT = 'MetaGame';\nconst DEEPLINK_ENDPOINT = `brightid://link-verification/${CONFIG.brightIdNodeURL}/${BRIGHTID_CONTEXT}`;\nconst UNIVERSAL_LINK_ENDPOINT = `${CONFIG.brightIdAppURL}/link-verification/${CONFIG.brightIdNodeURL}/${CONFIG.brightIdNodeURL}/${BRIGHTID_CONTEXT}`;\nconst VERIFICATION_ENDPOINT = `${CONFIG.brightIdAppURL}/node/v5/verifications/${BRIGHTID_CONTEXT}`;\nconst POLL_INTERVAL = 5000;\n\ntype BrightIdVerificationStatus =\n  | {\n      unique: boolean;\n      app?: string;\n      context?: string;\n      contextIds: Array<string>;\n    }\n  | null\n  | undefined;\n\nconst isStatusVerified = (\n  status: BrightIdVerificationStatus,\n  contextId: string,\n): boolean =>\n  status?.unique === true || status?.contextIds.includes(contextId) === true;\n\nexport const useBrightIdStatus = ({\n  player,\n}: {\n  player: PlayerFragmentFragment;\n}): {\n  verified: boolean;\n  deeplink: string;\n  universalLink: string;\n} =>\n  useMemo(() => {\n    const contextId = player.id;\n    const verified = isStatusVerified(player.brightid_status, contextId);\n    const deeplink = `${DEEPLINK_ENDPOINT}/${contextId}`;\n    const universalLink = `${UNIVERSAL_LINK_ENDPOINT}/${contextId}`;\n\n    return { verified, deeplink, universalLink };\n  }, [player]);\n\nconst fetchVerificationData = async (\n  contextId: string,\n): Promise<BrightIdVerificationStatus> => {\n  try {\n    const response = await fetch(`${VERIFICATION_ENDPOINT}/${contextId}`);\n    if (!response.ok) return null;\n    const responseData = await response.json();\n    return responseData.data;\n  } catch (err) {\n    return null;\n  }\n};\n\nexport const useBrightIdUpdated = ({\n  player,\n  poll,\n}: {\n  player: PlayerFragmentFragment;\n  poll: boolean;\n}): void => {\n  const contextId = player.id;\n\n  useEffect(() => {\n    if (!contextId || !poll) return () => undefined;\n\n    let isSubscribed = true;\n\n    const update = () => {\n      fetchVerificationData(contextId).then((status) => {\n        const isVerified = isStatusVerified(status, contextId);\n        if (isSubscribed && isVerified) {\n          window.location.reload();\n        }\n      });\n    };\n\n    const interval = setInterval(update, POLL_INTERVAL);\n\n    return () => {\n      isSubscribed = false;\n      clearInterval(interval);\n    };\n  }, [contextId, poll]);\n};\n"]},"metadata":{},"sourceType":"module"}