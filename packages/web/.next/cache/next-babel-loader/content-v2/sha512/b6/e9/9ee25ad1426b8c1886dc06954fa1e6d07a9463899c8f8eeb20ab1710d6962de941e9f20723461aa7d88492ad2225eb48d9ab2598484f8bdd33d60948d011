{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport copyToClipboard from 'copy-to-clipboard';\nimport { useCallback, useEffect, useState } from 'react';\nvar DEFAULT_DELAY = 3000;\nexport var useCopyToClipboard = function useCopyToClipboard() {\n  _s();\n\n  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_DELAY;\n\n  var _useState = useState(false),\n      copied = _useState[0],\n      setCopied = _useState[1];\n\n  useEffect(function () {\n    if (!copied) return function () {\n      return undefined;\n    };\n    var id = setTimeout(function () {\n      setCopied(false);\n    }, delay);\n    return function () {\n      clearTimeout(id);\n    };\n  }, [delay, copied]);\n  var handleCopy = useCallback(function (text) {\n    setCopied(true);\n    copyToClipboard(text);\n  }, []);\n  return [copied, handleCopy];\n};\n\n_s(useCopyToClipboard, \"/GEU+pFSoje/5dfoyoq2KO/6nqQ=\");","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/lib/hooks/useCopyToClipboard.ts"],"names":["copyToClipboard","useCallback","useEffect","useState","DEFAULT_DELAY","useCopyToClipboard","delay","copied","setCopied","undefined","id","setTimeout","clearTimeout","handleCopy","text"],"mappings":";;AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,IAAMC,aAAa,GAAG,IAAtB;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAEM;AAAA;;AAAA,MADtCC,KACsC,uEAD9BF,aAC8B;;AAAA,kBACVD,QAAQ,CAAC,KAAD,CADE;AAAA,MAC/BI,MAD+B;AAAA,MACvBC,SADuB;;AAGtCN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACK,MAAL,EAAa,OAAO;AAAA,aAAME,SAAN;AAAA,KAAP;AAEb,QAAMC,EAAE,GAAGC,UAAU,CAAC,YAAM;AAC1BH,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD,KAFoB,EAElBF,KAFkB,CAArB;AAIA,WAAO,YAAM;AACXM,MAAAA,YAAY,CAACF,EAAD,CAAZ;AACD,KAFD;AAGD,GAVQ,EAUN,CAACJ,KAAD,EAAQC,MAAR,CAVM,CAAT;AAYA,MAAMM,UAAU,GAAGZ,WAAW,CAAC,UAACa,IAAD,EAAkB;AAC/CN,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAR,IAAAA,eAAe,CAACc,IAAD,CAAf;AACD,GAH6B,EAG3B,EAH2B,CAA9B;AAKA,SAAO,CAACP,MAAD,EAASM,UAAT,CAAP;AACD,CAvBM;;GAAMR,kB","sourcesContent":["import copyToClipboard from 'copy-to-clipboard';\nimport { useCallback, useEffect, useState } from 'react';\n\nconst DEFAULT_DELAY = 3000;\n\nexport const useCopyToClipboard = (\n  delay = DEFAULT_DELAY,\n): [boolean, (text: string) => void] => {\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (!copied) return () => undefined;\n\n    const id = setTimeout(() => {\n      setCopied(false);\n    }, delay);\n\n    return () => {\n      clearTimeout(id);\n    };\n  }, [delay, copied]);\n\n  const handleCopy = useCallback((text: string) => {\n    setCopied(true);\n    copyToClipboard(text);\n  }, []);\n\n  return [copied, handleCopy];\n};\n"]},"metadata":{},"sourceType":"module"}