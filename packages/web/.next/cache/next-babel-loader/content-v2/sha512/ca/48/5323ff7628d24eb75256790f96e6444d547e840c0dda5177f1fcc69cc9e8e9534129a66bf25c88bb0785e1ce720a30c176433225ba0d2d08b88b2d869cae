{"ast":null,"code":"import _toConsumableArray from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useGetPlayerFiltersQuery, useGetPlayersQuery } from 'graphql/autogen/types';\nimport { defaultQueryVariables, PLAYER_LIMIT } from 'graphql/getPlayers';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { parseSkills } from 'utils/skillHelpers'; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nvar usePlayerAggregates = function usePlayerAggregates() {\n  _s();\n\n  var _useGetPlayerFiltersQ = useGetPlayerFiltersQuery(),\n      _useGetPlayerFiltersQ2 = _slicedToArray(_useGetPlayerFiltersQ, 1),\n      data = _useGetPlayerFiltersQ2[0].data;\n\n  var skillChoices = useMemo(function () {\n    return parseSkills((data === null || data === void 0 ? void 0 : data.skill) || []);\n  }, [data]);\n  return {\n    skillCategories: (data === null || data === void 0 ? void 0 : data.skill_aggregate.nodes) || [],\n    playerTypes: ((data === null || data === void 0 ? void 0 : data.player_type) || []).map(function (_ref) {\n      var value = _ref.value,\n          label = _ref.label;\n      return {\n        value: value.toString(),\n        label: label\n      };\n    }),\n    skillChoices: skillChoices\n  };\n};\n\n_s(usePlayerAggregates, \"AXixxduyFJojPYE4bBhoNKnYfYQ=\", false, function () {\n  return [useGetPlayerFiltersQuery];\n});\n\nvar useFilteredPlayers = function useFilteredPlayers(queryVariables) {\n  _s2();\n\n  var _data$player_aggregat;\n\n  var _useState = useState(defaultQueryVariables),\n      variables = _useState[0],\n      setVariables = _useState[1];\n\n  useEffect(function () {\n    setVariables(queryVariables);\n  }, [queryVariables]);\n\n  var _useGetPlayersQuery = useGetPlayersQuery({\n    variables: variables\n  }),\n      _useGetPlayersQuery2 = _slicedToArray(_useGetPlayersQuery, 1),\n      _useGetPlayersQuery2$ = _useGetPlayersQuery2[0],\n      fetching = _useGetPlayersQuery2$.fetching,\n      data = _useGetPlayersQuery2$.data,\n      error = _useGetPlayersQuery2$.error;\n\n  var players = (data === null || data === void 0 ? void 0 : data.player) || [];\n  var totalCount = (data === null || data === void 0 ? void 0 : (_data$player_aggregat = data.player_aggregate.aggregate) === null || _data$player_aggregat === void 0 ? void 0 : _data$player_aggregat.count) || 0;\n  return {\n    fetching: fetching,\n    players: players,\n    totalCount: totalCount,\n    error: error\n  };\n};\n\n_s2(useFilteredPlayers, \"tjZcu1EOv56UF6Xbfzcs2pdjnV8=\", false, function () {\n  return [useGetPlayersQuery];\n});\n\nexport var usePlayerFilter = function usePlayerFilter() {\n  _s3();\n\n  var defaultVariables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultQueryVariables;\n\n  var _useState2 = useState(defaultVariables),\n      queryVariables = _useState2[0],\n      setQueryVariables = _useState2[1];\n\n  var aggregates = usePlayerAggregates();\n  var shouldAppend = useRef(false);\n  var setQueryVariable = useCallback( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function (key, value) {\n    if (key === 'limit') {\n      throw new Error('Cannot update limit');\n    }\n\n    setQueryVariables(function (oldQueryVariables) {\n      return _objectSpread(_objectSpread({}, oldQueryVariables), {}, _defineProperty({\n        limit: PLAYER_LIMIT,\n        offset: 0\n      }, key, value !== '' ? value : null));\n    });\n    shouldAppend.current = key === 'offset';\n  }, []);\n\n  var resetFilter = function resetFilter() {\n    return setQueryVariables(defaultQueryVariables);\n  };\n\n  var _usePaginatedPlayers = usePaginatedPlayers(queryVariables, setQueryVariable),\n      fetchedPlayers = _usePaginatedPlayers.fetchedPlayers,\n      fetching = _usePaginatedPlayers.fetching,\n      error = _usePaginatedPlayers.error,\n      nextPage = _usePaginatedPlayers.nextPage,\n      totalCount = _usePaginatedPlayers.totalCount,\n      moreAvailable = _usePaginatedPlayers.moreAvailable;\n\n  var _useState3 = useState(fetchedPlayers),\n      players = _useState3[0],\n      setPlayers = _useState3[1];\n\n  useEffect(function () {\n    if (error || fetching) {\n      if (error || !shouldAppend.current) {\n        setPlayers([]);\n      }\n    } else if (shouldAppend.current) {\n      setPlayers(function (p) {\n        return [].concat(_toConsumableArray(p), _toConsumableArray(fetchedPlayers));\n      });\n      shouldAppend.current = false;\n    } else {\n      setPlayers(fetchedPlayers);\n    }\n  }, [fetchedPlayers, fetching, error]);\n  return {\n    players: players,\n    fetching: fetching,\n    fetchingMore: shouldAppend.current,\n    error: error,\n    aggregates: aggregates,\n    queryVariables: queryVariables,\n    setQueryVariable: setQueryVariable,\n    resetFilter: resetFilter,\n    totalCount: totalCount,\n    nextPage: nextPage,\n    moreAvailable: moreAvailable\n  };\n};\n\n_s3(usePlayerFilter, \"s2+H5PDy47e/IZWmRBW5X+R4stI=\", false, function () {\n  return [usePlayerAggregates, usePaginatedPlayers];\n});\n\nexport var useFiltersUsed = function useFiltersUsed(queryVariables) {\n  _s4();\n\n  var playerTypesFilterUsed = useMemo(function () {\n    var _queryVariables$playe;\n\n    return ((_queryVariables$playe = queryVariables.playerTypeIds) === null || _queryVariables$playe === void 0 ? void 0 : _queryVariables$playe.length) > 0;\n  }, [queryVariables.playerTypeIds]);\n  var searchFilterUsed = useMemo(function () {\n    return queryVariables.search !== '%%';\n  }, [queryVariables.search]);\n  var availabilityFilterUsed = useMemo(function () {\n    return queryVariables.availability > 0;\n  }, [queryVariables.availability]);\n  var skillIdsFilterUsed = useMemo(function () {\n    var _queryVariables$skill;\n\n    return ((_queryVariables$skill = queryVariables.skillIds) === null || _queryVariables$skill === void 0 ? void 0 : _queryVariables$skill.length) > 0;\n  }, [queryVariables.skillIds]);\n  var timezonesFilterUsed = useMemo(function () {\n    var _queryVariables$timez;\n\n    return ((_queryVariables$timez = queryVariables.timezones) === null || _queryVariables$timez === void 0 ? void 0 : _queryVariables$timez.length) > 0;\n  }, [queryVariables.timezones]);\n  var filtersUsed = useMemo(function () {\n    return playerTypesFilterUsed || searchFilterUsed || availabilityFilterUsed || skillIdsFilterUsed || timezonesFilterUsed;\n  }, [playerTypesFilterUsed, searchFilterUsed, availabilityFilterUsed, skillIdsFilterUsed, timezonesFilterUsed]);\n  return filtersUsed;\n};\n\n_s4(useFiltersUsed, \"hXPIHx6zWqVDXQ+Lp7swrIM77DY=\");\n\nvar usePaginatedPlayers = function usePaginatedPlayers(queryVariables, setQueryVariable) {\n  _s5();\n\n  var _useFilteredPlayers = useFilteredPlayers(queryVariables),\n      fetching = _useFilteredPlayers.fetching,\n      fetchedPlayers = _useFilteredPlayers.players,\n      totalCount = _useFilteredPlayers.totalCount,\n      error = _useFilteredPlayers.error;\n\n  var itemsPerPage = PLAYER_LIMIT;\n  var maxPage = Math.ceil(totalCount / itemsPerPage);\n  var currentOffset = useMemo(function () {\n    return queryVariables.offset || 0;\n  }, [queryVariables.offset]);\n  var currentPage = useMemo(function () {\n    return Math.ceil(currentOffset / itemsPerPage) + 1;\n  }, [currentOffset, itemsPerPage]);\n  var nextPage = useCallback(function () {\n    if (currentPage < maxPage && !fetching) {\n      setQueryVariable('offset', currentOffset + itemsPerPage);\n    }\n  }, [fetching, setQueryVariable, currentOffset, itemsPerPage, currentPage, maxPage]);\n  return {\n    nextPage: nextPage,\n    fetchedPlayers: fetchedPlayers,\n    totalCount: totalCount,\n    fetching: fetching,\n    error: error,\n    moreAvailable: currentPage < maxPage\n  };\n};\n\n_s5(usePaginatedPlayers, \"7ckFS6xPLvseT5DHoLtM31AoD10=\", false, function () {\n  return [useFilteredPlayers];\n});","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/lib/hooks/players.ts"],"names":["useGetPlayerFiltersQuery","useGetPlayersQuery","defaultQueryVariables","PLAYER_LIMIT","useCallback","useEffect","useMemo","useRef","useState","parseSkills","usePlayerAggregates","data","skillChoices","skill","skillCategories","skill_aggregate","nodes","playerTypes","player_type","map","value","label","toString","useFilteredPlayers","queryVariables","variables","setVariables","fetching","error","players","player","totalCount","player_aggregate","aggregate","count","usePlayerFilter","defaultVariables","setQueryVariables","aggregates","shouldAppend","setQueryVariable","key","Error","oldQueryVariables","limit","offset","current","resetFilter","usePaginatedPlayers","fetchedPlayers","nextPage","moreAvailable","setPlayers","p","fetchingMore","useFiltersUsed","playerTypesFilterUsed","playerTypeIds","length","searchFilterUsed","search","availabilityFilterUsed","availability","skillIdsFilterUsed","skillIds","timezonesFilterUsed","timezones","filtersUsed","itemsPerPage","maxPage","Math","ceil","currentOffset","currentPage"],"mappings":"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","sourcesContent":["import {\n  GetPlayersQueryVariables,\n  PlayerFragmentFragment,\n  useGetPlayerFiltersQuery,\n  useGetPlayersQuery,\n} from 'graphql/autogen/types';\nimport { defaultQueryVariables, PLAYER_LIMIT } from 'graphql/getPlayers';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { CategoryOption, parseSkills } from 'utils/skillHelpers';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type QueryVariableSetter = (key: string, value: any) => void;\n\nexport interface PlayerAggregates {\n  skillCategories: { name: string }[];\n  playerTypes: { value: string; label: string }[];\n  skillChoices: CategoryOption[];\n}\n\ninterface PlayerFilter {\n  players: PlayerFragmentFragment[];\n  totalCount: number;\n  fetching: boolean;\n  fetchingMore: boolean;\n  aggregates: PlayerAggregates;\n  queryVariables: GetPlayersQueryVariables;\n  setQueryVariable: QueryVariableSetter;\n  error?: Error;\n  resetFilter: () => void;\n  nextPage: () => void;\n  moreAvailable: boolean;\n}\n\nconst usePlayerAggregates = () => {\n  const [{ data }] = useGetPlayerFiltersQuery();\n  const skillChoices = useMemo(() => parseSkills(data?.skill || []), [data]);\n  return {\n    skillCategories: data?.skill_aggregate.nodes || [],\n    playerTypes: (data?.player_type || []).map(({ value, label }) => ({\n      value: value.toString(),\n      label,\n    })),\n    skillChoices,\n  };\n};\n\nconst useFilteredPlayers = (queryVariables: GetPlayersQueryVariables) => {\n  const [variables, setVariables] = useState<GetPlayersQueryVariables>(\n    defaultQueryVariables,\n  );\n\n  useEffect(() => {\n    setVariables(queryVariables);\n  }, [queryVariables]);\n\n  const [{ fetching, data, error }] = useGetPlayersQuery({\n    variables,\n  });\n\n  const players = data?.player || [];\n  const totalCount = data?.player_aggregate.aggregate?.count || 0;\n\n  return { fetching, players, totalCount, error };\n};\n\nexport const usePlayerFilter = (\n  defaultVariables: GetPlayersQueryVariables = defaultQueryVariables,\n): PlayerFilter => {\n  const [\n    queryVariables,\n    setQueryVariables,\n  ] = useState<GetPlayersQueryVariables>(defaultVariables);\n\n  const aggregates = usePlayerAggregates();\n\n  const shouldAppend = useRef(false);\n  const setQueryVariable: QueryVariableSetter = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (key: string, value: any) => {\n      if (key === 'limit') {\n        throw new Error('Cannot update limit');\n      }\n      setQueryVariables((oldQueryVariables) => ({\n        ...oldQueryVariables,\n        limit: PLAYER_LIMIT,\n        offset: 0,\n        [key]: value !== '' ? value : null,\n      }));\n      shouldAppend.current = key === 'offset';\n    },\n    [],\n  );\n\n  const resetFilter = () => setQueryVariables(defaultQueryVariables);\n\n  const {\n    fetchedPlayers,\n    fetching,\n    error,\n    nextPage,\n    totalCount,\n    moreAvailable,\n  } = usePaginatedPlayers(queryVariables, setQueryVariable);\n\n  const [players, setPlayers] = useState<PlayerFragmentFragment[]>(\n    fetchedPlayers,\n  );\n\n  useEffect(() => {\n    if (error || fetching) {\n      if (error || !shouldAppend.current) {\n        setPlayers([]);\n      }\n    } else if (shouldAppend.current) {\n      setPlayers((p) => [...p, ...fetchedPlayers]);\n      shouldAppend.current = false;\n    } else {\n      setPlayers(fetchedPlayers);\n    }\n  }, [fetchedPlayers, fetching, error]);\n\n  return {\n    players,\n    fetching,\n    fetchingMore: shouldAppend.current,\n    error,\n    aggregates,\n    queryVariables,\n    setQueryVariable,\n    resetFilter,\n    totalCount,\n    nextPage,\n    moreAvailable,\n  };\n};\n\nexport const useFiltersUsed = (\n  queryVariables: GetPlayersQueryVariables,\n): boolean => {\n  const playerTypesFilterUsed = useMemo(\n    () => (queryVariables.playerTypeIds as number[])?.length > 0,\n    [queryVariables.playerTypeIds],\n  );\n  const searchFilterUsed = useMemo(() => queryVariables.search !== '%%', [\n    queryVariables.search,\n  ]);\n  const availabilityFilterUsed = useMemo(\n    () => (queryVariables.availability as number) > 0,\n    [queryVariables.availability],\n  );\n  const skillIdsFilterUsed = useMemo(\n    () => (queryVariables.skillIds as string[])?.length > 0,\n    [queryVariables.skillIds],\n  );\n  const timezonesFilterUsed = useMemo(\n    () => (queryVariables.timezones as string[])?.length > 0,\n    [queryVariables.timezones],\n  );\n\n  const filtersUsed = useMemo(\n    () =>\n      playerTypesFilterUsed ||\n      searchFilterUsed ||\n      availabilityFilterUsed ||\n      skillIdsFilterUsed ||\n      timezonesFilterUsed,\n    [\n      playerTypesFilterUsed,\n      searchFilterUsed,\n      availabilityFilterUsed,\n      skillIdsFilterUsed,\n      timezonesFilterUsed,\n    ],\n  );\n\n  return filtersUsed;\n};\n\nconst usePaginatedPlayers = (\n  queryVariables: GetPlayersQueryVariables,\n  setQueryVariable: QueryVariableSetter,\n) => {\n  const {\n    fetching,\n    players: fetchedPlayers,\n    totalCount,\n    error,\n  } = useFilteredPlayers(queryVariables);\n\n  const itemsPerPage = PLAYER_LIMIT;\n  const maxPage = Math.ceil(totalCount / itemsPerPage);\n  const currentOffset = useMemo(() => (queryVariables.offset as number) || 0, [\n    queryVariables.offset,\n  ]);\n  const currentPage = useMemo(\n    () => Math.ceil(currentOffset / itemsPerPage) + 1,\n    [currentOffset, itemsPerPage],\n  );\n\n  const nextPage = useCallback(() => {\n    if (currentPage < maxPage && !fetching) {\n      setQueryVariable('offset', currentOffset + itemsPerPage);\n    }\n  }, [\n    fetching,\n    setQueryVariable,\n    currentOffset,\n    itemsPerPage,\n    currentPage,\n    maxPage,\n  ]);\n\n  return {\n    nextPage,\n    fetchedPlayers,\n    totalCount,\n    fetching,\n    error,\n    moreAvailable: currentPage < maxPage,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}