{"ast":null,"code":"import { CONFIG } from 'config';\nimport { useEffect, useMemo } from 'react';\nconst BRIGHTID_CONTEXT = 'MetaGame';\nconst DEEPLINK_ENDPOINT = `brightid://link-verification/${CONFIG.brightIdNodeURL}/${BRIGHTID_CONTEXT}`;\nconst UNIVERSAL_LINK_ENDPOINT = `${CONFIG.brightIdAppURL}/link-verification/${CONFIG.brightIdNodeURL}/${CONFIG.brightIdNodeURL}/${BRIGHTID_CONTEXT}`;\nconst VERIFICATION_ENDPOINT = `${CONFIG.brightIdAppURL}/node/v5/verifications/${BRIGHTID_CONTEXT}`;\nconst POLL_INTERVAL = 5000;\n\nconst isStatusVerified = (status, contextId) => (status === null || status === void 0 ? void 0 : status.unique) === true || (status === null || status === void 0 ? void 0 : status.contextIds.includes(contextId)) === true;\n\nexport const useBrightIdStatus = ({\n  player\n}) => useMemo(() => {\n  const contextId = player.id;\n  const verified = isStatusVerified(player.brightid_status, contextId);\n  const deeplink = `${DEEPLINK_ENDPOINT}/${contextId}`;\n  const universalLink = `${UNIVERSAL_LINK_ENDPOINT}/${contextId}`;\n  return {\n    verified,\n    deeplink,\n    universalLink\n  };\n}, [player]);\n\nconst fetchVerificationData = async (contextId) => {\n  try {\n    const response = await fetch(`${VERIFICATION_ENDPOINT}/${contextId}`);\n    if (!response.ok) return null;\n    const responseData = await response.json();\n    return responseData.data;\n  } catch (err) {\n    return null;\n  }\n};\n\nexport const useBrightIdUpdated = ({\n  player,\n  poll\n}) => {\n  const contextId = player.id;\n  useEffect(() => {\n    if (!contextId || !poll) return () => undefined;\n    let isSubscribed = true;\n\n    const update = () => {\n      fetchVerificationData(contextId).then(status => {\n        const isVerified = isStatusVerified(status, contextId);\n\n        if (isSubscribed && isVerified) {\n          window.location.reload();\n        }\n      });\n    };\n\n    const interval = setInterval(update, POLL_INTERVAL);\n    return () => {\n      isSubscribed = false;\n      clearInterval(interval);\n    };\n  }, [contextId, poll]);\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/lib/hooks/brightId.ts"],"names":["CONFIG","useEffect","useMemo","BRIGHTID_CONTEXT","DEEPLINK_ENDPOINT","brightIdNodeURL","UNIVERSAL_LINK_ENDPOINT","brightIdAppURL","VERIFICATION_ENDPOINT","POLL_INTERVAL","isStatusVerified","status","contextId","unique","contextIds","includes","useBrightIdStatus","player","id","verified","brightid_status","deeplink","universalLink","fetchVerificationData","response","fetch","ok","responseData","json","data","err","useBrightIdUpdated","poll","undefined","isSubscribed","update","then","isVerified","window","location","reload","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { CONFIG } from 'config';\nimport { PlayerFragmentFragment } from 'graphql/autogen/types';\nimport { useEffect, useMemo } from 'react';\n\nconst BRIGHTID_CONTEXT = 'MetaGame';\nconst DEEPLINK_ENDPOINT = `brightid://link-verification/${CONFIG.brightIdNodeURL}/${BRIGHTID_CONTEXT}`;\nconst UNIVERSAL_LINK_ENDPOINT = `${CONFIG.brightIdAppURL}/link-verification/${CONFIG.brightIdNodeURL}/${CONFIG.brightIdNodeURL}/${BRIGHTID_CONTEXT}`;\nconst VERIFICATION_ENDPOINT = `${CONFIG.brightIdAppURL}/node/v5/verifications/${BRIGHTID_CONTEXT}`;\nconst POLL_INTERVAL = 5000;\n\ntype BrightIdVerificationStatus =\n  | {\n      unique: boolean;\n      app?: string;\n      context?: string;\n      contextIds: Array<string>;\n    }\n  | null\n  | undefined;\n\nconst isStatusVerified = (\n  status: BrightIdVerificationStatus,\n  contextId: string,\n): boolean =>\n  status?.unique === true || status?.contextIds.includes(contextId) === true;\n\nexport const useBrightIdStatus = ({\n  player,\n}: {\n  player: PlayerFragmentFragment;\n}): {\n  verified: boolean;\n  deeplink: string;\n  universalLink: string;\n} =>\n  useMemo(() => {\n    const contextId = player.id;\n    const verified = isStatusVerified(player.brightid_status, contextId);\n    const deeplink = `${DEEPLINK_ENDPOINT}/${contextId}`;\n    const universalLink = `${UNIVERSAL_LINK_ENDPOINT}/${contextId}`;\n\n    return { verified, deeplink, universalLink };\n  }, [player]);\n\nconst fetchVerificationData = async (\n  contextId: string,\n): Promise<BrightIdVerificationStatus> => {\n  try {\n    const response = await fetch(`${VERIFICATION_ENDPOINT}/${contextId}`);\n    if (!response.ok) return null;\n    const responseData = await response.json();\n    return responseData.data;\n  } catch (err) {\n    return null;\n  }\n};\n\nexport const useBrightIdUpdated = ({\n  player,\n  poll,\n}: {\n  player: PlayerFragmentFragment;\n  poll: boolean;\n}): void => {\n  const contextId = player.id;\n\n  useEffect(() => {\n    if (!contextId || !poll) return () => undefined;\n\n    let isSubscribed = true;\n\n    const update = () => {\n      fetchVerificationData(contextId).then((status) => {\n        const isVerified = isStatusVerified(status, contextId);\n        if (isSubscribed && isVerified) {\n          window.location.reload();\n        }\n      });\n    };\n\n    const interval = setInterval(update, POLL_INTERVAL);\n\n    return () => {\n      isSubscribed = false;\n      clearInterval(interval);\n    };\n  }, [contextId, poll]);\n};\n"]},"metadata":{},"sourceType":"module"}