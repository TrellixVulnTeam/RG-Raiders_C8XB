{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useGetQuestGuildsQuery, useGetQuestsQuery } from 'graphql/autogen/types';\nimport { useCallback, useState } from 'react';\nimport { defaultQueryVariables } from '../../graphql/getQuests'; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport const useQuestFilter = () => {\n  var _resGuilds$data;\n\n  const {\n    0: queryVariables,\n    1: setQueryVariables\n  } = useState(defaultQueryVariables);\n  const [resQuests] = useGetQuestsQuery({\n    variables: queryVariables\n  });\n  const [resGuilds] = useGetQuestGuildsQuery();\n  const {\n    fetching,\n    data,\n    error\n  } = resQuests;\n  const quests = (data === null || data === void 0 ? void 0 : data.quest) || null;\n  const guilds = (resGuilds === null || resGuilds === void 0 ? void 0 : (_resGuilds$data = resGuilds.data) === null || _resGuilds$data === void 0 ? void 0 : _resGuilds$data.quest_aggregate.nodes.map(q => ({\n    id: q.guild_id,\n    name: q.guild.name\n  }))) || [];\n  const aggregates = {\n    guilds\n  };\n  const setQueryVariable = useCallback( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (key, value) => {\n    setQueryVariables(oldQueryVariables => _objectSpread(_objectSpread({}, oldQueryVariables), {}, {\n      [key]: value !== '' ? value : null\n    }));\n  }, []);\n  return {\n    quests,\n    aggregates,\n    fetching,\n    error,\n    queryVariables,\n    setQueryVariable\n  };\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/lib/hooks/quests.ts"],"names":["useGetQuestGuildsQuery","useGetQuestsQuery","useCallback","useState","defaultQueryVariables","useQuestFilter","queryVariables","setQueryVariables","resQuests","variables","resGuilds","fetching","data","error","quests","quest","guilds","quest_aggregate","nodes","map","q","id","guild_id","name","guild","aggregates","setQueryVariable","key","value","oldQueryVariables"],"mappings":";;;;;;AAAA,SAGEA,sBAHF,EAIEC,iBAJF,QAKO,uBALP;AAMA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,qBAAT,QAAsC,yBAAtC,C,CAEA;;AAgBA,OAAO,MAAMC,cAAc,GAAG,MAAmB;AAAA;;AAC/C,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCJ,QAAQ,CAClDC,qBADkD,CAApD;AAGA,QAAM,CAACI,SAAD,IAAcP,iBAAiB,CAAC;AACpCQ,IAAAA,SAAS,EAAEH;AADyB,GAAD,CAArC;AAGA,QAAM,CAACI,SAAD,IAAcV,sBAAsB,EAA1C;AACA,QAAM;AAAEW,IAAAA,QAAF;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,MAA4BL,SAAlC;AAEA,QAAMM,MAAM,GAAG,CAAAF,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEG,KAAN,KAAe,IAA9B;AACA,QAAMC,MAAM,GACV,CAAAN,SAAS,SAAT,IAAAA,SAAS,WAAT,+BAAAA,SAAS,CAAEE,IAAX,oEAAiBK,eAAjB,CAAiCC,KAAjC,CAAuCC,GAAvC,CAA4CC,CAAD,KAAQ;AACjDC,IAAAA,EAAE,EAAED,CAAC,CAACE,QAD2C;AAEjDC,IAAAA,IAAI,EAAEH,CAAC,CAACI,KAAF,CAAQD;AAFmC,GAAR,CAA3C,MAGO,EAJT;AAMA,QAAME,UAAU,GAAG;AACjBT,IAAAA;AADiB,GAAnB;AAIA,QAAMU,gBAAqC,GAAGxB,WAAW,EACvD;AACA,GAACyB,GAAD,EAAcC,KAAd,KAA6B;AAC3BrB,IAAAA,iBAAiB,CAAEsB,iBAAD,oCACbA,iBADa;AAEhB,OAACF,GAAD,GAAOC,KAAK,KAAK,EAAV,GAAeA,KAAf,GAAuB;AAFd,MAAD,CAAjB;AAID,GAPsD,EAQvD,EARuD,CAAzD;AAWA,SAAO;AACLd,IAAAA,MADK;AAELW,IAAAA,UAFK;AAGLd,IAAAA,QAHK;AAILE,IAAAA,KAJK;AAKLP,IAAAA,cALK;AAMLoB,IAAAA;AANK,GAAP;AAQD,CAxCM","sourcesContent":["import {\n  GetQuestsQueryVariables,\n  QuestFragmentFragment,\n  useGetQuestGuildsQuery,\n  useGetQuestsQuery,\n} from 'graphql/autogen/types';\nimport { useCallback, useState } from 'react';\n\nimport { defaultQueryVariables } from '../../graphql/getQuests';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type QueryVariableSetter = (key: string, value: any) => void;\n\ninterface QuestFilter {\n  quests: QuestFragmentFragment[] | null;\n  fetching: boolean;\n  queryVariables: GetQuestsQueryVariables;\n  setQueryVariable: QueryVariableSetter;\n  aggregates: QuestAggregates;\n  error?: Error;\n}\n\nexport interface QuestAggregates {\n  guilds: { id: string; name: string }[];\n}\n\nexport const useQuestFilter = (): QuestFilter => {\n  const [queryVariables, setQueryVariables] = useState<GetQuestsQueryVariables>(\n    defaultQueryVariables,\n  );\n  const [resQuests] = useGetQuestsQuery({\n    variables: queryVariables,\n  });\n  const [resGuilds] = useGetQuestGuildsQuery();\n  const { fetching, data, error } = resQuests;\n\n  const quests = data?.quest || null;\n  const guilds =\n    resGuilds?.data?.quest_aggregate.nodes.map((q) => ({\n      id: q.guild_id,\n      name: q.guild.name,\n    })) || [];\n\n  const aggregates = {\n    guilds,\n  };\n\n  const setQueryVariable: QueryVariableSetter = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (key: string, value: any) => {\n      setQueryVariables((oldQueryVariables) => ({\n        ...oldQueryVariables,\n        [key]: value !== '' ? value : null,\n      }));\n    },\n    [],\n  );\n\n  return {\n    quests,\n    aggregates,\n    fetching,\n    error,\n    queryVariables,\n    setQueryVariable,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}