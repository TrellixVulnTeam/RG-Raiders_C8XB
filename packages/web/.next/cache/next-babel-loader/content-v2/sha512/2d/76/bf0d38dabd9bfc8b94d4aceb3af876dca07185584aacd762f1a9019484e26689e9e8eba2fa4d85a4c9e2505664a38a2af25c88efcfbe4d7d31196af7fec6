{"ast":null,"code":"import _slicedToArray from \"/Users/mark.wagner/Dropbox/projects/TheGame/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useGetpSeedBalanceQuery } from '../../graphql/autogen/types';\nimport { useUser } from './index';\nexport var usePSeedBalance = function usePSeedBalance() {\n  _s();\n\n  var _respSeedBalance$data, _respSeedBalance$data2;\n\n  var _useUser = useUser(),\n      user = _useUser.user;\n\n  var _useGetpSeedBalanceQu = useGetpSeedBalanceQuery({\n    variables: {\n      address: (user === null || user === void 0 ? void 0 : user.ethereum_address) || ''\n    },\n    pause: !(user !== null && user !== void 0 && user.ethereum_address)\n  }),\n      _useGetpSeedBalanceQu2 = _slicedToArray(_useGetpSeedBalanceQu, 1),\n      respSeedBalance = _useGetpSeedBalanceQu2[0];\n\n  var pSeedBalance = (user === null || user === void 0 ? void 0 : user.ethereum_address) && ((_respSeedBalance$data = respSeedBalance.data) === null || _respSeedBalance$data === void 0 ? void 0 : (_respSeedBalance$data2 = _respSeedBalance$data.getTokenBalances) === null || _respSeedBalance$data2 === void 0 ? void 0 : _respSeedBalance$data2.pSeedBalance) || null;\n  return {\n    pSeedBalance: pSeedBalance,\n    fetching: respSeedBalance.fetching\n  };\n};\n\n_s(usePSeedBalance, \"Wobdn4p64SvCl2EX3Pv8qvajkME=\", false, function () {\n  return [useUser, useGetpSeedBalanceQuery];\n});","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/lib/hooks/balances.ts"],"names":["useGetpSeedBalanceQuery","useUser","usePSeedBalance","user","variables","address","ethereum_address","pause","respSeedBalance","pSeedBalance","data","getTokenBalances","fetching"],"mappings":";;;;AAAA,SAASA,uBAAT,QAAwC,6BAAxC;AACA,SAASC,OAAT,QAAwB,SAAxB;AAMA,OAAO,IAAMC,eAAuC,GAAG,SAA1CA,eAA0C,GAAM;AAAA;;AAAA;;AAAA,iBAC1CD,OAAO,EADmC;AAAA,MACnDE,IADmD,YACnDA,IADmD;;AAAA,8BAGjCH,uBAAuB,CAAC;AAChDI,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE,CAAAF,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEG,gBAAN,KAA0B;AAD1B,KADqC;AAIhDC,IAAAA,KAAK,EAAE,EAACJ,IAAD,aAACA,IAAD,eAACA,IAAI,CAAEG,gBAAP;AAJyC,GAAD,CAHU;AAAA;AAAA,MAGpDE,eAHoD;;AAS3D,MAAMC,YAAY,GACf,CAAAN,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEG,gBAAN,+BACCE,eAAe,CAACE,IADjB,oFACC,sBAAsBC,gBADvB,2DACC,uBAAwCF,YADzC,CAAD,IAEA,IAHF;AAKA,SAAO;AACLA,IAAAA,YAAY,EAAZA,YADK;AAELG,IAAAA,QAAQ,EAAEJ,eAAe,CAACI;AAFrB,GAAP;AAID,CAlBM;;GAAMV,e;UACMD,O,EAESD,uB","sourcesContent":["import { useGetpSeedBalanceQuery } from '../../graphql/autogen/types';\nimport { useUser } from './index';\n\ninterface PSeedBalanceHook {\n  pSeedBalance: string | null;\n  fetching: boolean;\n}\nexport const usePSeedBalance: () => PSeedBalanceHook = () => {\n  const { user } = useUser();\n\n  const [respSeedBalance] = useGetpSeedBalanceQuery({\n    variables: {\n      address: user?.ethereum_address || '',\n    },\n    pause: !user?.ethereum_address,\n  });\n  const pSeedBalance =\n    (user?.ethereum_address &&\n      respSeedBalance.data?.getTokenBalances?.pSeedBalance) ||\n    null;\n\n  return {\n    pSeedBalance,\n    fetching: respSeedBalance.fetching,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}