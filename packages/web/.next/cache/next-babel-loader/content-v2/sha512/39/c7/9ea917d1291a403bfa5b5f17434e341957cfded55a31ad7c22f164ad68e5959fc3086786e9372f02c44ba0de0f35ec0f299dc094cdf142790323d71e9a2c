{"ast":null,"code":"import AmbitionAltImg from 'assets/colors/Ambition.svg';\nimport BalanceAltImg from 'assets/colors/Balance.svg';\nimport ChaosAltImg from 'assets/colors/Chaos.svg';\nimport JusticeAltImg from 'assets/colors/Justice.svg';\nimport WisdomAltImg from 'assets/colors/Wisdom.svg';\nimport gql from 'fake-tag';\nimport { isPow2 } from 'utils/mathHelper';\nimport { client } from './client';\nconst AspectsQuery = gql`\n  query GetAspects {\n    ColorAspect {\n      mask\n      name\n      description\n    }\n  }\n`;\nexport const images = {\n  0b10000: JusticeAltImg,\n  0b01000: WisdomAltImg,\n  0b00100: AmbitionAltImg,\n  0b00010: ChaosAltImg,\n  0b00001: BalanceAltImg\n};\nexport const colors = {\n  0b10000: {\n    start: '#DCA8A9',\n    end: '#ffffff'\n  },\n  0b01000: {\n    start: '#04468B',\n    end: '#09B9F2'\n  },\n  0b00100: {\n    start: '#020121',\n    end: '#2F3E57'\n  },\n  0b00010: {\n    start: '#94136E',\n    end: '#F15236'\n  },\n  0b00001: {\n    start: '#0E9651',\n    end: '#9FD638'\n  }\n};\nexport const getPersonalityInfo = async () => {\n  const {\n    data,\n    error\n  } = await client.query(AspectsQuery).toPromise();\n  if (error) throw error;\n  if (!data) throw new Error(\"data isn't set\");\n  const parts = [];\n  const types = {};\n  data.ColorAspect.forEach(aspect => {\n    const option = {\n      name: aspect.name,\n      description: aspect.description,\n      mask: aspect.mask\n    };\n    types[aspect.mask] = option; // pure colors are powers of 2 (only 1 bit set)\n\n    if (isPow2(aspect.mask)) {\n      parts.push(option);\n    }\n  });\n  return {\n    parts,\n    types\n  };\n};","map":{"version":3,"sources":["/Users/mark.wagner/Dropbox/projects/TheGame/packages/web/graphql/getPersonalityInfo.ts"],"names":["AmbitionAltImg","BalanceAltImg","ChaosAltImg","JusticeAltImg","WisdomAltImg","gql","isPow2","client","AspectsQuery","images","colors","start","end","getPersonalityInfo","data","error","query","toPromise","Error","parts","types","ColorAspect","forEach","aspect","option","name","description","mask","push"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,4BAA3B;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AAGA,SAASC,MAAT,QAAuB,UAAvB;AAGA,MAAMC,YAAY,GAAGH,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAeA,OAAO,MAAMI,MAEZ,GAAG;AACF,WAASN,aADP;AAEF,WAASC,YAFP;AAGF,WAASJ,cAHP;AAIF,WAASE,WAJP;AAKF,WAASD;AALP,CAFG;AAUP,OAAO,MAAMS,MAEZ,GAAG;AACF,WAAS;AAAEC,IAAAA,KAAK,EAAE,SAAT;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GADP;AAEF,WAAS;AAAED,IAAAA,KAAK,EAAE,SAAT;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GAFP;AAGF,WAAS;AAAED,IAAAA,KAAK,EAAE,SAAT;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GAHP;AAIF,WAAS;AAAED,IAAAA,KAAK,EAAE,SAAT;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GAJP;AAKF,WAAS;AAAED,IAAAA,KAAK,EAAE,SAAT;AAAoBC,IAAAA,GAAG,EAAE;AAAzB;AALP,CAFG;AAUP,OAAO,MAAMC,kBAAkB,GAAG,YAG5B;AACJ,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkB,MAAMR,MAAM,CAACS,KAAP,CAAaR,YAAb,EAA2BS,SAA3B,EAA9B;AAEA,MAAIF,KAAJ,EAAW,MAAMA,KAAN;AACX,MAAI,CAACD,IAAL,EAAW,MAAM,IAAII,KAAJ,CAAU,gBAAV,CAAN;AAEX,QAAMC,KAA+B,GAAG,EAAxC;AACA,QAAMC,KAAyC,GAAG,EAAlD;AACAN,EAAAA,IAAI,CAACO,WAAL,CAAiBC,OAAjB,CAA0BC,MAAD,IAAyB;AAChD,UAAMC,MAAM,GAAG;AACbC,MAAAA,IAAI,EAAEF,MAAM,CAACE,IADA;AAEbC,MAAAA,WAAW,EAAEH,MAAM,CAACG,WAFP;AAGbC,MAAAA,IAAI,EAAEJ,MAAM,CAACI;AAHA,KAAf;AAKAP,IAAAA,KAAK,CAACG,MAAM,CAACI,IAAR,CAAL,GAAqBH,MAArB,CANgD,CAQhD;;AACA,QAAIlB,MAAM,CAACiB,MAAM,CAACI,IAAR,CAAV,EAAyB;AACvBR,MAAAA,KAAK,CAACS,IAAN,CAAWJ,MAAX;AACD;AACF,GAZD;AAcA,SAAO;AAAEL,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD,CA1BM","sourcesContent":["import AmbitionAltImg from 'assets/colors/Ambition.svg';\nimport BalanceAltImg from 'assets/colors/Balance.svg';\nimport ChaosAltImg from 'assets/colors/Chaos.svg';\nimport JusticeAltImg from 'assets/colors/Justice.svg';\nimport WisdomAltImg from 'assets/colors/Wisdom.svg';\nimport gql from 'fake-tag';\nimport { isPow2 } from 'utils/mathHelper';\n\nimport { ColorAspect } from './autogen/types';\nimport { client } from './client';\nimport { PersonalityOption } from './types';\n\nconst AspectsQuery = gql`\n  query GetAspects {\n    ColorAspect {\n      mask\n      name\n      description\n    }\n  }\n`;\n\nexport type ColorStops = {\n  start: string;\n  end: string;\n};\n\nexport const images: {\n  [x: number]: string;\n} = {\n  0b10000: JusticeAltImg,\n  0b01000: WisdomAltImg,\n  0b00100: AmbitionAltImg,\n  0b00010: ChaosAltImg,\n  0b00001: BalanceAltImg,\n};\n\nexport const colors: {\n  [x: number]: ColorStops;\n} = {\n  0b10000: { start: '#DCA8A9', end: '#ffffff' },\n  0b01000: { start: '#04468B', end: '#09B9F2' },\n  0b00100: { start: '#020121', end: '#2F3E57' },\n  0b00010: { start: '#94136E', end: '#F15236' },\n  0b00001: { start: '#0E9651', end: '#9FD638' },\n};\n\nexport const getPersonalityInfo = async (): Promise<{\n  parts: Array<PersonalityOption>;\n  types: { [any: string]: PersonalityOption };\n}> => {\n  const { data, error } = await client.query(AspectsQuery).toPromise();\n\n  if (error) throw error;\n  if (!data) throw new Error(\"data isn't set\");\n\n  const parts: Array<PersonalityOption> = [];\n  const types: { [x: number]: PersonalityOption } = {};\n  data.ColorAspect.forEach((aspect: ColorAspect) => {\n    const option = {\n      name: aspect.name,\n      description: aspect.description,\n      mask: aspect.mask,\n    };\n    types[aspect.mask] = option;\n\n    // pure colors are powers of 2 (only 1 bit set)\n    if (isPow2(aspect.mask)) {\n      parts.push(option);\n    }\n  });\n\n  return { parts, types };\n};\n"]},"metadata":{},"sourceType":"module"}